openapi: 3.0.3
info:
  title: SOA Lab - labworks service - OpenAPI 3.0
  description: |-
    **OpenAPI specification for '_Service oriented architecture_' course lab at ITMO university.**
  version: 1.0.0
servers:
  - url: http://TBD/api/v3

tags:
  - name: labworks
    description: Standard lab works operations

paths:
  /labworks:
    post:
      tags:
        - labworks
      summary: Add new lab work to the collection
      operationId: addLabWork
      requestBody:
        required: true
        description: Lab work to add to the collection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabWork'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabWork"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "422":
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    get:
      tags:
        - labworks
      summary: Get all lab works (supports filtering and sorting)
      operationId: getAllLabWorks
      parameters:
        - name: filter
          in: query
          description: >+
            Uses LHS brackets.\

            Overall structure for each filter: `filter={parameter_name}[operator]={operand}`.\

            **e.g.** `filter=id[gt]=1`.\

            `parameter_name` can be one of:
              * `id`
              * `name`
              * `coordinate_x`
              * `coordinate_y`
              * `creation_date`
              * `minimal_point`
              * `difficulty`
              * `discipline_name`
              * `discipline_self_study_hours`

            `operator` can be one of:
              * `lt`  -- _lower than_, **applicable to** `number`, `string`, `enum`, `date` types
              * `lte` -- _lower than or equals to_, **applicable to** `number`, `string`, `enum`, `date` types
              * `gt`  -- _greater than_, **applicable to** `number`, `string`, `enum`, `date` types
              * `gte` -- _greater than or equals to_, **applicable to** `number`, `string`, `enum`, `date` types
              * `eq`  -- _equals to_, **applicable to** `number`, `string`, `enum`, `date` types
              * `gte` -- _not equals to_, **applicable to** `number`, `string`, `enum`, `date` types
              * `~` -- _like_ or _contains substring_, **applicable to** `string` type

              `operand` can be any value with type same as `parameter` type.
          schema:
            type: array
            items:
              type: string
              nullable: false
              example: "id[gt]=1"
        - name: sort
          in: query
          description: >+
            Overall structure for each sort: 
            `sort={parameter_name}` for **ascending** order and
            `sort={parameter_name}[desc]` for **descending** order.\

            **e.g.** `sort=id[desc]`.\

            `parameter_name` can be one of:
              * `id`
              * `name`
              * `coordinate_x`
              * `coordinate_y`
              * `creation_date`
              * `minimal_point`
              * `difficulty`
              * `discipline_name`
              * `discipline_self_study_hours`

            **Order of the sorts matters.**\

            Thus, `sort=name&sort=id` first will sort all objects by their `name` values and only then by `id`.
          schema:
            type: array
            items:
              type: string
              nullable: false
              example: "id[desc]"
        - name: limit
          in: query
          required: true
          description: Pagination parameter. How many entries in overall result array to show.
          schema:
            type: integer
            format: int32
            nullable: false
            minimum: 1
            maximum: 100
            example: 10
        - name: offset
          in: query
          required: true
          description: Pagination parameter. How many entries in overall result array to skip from the beginning.
          schema:
            type: integer
            format: int32
            nullable: false
            minimum: 0
            example: 50
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  elements:
                    type: array
                    nullable: false
                    items:
                      $ref: "#/components/schemas/LabWork"
                  totalCount:
                    type: integer
                    format: int32
                    nullable: false
                    minimum: 0
                    example: 30
                      
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "414":
          description: URI is too long
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/URITooLongException"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

  /labworks/{labwork-id}:
    get:
      tags:
        - labworks
      summary: Get lab work by ID
      operationId: getLabWork
      parameters:
        - name: labwork-id
          in: path
          required: true
          description: ID of the lab work to get
          schema:
            type: integer
            format: int64
            nullable: false
            minimum: 1
            example: 1337
            readOnly: true
            description: "Value is unique. Generated automatically."
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabWork"
        "400":
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "404":
          description: Lab work was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "414":
          description: URI is too long
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/URITooLongException"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    put:
      tags:
        - labworks
      summary: Update lab work by ID
      operationId: updateLabWork
      requestBody:
        required: true
        description: Lab work to put in the collection by ID
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabWork'
      parameters:
        - name: labwork-id
          in: path
          required: true
          description: ID of the lab work to update
          schema:
            type: integer
            format: int64
            nullable: false
            minimum: 1
            example: 1337
            readOnly: true
            description: "Value is unique. Generated automatically."
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabWork"
        "400":
          description: Invalid input (including invalid ID)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "404":
          description: Lab work was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "414":
          description: URI is too long
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/URITooLongException"
        "422":
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    delete:
      tags:
        - labworks
      summary: Delete lab work by ID
      operationId: deleteLabWorkById
      parameters:
        - name: labwork-id
          in: path
          required: true
          description: ID of the lab work to update
          schema:
            type: integer
            format: int64
            nullable: false
            minimum: 1
            example: 1337
            readOnly: true
            description: "Value is unique. Generated automatically."
      responses:
        "204":
          description: Successful operation
        "400":
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "404":
          description: Lab work was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "414":
          description: URI is too long
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/URITooLongException"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

  /disciplines/{discipline-name}/labworks:
    delete:
      tags:
        - disciplines
      summary: Delete lab works by discipline name
      operationId: deleteLabWorksByDisciplineName
      parameters:
        - name: discipline-name
          in: path
          required: true
          description: Discipline name of the lab works to delete
          schema:
            $ref: "#/components/schemas/Discipline/properties/name"
      responses:
        "204":
          description: Successful operation
        "400":
          description: Invalid discipline name supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "414":
          description: URI is too long
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/URITooLongException"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

  /minimal-points/sum:
    get:
      tags:
        - minimal-points
      summary: Calculate sum of the minimal point value
      description: Calculate sum of the minimal point value of all lab works in the collection. Returns `null` if collection is empty
      operationId: sumMinimalPoints
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    type: number
                    format: double
                    nullable: true
                    minimum: 0
                    example: 86.64

  /enums/{enum-name}:
    get:
      tags:
        - enums
      summary: Get all possible values for enum
      operationId: getEnumValues
      parameters:
        - name: enum-name
          in: path
          required: true
          description: Enum whose values to get. Case insentitive
          schema:
            type: string
            nullable: false
            minLength: 1
            example: "difficulty"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  nullable: false
                example: ["very_easy", "easy", "hard", "very_hard", "hopeless"]
        "400":
          description: Invalid enum name supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "404":
          description: Enum was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "414":
          description: URI is too long
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/URITooLongException"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

components:
  schemas:
    LabWork:
      type: object
      required:
        - name
        - coordinates
        - minimalPoint
        - difficulty
        - discipline
      properties:
        id:
          type: integer
          format: int64
          nullable: false
          minimum: 1
          example: 1337
          readOnly: true
          description: "Value is unique. Generated automatically."
        name:
          type: string
          nullable: false
          minLength: 1
          example: "SOA Lab 1"
        coordinates:
          allOf:
            - $ref: "#/components/schemas/Coordinates"
            - nullable: false
        creationDate:
          type: string
          format: date
          nullable: false
          example: "2002-09-11"
          readOnly: true
          description: "Generated automatically. Format: YYYY-MM-DD."
        minimalPoint:
          type: number
          format: double
          nullable: false
          minimum: 0
          exclusiveMinimum: true
          example: 12.23
        difficulty:
          allOf:
            - $ref: "#/components/schemas/Difficulty"
            - nullable: false
        discipline:
          allOf:
            - $ref: "#/components/schemas/Discipline"
            - nullable: false
    Coordinates:
      type: object
      required:
        - x
        - y
      properties:
        x:
          type: integer
          format: int64
          nullable: false
          minimum: -896
          example: -13
        y:
          type: integer
          format: int32
          nullable: false
          minimum: -528
          example: 32
    Difficulty:
      type: string
      enum:
        - very_easy
        - easy
        - hard
        - very_hard
        - hopeless
      example: hard
    Discipline:
      required:
        - name
        - selfStudyHours
      type: object
      properties:
        name:
          type: string
          nullable: false
          minLength: 1
          example: "SOA"
        selfStudyHours:
          type: integer
          format: int32
          nullable: false
          example: 256

    InvalidInputException:
      type: object
      required:
        - messages
      properties:
        messages:
          type: array
          nullable: false
          items:
            type: string
            nullable: false
            minLength: 1
            example: "Cannot process input in {field_name}"
    NotFoundException:
      type: object
      required:
        - messages
      properties:
        messages:
          type: array
          nullable: false
          items:
            type: string
            nullable: false
            minLength: 1
            example: "Object {object_name} was not found"
    URITooLongException:
      type: object
      required:
        - messages
      properties:
        messages:
          type: array
          nullable: false
          items:
            type: string
            nullable: false
            minLength: 1
            example: "Request URI is too long"
    ValidationException:
      type: object
      required:
        - messages
      properties:
        messages:
          type: array
          nullable: false
          items:
            type: string
            nullable: false
            minLength: 1
            example: "Value of {field_name} is invalid"
    InternalServerError:
      type: object
      required:
        - messages
      properties:
        messages:
          type: array
          nullable: false
          items:
            type: string
            nullable: false
            minLength: 1
            example: "Something went wrong; internal server error"

  parameters:
    LabWorkName:
      name: name
      in: query
      required: true
      description: Lab work name
      schema:
        $ref: "#/components/schemas/LabWork/properties/name"
    CoordinateX:
      name: coordinate-x
      in: query
      required: true
      description: X coordinate
      schema:
        $ref: "#/components/schemas/Coordinates/properties/x"
    CoordinateY:
      name: coordinate-y
      in: query
      required: true
      description: Y coordinate
      schema:
        $ref: "#/components/schemas/Coordinates/properties/y"
    LabWorkMinimalPoint:
      name: minimal-point
      in: query
      required: true
      description: Minimal point
      schema:
        $ref: "#/components/schemas/LabWork/properties/minimalPoint"
    Difficulty:
      name: difficulty
      in: query
      required: true
      description: Lab work difficulty
      schema:
        $ref: "#/components/schemas/Difficulty"
    DisciplineName:
      name: discipline-name
      in: query
      required: true
      description: Discipline name
      schema:
        $ref: "#/components/schemas/Discipline/properties/name"
    DisciplineSelfStudyHours:
      name: discipline-self-study-hours
      in: query
      required: true
      description: Disciple self study hours
      schema:
        $ref: "#/components/schemas/Discipline/properties/selfStudyHours"
