
lab-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041b8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004364  08004364  00014364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043fc  080043fc  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  080043fc  080043fc  000143fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004404  08004404  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004404  08004404  00014404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004408  08004408  00014408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0800440c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d8  2**0
                  CONTENTS
 10 .bss          00000954  200000d8  200000d8  000200d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a2c  20000a2c  000200d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a0d0  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bcd  00000000  00000000  0002a1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d8  00000000  00000000  0002bda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000720  00000000  00000000  0002c580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ab9  00000000  00000000  0002cca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a30c  00000000  00000000  0004f759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfaa7  00000000  00000000  00059a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012950c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002708  00000000  00000000  0012955c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200000d8 	.word	0x200000d8
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800434c 	.word	0x0800434c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200000dc 	.word	0x200000dc
 80001e8:	0800434c 	.word	0x0800434c

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	4b1e      	ldr	r3, [pc, #120]	; (8000584 <MX_GPIO_Init+0x84>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a1d      	ldr	r2, [pc, #116]	; (8000584 <MX_GPIO_Init+0x84>)
 8000510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
 8000516:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <MX_GPIO_Init+0x84>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	4b17      	ldr	r3, [pc, #92]	; (8000584 <MX_GPIO_Init+0x84>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	4a16      	ldr	r2, [pc, #88]	; (8000584 <MX_GPIO_Init+0x84>)
 800052c:	f043 0304 	orr.w	r3, r3, #4
 8000530:	6313      	str	r3, [r2, #48]	; 0x30
 8000532:	4b14      	ldr	r3, [pc, #80]	; (8000584 <MX_GPIO_Init+0x84>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f003 0304 	and.w	r3, r3, #4
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	4b10      	ldr	r3, [pc, #64]	; (8000584 <MX_GPIO_Init+0x84>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a0f      	ldr	r2, [pc, #60]	; (8000584 <MX_GPIO_Init+0x84>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <MX_GPIO_Init+0x84>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	603b      	str	r3, [r7, #0]
 800055e:	4b09      	ldr	r3, [pc, #36]	; (8000584 <MX_GPIO_Init+0x84>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a08      	ldr	r2, [pc, #32]	; (8000584 <MX_GPIO_Init+0x84>)
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b06      	ldr	r3, [pc, #24]	; (8000584 <MX_GPIO_Init+0x84>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	603b      	str	r3, [r7, #0]
 8000574:	683b      	ldr	r3, [r7, #0]

}
 8000576:	bf00      	nop
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	40023800 	.word	0x40023800

08000588 <buf_init>:

char buf_char[2] = {'\0', '\0'};

InputMode mode = DEFAULT;

void buf_init(RingBuffer *buf) {
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	buf->head = 0;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2200      	movs	r2, #0
 8000594:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	buf->tail = 0;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2200      	movs	r2, #0
 800059c:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
	buf->is_empty = true;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2201      	movs	r2, #1
 80005a4:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <buf_write>:

void buf_write(RingBuffer *buf, char *in) {
 80005b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80005b8:	b08a      	sub	sp, #40	; 0x28
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	60f8      	str	r0, [r7, #12]
 80005be:	60b9      	str	r1, [r7, #8]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80005c0:	f3ef 8310 	mrs	r3, PRIMASK
 80005c4:	617b      	str	r3, [r7, #20]
  return(result);
 80005c6:	697b      	ldr	r3, [r7, #20]
	uint32_t pmask = __get_PRIMASK();
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80005ca:	b672      	cpsid	i
}
 80005cc:	bf00      	nop
	__disable_irq();

	uint64_t size = strlen(in);
 80005ce:	68b8      	ldr	r0, [r7, #8]
 80005d0:	f7ff fe0c 	bl	80001ec <strlen>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2200      	movs	r2, #0
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	607a      	str	r2, [r7, #4]
 80005dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80005e0:	e9c7 2306 	strd	r2, r3, [r7, #24]

	if (buf->head + size + 1 > BUF_SIZE)
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	2200      	movs	r2, #0
 80005ee:	469a      	mov	sl, r3
 80005f0:	4693      	mov	fp, r2
 80005f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80005f6:	eb1a 0802 	adds.w	r8, sl, r2
 80005fa:	eb4b 0903 	adc.w	r9, fp, r3
 80005fe:	f118 0401 	adds.w	r4, r8, #1
 8000602:	f149 0500 	adc.w	r5, r9, #0
 8000606:	f240 4301 	movw	r3, #1025	; 0x401
 800060a:	429c      	cmp	r4, r3
 800060c:	f175 0300 	sbcs.w	r3, r5, #0
 8000610:	d303      	bcc.n	800061a <buf_write+0x66>
		buf->head = 0;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	2200      	movs	r2, #0
 8000616:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400

	strcpy(&buf->data[buf->head], in);
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8000620:	461a      	mov	r2, r3
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	4413      	add	r3, r2
 8000626:	68b9      	ldr	r1, [r7, #8]
 8000628:	4618      	mov	r0, r3
 800062a:	f003 fd26 	bl	800407a <strcpy>
	buf->head += size + 1;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 8000634:	7e3b      	ldrb	r3, [r7, #24]
 8000636:	4413      	add	r3, r2
 8000638:	b2db      	uxtb	r3, r3
 800063a:	3301      	adds	r3, #1
 800063c:	b2da      	uxtb	r2, r3
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400

	if (buf->head == BUF_SIZE)
		buf->head = 0;

	buf->is_empty = false;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	2200      	movs	r2, #0
 8000648:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
 800064c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000650:	693b      	ldr	r3, [r7, #16]
 8000652:	f383 8810 	msr	PRIMASK, r3
}
 8000656:	bf00      	nop

	__set_PRIMASK(pmask);
}
 8000658:	bf00      	nop
 800065a:	3728      	adds	r7, #40	; 0x28
 800065c:	46bd      	mov	sp, r7
 800065e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000662 <buf_read>:

bool buf_read(RingBuffer *buf, char *out) {
 8000662:	b5b0      	push	{r4, r5, r7, lr}
 8000664:	b08a      	sub	sp, #40	; 0x28
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
 800066a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800066c:	f3ef 8310 	mrs	r3, PRIMASK
 8000670:	617b      	str	r3, [r7, #20]
  return(result);
 8000672:	697b      	ldr	r3, [r7, #20]
	uint32_t pmask = __get_PRIMASK();
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000676:	b672      	cpsid	i
}
 8000678:	bf00      	nop
	__disable_irq();

	if (buf->is_empty){
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8000680:	2b00      	cmp	r3, #0
 8000682:	d007      	beq.n	8000694 <buf_read+0x32>
 8000684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000686:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000688:	693b      	ldr	r3, [r7, #16]
 800068a:	f383 8810 	msr	PRIMASK, r3
}
 800068e:	bf00      	nop
		__set_PRIMASK(pmask);
		return false;
 8000690:	2300      	movs	r3, #0
 8000692:	e03f      	b.n	8000714 <buf_read+0xb2>
	}

	uint64_t size = strlen(&buf->data[buf->tail]);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800069a:	461a      	mov	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4413      	add	r3, r2
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff fda3 	bl	80001ec <strlen>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2200      	movs	r2, #0
 80006aa:	461c      	mov	r4, r3
 80006ac:	4615      	mov	r5, r2
 80006ae:	e9c7 4506 	strd	r4, r5, [r7, #24]

	strcpy(out, &buf->data[buf->tail]);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80006b8:	461a      	mov	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	4619      	mov	r1, r3
 80006c0:	6838      	ldr	r0, [r7, #0]
 80006c2:	f003 fcda 	bl	800407a <strcpy>
	buf->tail += size + 1;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 80006cc:	7e3b      	ldrb	r3, [r7, #24]
 80006ce:	4413      	add	r3, r2
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	3301      	adds	r3, #1
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401

	if (buf->tail == BUF_SIZE || buf->tail == '\0')
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d103      	bne.n	80006ee <buf_read+0x8c>
		buf->tail = 0;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2200      	movs	r2, #0
 80006ea:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401

	if (buf->tail == buf->head)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d103      	bne.n	8000706 <buf_read+0xa4>
		buf->is_empty = true;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2201      	movs	r2, #1
 8000702:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
 8000706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000708:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	f383 8810 	msr	PRIMASK, r3
}
 8000710:	bf00      	nop

	__set_PRIMASK(pmask);
	return true;
 8000712:	2301      	movs	r3, #1
}
 8000714:	4618      	mov	r0, r3
 8000716:	3728      	adds	r7, #40	; 0x28
 8000718:	46bd      	mov	sp, r7
 800071a:	bdb0      	pop	{r4, r5, r7, pc}

0800071c <read_button>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern void initialise_monitor_handles(void);

GPIO_PinState read_button(void) {
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOC, BUTTON_PIN);
 8000720:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000724:	4802      	ldr	r0, [pc, #8]	; (8000730 <read_button+0x14>)
 8000726:	f001 f94b 	bl	80019c0 <HAL_GPIO_ReadPin>
 800072a:	4603      	mov	r3, r0
}
 800072c:	4618      	mov	r0, r3
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40020800 	.word	0x40020800

08000734 <enable_interruptions>:

void enable_interruptions(void) {
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000738:	2047      	movs	r0, #71	; 0x47
 800073a:	f000 fece 	bl	80014da <HAL_NVIC_EnableIRQ>
	interruptions_enabled = true;
 800073e:	4b02      	ldr	r3, [pc, #8]	; (8000748 <enable_interruptions+0x14>)
 8000740:	2201      	movs	r2, #1
 8000742:	701a      	strb	r2, [r3, #0]
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000114 	.word	0x20000114

0800074c <disable_interruptions>:

void disable_interruptions(void) {
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	while (transmit_busy) ; // wait until everything from transmit_buffer is sent to the UART
 8000750:	bf00      	nop
 8000752:	4b07      	ldr	r3, [pc, #28]	; (8000770 <disable_interruptions+0x24>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d1fb      	bne.n	8000752 <disable_interruptions+0x6>
	HAL_UART_AbortReceive(&huart6);
 800075a:	4806      	ldr	r0, [pc, #24]	; (8000774 <disable_interruptions+0x28>)
 800075c:	f002 f800 	bl	8002760 <HAL_UART_AbortReceive>
	HAL_NVIC_DisableIRQ(USART6_IRQn);
 8000760:	2047      	movs	r0, #71	; 0x47
 8000762:	f000 fec8 	bl	80014f6 <HAL_NVIC_DisableIRQ>
	interruptions_enabled = false;
 8000766:	4b04      	ldr	r3, [pc, #16]	; (8000778 <disable_interruptions+0x2c>)
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000115 	.word	0x20000115
 8000774:	20000928 	.word	0x20000928
 8000778:	20000114 	.word	0x20000114

0800077c <light_led>:

void light_led(uint16_t led_pin, uint8_t blink_cnt, uint8_t time) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	80fb      	strh	r3, [r7, #6]
 8000786:	460b      	mov	r3, r1
 8000788:	717b      	strb	r3, [r7, #5]
 800078a:	4613      	mov	r3, r2
 800078c:	713b      	strb	r3, [r7, #4]
	while (blink_cnt--) {
 800078e:	e013      	b.n	80007b8 <light_led+0x3c>
		HAL_GPIO_WritePin(GPIOD, led_pin, GPIO_PIN_SET);
 8000790:	88fb      	ldrh	r3, [r7, #6]
 8000792:	2201      	movs	r2, #1
 8000794:	4619      	mov	r1, r3
 8000796:	480d      	ldr	r0, [pc, #52]	; (80007cc <light_led+0x50>)
 8000798:	f001 f92a 	bl	80019f0 <HAL_GPIO_WritePin>
		HAL_Delay(time);
 800079c:	793b      	ldrb	r3, [r7, #4]
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fd5c 	bl	800125c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, led_pin, GPIO_PIN_RESET);
 80007a4:	88fb      	ldrh	r3, [r7, #6]
 80007a6:	2200      	movs	r2, #0
 80007a8:	4619      	mov	r1, r3
 80007aa:	4808      	ldr	r0, [pc, #32]	; (80007cc <light_led+0x50>)
 80007ac:	f001 f920 	bl	80019f0 <HAL_GPIO_WritePin>
		HAL_Delay(time);
 80007b0:	793b      	ldrb	r3, [r7, #4]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 fd52 	bl	800125c <HAL_Delay>
	while (blink_cnt--) {
 80007b8:	797b      	ldrb	r3, [r7, #5]
 80007ba:	1e5a      	subs	r2, r3, #1
 80007bc:	717a      	strb	r2, [r7, #5]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d1e6      	bne.n	8000790 <light_led+0x14>
	}
}
 80007c2:	bf00      	nop
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40020c00 	.word	0x40020c00

080007d0 <uart_write>:

void uart_write(char *data) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	uint16_t size = strlen(data);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff fd07 	bl	80001ec <strlen>
 80007de:	4603      	mov	r3, r0
 80007e0:	81fb      	strh	r3, [r7, #14]
	if (interruptions_enabled) {
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <uart_write+0x54>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d012      	beq.n	8000810 <uart_write+0x40>
		if (transmit_busy) {
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <uart_write+0x58>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d004      	beq.n	80007fc <uart_write+0x2c>
			buf_write(&transmit_buffer, data);
 80007f2:	6879      	ldr	r1, [r7, #4]
 80007f4:	480d      	ldr	r0, [pc, #52]	; (800082c <uart_write+0x5c>)
 80007f6:	f7ff fedd 	bl	80005b4 <buf_write>
		} else {
			transmit_busy = true;
			HAL_UART_Transmit_IT(&huart6, (uint8_t *) data, size);
		}
	} else HAL_UART_Transmit(&huart6, (uint8_t *) data, size, 100);
}
 80007fa:	e00f      	b.n	800081c <uart_write+0x4c>
			transmit_busy = true;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <uart_write+0x58>)
 80007fe:	2201      	movs	r2, #1
 8000800:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart6, (uint8_t *) data, size);
 8000802:	89fb      	ldrh	r3, [r7, #14]
 8000804:	461a      	mov	r2, r3
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	4809      	ldr	r0, [pc, #36]	; (8000830 <uart_write+0x60>)
 800080a:	f001 ff34 	bl	8002676 <HAL_UART_Transmit_IT>
}
 800080e:	e005      	b.n	800081c <uart_write+0x4c>
	} else HAL_UART_Transmit(&huart6, (uint8_t *) data, size, 100);
 8000810:	89fa      	ldrh	r2, [r7, #14]
 8000812:	2364      	movs	r3, #100	; 0x64
 8000814:	6879      	ldr	r1, [r7, #4]
 8000816:	4806      	ldr	r0, [pc, #24]	; (8000830 <uart_write+0x60>)
 8000818:	f001 fdf9 	bl	800240e <HAL_UART_Transmit>
}
 800081c:	bf00      	nop
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000114 	.word	0x20000114
 8000828:	20000115 	.word	0x20000115
 800082c:	2000051c 	.word	0x2000051c
 8000830:	20000928 	.word	0x20000928

08000834 <uart_write_newline>:

void uart_write_newline(void) {
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	uart_write(newline);
 8000838:	4802      	ldr	r0, [pc, #8]	; (8000844 <uart_write_newline+0x10>)
 800083a:	f7ff ffc9 	bl	80007d0 <uart_write>
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000000 	.word	0x20000000

08000848 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000848:	b580      	push	{r7, lr}
 800084a:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 800084e:	af00      	add	r7, sp, #0
 8000850:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000854:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000858:	6018      	str	r0, [r3, #0]
	char buf[BUF_SIZE];
	if (buf_read(&transmit_buffer, buf))
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	4619      	mov	r1, r3
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <HAL_UART_TxCpltCallback+0x50>)
 8000862:	f7ff fefe 	bl	8000662 <buf_read>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d00d      	beq.n	8000888 <HAL_UART_TxCpltCallback+0x40>
		HAL_UART_Transmit_IT(&huart6, (uint8_t *) &buf, strlen(buf));
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fcbb 	bl	80001ec <strlen>
 8000876:	4603      	mov	r3, r0
 8000878:	b29a      	uxth	r2, r3
 800087a:	f107 0308 	add.w	r3, r7, #8
 800087e:	4619      	mov	r1, r3
 8000880:	4806      	ldr	r0, [pc, #24]	; (800089c <HAL_UART_TxCpltCallback+0x54>)
 8000882:	f001 fef8 	bl	8002676 <HAL_UART_Transmit_IT>
	else transmit_busy = false;
}
 8000886:	e002      	b.n	800088e <HAL_UART_TxCpltCallback+0x46>
	else transmit_busy = false;
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <HAL_UART_TxCpltCallback+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]
}
 800088e:	bf00      	nop
 8000890:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	2000051c 	.word	0x2000051c
 800089c:	20000928 	.word	0x20000928
 80008a0:	20000115 	.word	0x20000115

080008a4 <process_char>:

bool process_char(char *c) {
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	if ('A' <= c[0] && c[0] <= 'Z') {
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b40      	cmp	r3, #64	; 0x40
 80008b2:	d90b      	bls.n	80008cc <process_char+0x28>
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b5a      	cmp	r3, #90	; 0x5a
 80008ba:	d807      	bhi.n	80008cc <process_char+0x28>
		c[0] += ASCII_LATIN_CASE_DIFF;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	3320      	adds	r3, #32
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	701a      	strb	r2, [r3, #0]
		return true;
 80008c8:	2301      	movs	r3, #1
 80008ca:	e021      	b.n	8000910 <process_char+0x6c>
	}
	if ('a' <= c[0] && c[0] <= 'z') {
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b60      	cmp	r3, #96	; 0x60
 80008d2:	d905      	bls.n	80008e0 <process_char+0x3c>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b7a      	cmp	r3, #122	; 0x7a
 80008da:	d801      	bhi.n	80008e0 <process_char+0x3c>
		return true;
 80008dc:	2301      	movs	r3, #1
 80008de:	e017      	b.n	8000910 <process_char+0x6c>
	}
	if (c[0] == ENTER_ASCII && PASS_CHANGE == mode) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b0d      	cmp	r3, #13
 80008e6:	d105      	bne.n	80008f4 <process_char+0x50>
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <process_char+0x78>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d101      	bne.n	80008f4 <process_char+0x50>
		return true;
 80008f0:	2301      	movs	r3, #1
 80008f2:	e00d      	b.n	8000910 <process_char+0x6c>
	}
	if (c[0] == '+' && DEFAULT == mode) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b2b      	cmp	r3, #43	; 0x2b
 80008fa:	d105      	bne.n	8000908 <process_char+0x64>
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <process_char+0x78>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d101      	bne.n	8000908 <process_char+0x64>
		return true;
 8000904:	2301      	movs	r3, #1
 8000906:	e003      	b.n	8000910 <process_char+0x6c>
	}
	c[0] = '\0';
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2200      	movs	r2, #0
 800090c:	701a      	strb	r2, [r3, #0]
	return false;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	20000922 	.word	0x20000922

08000920 <uart_read_char>:

void uart_read_char(void) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
	if (interruptions_enabled) {
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <uart_read_char+0x64>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d00c      	beq.n	8000948 <uart_read_char+0x28>
		if (receive_busy) return;
 800092e:	4b16      	ldr	r3, [pc, #88]	; (8000988 <uart_read_char+0x68>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d121      	bne.n	800097a <uart_read_char+0x5a>
		receive_busy = true;
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <uart_read_char+0x68>)
 8000938:	2201      	movs	r2, #1
 800093a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart6, (uint8_t *) buf_char, sizeof(char));
 800093c:	2201      	movs	r2, #1
 800093e:	4913      	ldr	r1, [pc, #76]	; (800098c <uart_read_char+0x6c>)
 8000940:	4813      	ldr	r0, [pc, #76]	; (8000990 <uart_read_char+0x70>)
 8000942:	f001 fedd 	bl	8002700 <HAL_UART_Receive_IT>
		return;
 8000946:	e019      	b.n	800097c <uart_read_char+0x5c>
	}
	HAL_StatusTypeDef status = HAL_UART_Receive(&huart6, (uint8_t *) buf_char, sizeof(char), 100);
 8000948:	2364      	movs	r3, #100	; 0x64
 800094a:	2201      	movs	r2, #1
 800094c:	490f      	ldr	r1, [pc, #60]	; (800098c <uart_read_char+0x6c>)
 800094e:	4810      	ldr	r0, [pc, #64]	; (8000990 <uart_read_char+0x70>)
 8000950:	f001 fdef 	bl	8002532 <HAL_UART_Receive>
 8000954:	4603      	mov	r3, r0
 8000956:	71fb      	strb	r3, [r7, #7]
	if (HAL_OK == status && process_char(buf_char)) {
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d10e      	bne.n	800097c <uart_read_char+0x5c>
 800095e:	480b      	ldr	r0, [pc, #44]	; (800098c <uart_read_char+0x6c>)
 8000960:	f7ff ffa0 	bl	80008a4 <process_char>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d008      	beq.n	800097c <uart_read_char+0x5c>
		uart_write(buf_char);
 800096a:	4808      	ldr	r0, [pc, #32]	; (800098c <uart_read_char+0x6c>)
 800096c:	f7ff ff30 	bl	80007d0 <uart_write>
		buf_write(&receive_buffer, buf_char);
 8000970:	4906      	ldr	r1, [pc, #24]	; (800098c <uart_read_char+0x6c>)
 8000972:	4808      	ldr	r0, [pc, #32]	; (8000994 <uart_read_char+0x74>)
 8000974:	f7ff fe1e 	bl	80005b4 <buf_write>
 8000978:	e000      	b.n	800097c <uart_read_char+0x5c>
		if (receive_busy) return;
 800097a:	bf00      	nop
	}
}
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000114 	.word	0x20000114
 8000988:	20000116 	.word	0x20000116
 800098c:	20000920 	.word	0x20000920
 8000990:	20000928 	.word	0x20000928
 8000994:	20000118 	.word	0x20000118

08000998 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	receive_busy = false;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <HAL_UART_RxCpltCallback+0x30>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
	if (process_char(buf_char)) {
 80009a6:	4809      	ldr	r0, [pc, #36]	; (80009cc <HAL_UART_RxCpltCallback+0x34>)
 80009a8:	f7ff ff7c 	bl	80008a4 <process_char>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d006      	beq.n	80009c0 <HAL_UART_RxCpltCallback+0x28>
		buf_write(&receive_buffer, buf_char);
 80009b2:	4906      	ldr	r1, [pc, #24]	; (80009cc <HAL_UART_RxCpltCallback+0x34>)
 80009b4:	4806      	ldr	r0, [pc, #24]	; (80009d0 <HAL_UART_RxCpltCallback+0x38>)
 80009b6:	f7ff fdfd 	bl	80005b4 <buf_write>
		uart_write(buf_char);
 80009ba:	4804      	ldr	r0, [pc, #16]	; (80009cc <HAL_UART_RxCpltCallback+0x34>)
 80009bc:	f7ff ff08 	bl	80007d0 <uart_write>
	}
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000116 	.word	0x20000116
 80009cc:	20000920 	.word	0x20000920
 80009d0:	20000118 	.word	0x20000118

080009d4 <update_button_state>:

bool update_button_state(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	if (button_state.is_pressed) {
 80009d8:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <update_button_state+0x70>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d01e      	beq.n	8000a1e <update_button_state+0x4a>
		button_state.is_pressed = read_button() == GPIO_PIN_RESET;
 80009e0:	f7ff fe9c 	bl	800071c <read_button>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	bf0c      	ite	eq
 80009ea:	2301      	moveq	r3, #1
 80009ec:	2300      	movne	r3, #0
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <update_button_state+0x70>)
 80009f2:	701a      	strb	r2, [r3, #0]
		if (button_state.signaled) return false;
 80009f4:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <update_button_state+0x70>)
 80009f6:	785b      	ldrb	r3, [r3, #1]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <update_button_state+0x2c>
 80009fc:	2300      	movs	r3, #0
 80009fe:	e01f      	b.n	8000a40 <update_button_state+0x6c>
		if ((HAL_GetTick() - button_state.press_start_time) > 20) {
 8000a00:	f000 fc20 	bl	8001244 <HAL_GetTick>
 8000a04:	4602      	mov	r2, r0
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <update_button_state+0x70>)
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	2b14      	cmp	r3, #20
 8000a0e:	d904      	bls.n	8000a1a <update_button_state+0x46>
			button_state.signaled = true;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <update_button_state+0x70>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	705a      	strb	r2, [r3, #1]
			return true;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e012      	b.n	8000a40 <update_button_state+0x6c>
		}
		return false;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e010      	b.n	8000a40 <update_button_state+0x6c>
	}
	if (read_button() == GPIO_PIN_RESET) {
 8000a1e:	f7ff fe7d 	bl	800071c <read_button>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d10a      	bne.n	8000a3e <update_button_state+0x6a>
		button_state.press_start_time = HAL_GetTick();
 8000a28:	f000 fc0c 	bl	8001244 <HAL_GetTick>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <update_button_state+0x70>)
 8000a30:	6053      	str	r3, [r2, #4]
		button_state.is_pressed = true;
 8000a32:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <update_button_state+0x70>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	701a      	strb	r2, [r3, #0]
		button_state.signaled = false;
 8000a38:	4b02      	ldr	r3, [pc, #8]	; (8000a44 <update_button_state+0x70>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	705a      	strb	r2, [r3, #1]
	}
	return false;
 8000a3e:	2300      	movs	r3, #0
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	2000010c 	.word	0x2000010c

08000a48 <set_mode>:

void set_mode(InputMode new_mode) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
	uart_write_newline();
 8000a52:	f7ff feef 	bl	8000834 <uart_write_newline>
	mode = new_mode;
 8000a56:	4a0f      	ldr	r2, [pc, #60]	; (8000a94 <set_mode+0x4c>)
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	7013      	strb	r3, [r2, #0]
	switch (mode) {
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <set_mode+0x4c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d002      	beq.n	8000a6a <set_mode+0x22>
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d004      	beq.n	8000a72 <set_mode+0x2a>
			  break;
		  }
		  uart_write(confirmation_message);
		  break;
	  default:
		  break;
 8000a68:	e00f      	b.n	8000a8a <set_mode+0x42>
			code_ptr = 0;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <set_mode+0x50>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	701a      	strb	r2, [r3, #0]
			break;
 8000a70:	e00b      	b.n	8000a8a <set_mode+0x42>
		  if (new_code_ptr == 0) {
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <set_mode+0x54>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d103      	bne.n	8000a82 <set_mode+0x3a>
			  set_mode(DEFAULT);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff ffe4 	bl	8000a48 <set_mode>
			  break;
 8000a80:	e003      	b.n	8000a8a <set_mode+0x42>
		  uart_write(confirmation_message);
 8000a82:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <set_mode+0x58>)
 8000a84:	f7ff fea4 	bl	80007d0 <uart_write>
		  break;
 8000a88:	bf00      	nop
	}
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000922 	.word	0x20000922
 8000a98:	200000f4 	.word	0x200000f4
 8000a9c:	20000100 	.word	0x20000100
 8000aa0:	20000004 	.word	0x20000004

08000aa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08c      	sub	sp, #48	; 0x30
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000aaa:	f003 f873 	bl	8003b94 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aae:	f000 fb63 	bl	8001178 <HAL_Init>

  /* USER CODE BEGIN Init */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab2:	f107 0318 	add.w	r3, r7, #24
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4ba8      	ldr	r3, [pc, #672]	; (8000d68 <main+0x2c4>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4aa7      	ldr	r2, [pc, #668]	; (8000d68 <main+0x2c4>)
 8000acc:	f043 0304 	orr.w	r3, r3, #4
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4ba5      	ldr	r3, [pc, #660]	; (8000d68 <main+0x2c4>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4ba1      	ldr	r3, [pc, #644]	; (8000d68 <main+0x2c4>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4aa0      	ldr	r2, [pc, #640]	; (8000d68 <main+0x2c4>)
 8000ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b9e      	ldr	r3, [pc, #632]	; (8000d68 <main+0x2c4>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	4b9a      	ldr	r3, [pc, #616]	; (8000d68 <main+0x2c4>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a99      	ldr	r2, [pc, #612]	; (8000d68 <main+0x2c4>)
 8000b04:	f043 0308 	orr.w	r3, r3, #8
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b97      	ldr	r3, [pc, #604]	; (8000d68 <main+0x2c4>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0308 	and.w	r3, r3, #8
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	4b93      	ldr	r3, [pc, #588]	; (8000d68 <main+0x2c4>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a92      	ldr	r2, [pc, #584]	; (8000d68 <main+0x2c4>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b90      	ldr	r3, [pc, #576]	; (8000d68 <main+0x2c4>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	4b8c      	ldr	r3, [pc, #560]	; (8000d68 <main+0x2c4>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a8b      	ldr	r2, [pc, #556]	; (8000d68 <main+0x2c4>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b89      	ldr	r3, [pc, #548]	; (8000d68 <main+0x2c4>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000b54:	4885      	ldr	r0, [pc, #532]	; (8000d6c <main+0x2c8>)
 8000b56:	f000 ff4b 	bl	80019f0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b5e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b68:	f107 0318 	add.w	r3, r7, #24
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4880      	ldr	r0, [pc, #512]	; (8000d70 <main+0x2cc>)
 8000b70:	f000 fd7a 	bl	8001668 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD13 PD14 PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b74:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b78:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b86:	f107 0318 	add.w	r3, r7, #24
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4877      	ldr	r0, [pc, #476]	; (8000d6c <main+0x2c8>)
 8000b8e:	f000 fd6b 	bl	8001668 <HAL_GPIO_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b92:	f000 f933 	bl	8000dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b96:	f7ff fcb3 	bl	8000500 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000b9a:	f000 fa49 	bl	8001030 <MX_USART6_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  disable_interruptions();
 8000b9e:	f7ff fdd5 	bl	800074c <disable_interruptions>
  uart_write(interruptions_off_message);
 8000ba2:	4874      	ldr	r0, [pc, #464]	; (8000d74 <main+0x2d0>)
 8000ba4:	f7ff fe14 	bl	80007d0 <uart_write>
  uart_write_newline();
 8000ba8:	f7ff fe44 	bl	8000834 <uart_write_newline>

  buf_init(&receive_buffer);
 8000bac:	4872      	ldr	r0, [pc, #456]	; (8000d78 <main+0x2d4>)
 8000bae:	f7ff fceb 	bl	8000588 <buf_init>
  buf_init(&transmit_buffer);
 8000bb2:	4872      	ldr	r0, [pc, #456]	; (8000d7c <main+0x2d8>)
 8000bb4:	f7ff fce8 	bl	8000588 <buf_init>

  char tmp[2];
  while (1)
  {
	  if (update_button_state()) {
 8000bb8:	f7ff ff0c 	bl	80009d4 <update_button_state>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d012      	beq.n	8000be8 <main+0x144>
		  if (interruptions_enabled) {
 8000bc2:	4b6f      	ldr	r3, [pc, #444]	; (8000d80 <main+0x2dc>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d007      	beq.n	8000bda <main+0x136>
			  disable_interruptions();
 8000bca:	f7ff fdbf 	bl	800074c <disable_interruptions>
			  uart_write(interruptions_off_message);
 8000bce:	4869      	ldr	r0, [pc, #420]	; (8000d74 <main+0x2d0>)
 8000bd0:	f7ff fdfe 	bl	80007d0 <uart_write>
			  uart_write_newline();
 8000bd4:	f7ff fe2e 	bl	8000834 <uart_write_newline>
 8000bd8:	e006      	b.n	8000be8 <main+0x144>
		  } else {
			  enable_interruptions();
 8000bda:	f7ff fdab 	bl	8000734 <enable_interruptions>
			  uart_write(interruptions_on_message);
 8000bde:	4869      	ldr	r0, [pc, #420]	; (8000d84 <main+0x2e0>)
 8000be0:	f7ff fdf6 	bl	80007d0 <uart_write>
			  uart_write_newline();
 8000be4:	f7ff fe26 	bl	8000834 <uart_write_newline>
		  }
	  }

	  if (DEFAULT == mode && code_ptr != 0 && HAL_GetTick() - last_input_time >= RESET_ALL_TIMEOUT_MS) {
 8000be8:	4b67      	ldr	r3, [pc, #412]	; (8000d88 <main+0x2e4>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d121      	bne.n	8000c34 <main+0x190>
 8000bf0:	4b66      	ldr	r3, [pc, #408]	; (8000d8c <main+0x2e8>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d01d      	beq.n	8000c34 <main+0x190>
 8000bf8:	f000 fb24 	bl	8001244 <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	4b64      	ldr	r3, [pc, #400]	; (8000d90 <main+0x2ec>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	f240 52db 	movw	r2, #1499	; 0x5db
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d913      	bls.n	8000c34 <main+0x190>
		  code_ptr = 0;
 8000c0c:	4b5f      	ldr	r3, [pc, #380]	; (8000d8c <main+0x2e8>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]
		  failed_attempts_cnt = 0;
 8000c12:	4b60      	ldr	r3, [pc, #384]	; (8000d94 <main+0x2f0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
		  uart_write_newline();
 8000c18:	f7ff fe0c 	bl	8000834 <uart_write_newline>
		  light_led(RED_LED_PIN | GREEN_LED_PIN, 5, 25);
 8000c1c:	2219      	movs	r2, #25
 8000c1e:	2105      	movs	r1, #5
 8000c20:	f44f 4020 	mov.w	r0, #40960	; 0xa000
 8000c24:	f7ff fdaa 	bl	800077c <light_led>
		  last_input_time = HAL_GetTick();
 8000c28:	f000 fb0c 	bl	8001244 <HAL_GetTick>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	4a58      	ldr	r2, [pc, #352]	; (8000d90 <main+0x2ec>)
 8000c30:	6013      	str	r3, [r2, #0]
		  continue;
 8000c32:	e0da      	b.n	8000dea <main+0x346>
	  }

	  uart_read_char();
 8000c34:	f7ff fe74 	bl	8000920 <uart_read_char>

	  if (!buf_read(&receive_buffer, tmp))
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	484e      	ldr	r0, [pc, #312]	; (8000d78 <main+0x2d4>)
 8000c40:	f7ff fd0f 	bl	8000662 <buf_read>
 8000c44:	4603      	mov	r3, r0
 8000c46:	f083 0301 	eor.w	r3, r3, #1
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	f040 80c7 	bne.w	8000de0 <main+0x33c>
		  continue;

	  last_input_time = HAL_GetTick();
 8000c52:	f000 faf7 	bl	8001244 <HAL_GetTick>
 8000c56:	4603      	mov	r3, r0
 8000c58:	4a4d      	ldr	r2, [pc, #308]	; (8000d90 <main+0x2ec>)
 8000c5a:	6013      	str	r3, [r2, #0]
	  cur_char = tmp[0];
 8000c5c:	7d3a      	ldrb	r2, [r7, #20]
 8000c5e:	4b4e      	ldr	r3, [pc, #312]	; (8000d98 <main+0x2f4>)
 8000c60:	701a      	strb	r2, [r3, #0]

	  switch (mode) {
 8000c62:	4b49      	ldr	r3, [pc, #292]	; (8000d88 <main+0x2e4>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d071      	beq.n	8000d4e <main+0x2aa>
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	dca4      	bgt.n	8000bb8 <main+0x114>
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d002      	beq.n	8000c78 <main+0x1d4>
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d050      	beq.n	8000d18 <main+0x274>
 8000c76:	e0b8      	b.n	8000dea <main+0x346>
	  	  case DEFAULT:
	  		  if (cur_char == '+') {
 8000c78:	4b47      	ldr	r3, [pc, #284]	; (8000d98 <main+0x2f4>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b2b      	cmp	r3, #43	; 0x2b
 8000c7e:	d103      	bne.n	8000c88 <main+0x1e4>
	  			  set_mode(PASS_CHANGE);
 8000c80:	2001      	movs	r0, #1
 8000c82:	f7ff fee1 	bl	8000a48 <set_mode>
	  			  continue;
 8000c86:	e0b0      	b.n	8000dea <main+0x346>
	  		  }

	  		  if (code[code_ptr++] == cur_char) {
 8000c88:	4b40      	ldr	r3, [pc, #256]	; (8000d8c <main+0x2e8>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	1c5a      	adds	r2, r3, #1
 8000c8e:	b2d1      	uxtb	r1, r2
 8000c90:	4a3e      	ldr	r2, [pc, #248]	; (8000d8c <main+0x2e8>)
 8000c92:	7011      	strb	r1, [r2, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b41      	ldr	r3, [pc, #260]	; (8000d9c <main+0x2f8>)
 8000c98:	5c9a      	ldrb	r2, [r3, r2]
 8000c9a:	4b3f      	ldr	r3, [pc, #252]	; (8000d98 <main+0x2f4>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d11b      	bne.n	8000cda <main+0x236>
	  			  light_led(YELLOW_LED_PIN, 1, 100);
 8000ca2:	2264      	movs	r2, #100	; 0x64
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000caa:	f7ff fd67 	bl	800077c <light_led>
	  			  if (code_ptr == code_length) {
 8000cae:	4b37      	ldr	r3, [pc, #220]	; (8000d8c <main+0x2e8>)
 8000cb0:	781a      	ldrb	r2, [r3, #0]
 8000cb2:	4b3b      	ldr	r3, [pc, #236]	; (8000da0 <main+0x2fc>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	f040 8094 	bne.w	8000de4 <main+0x340>
	  				  uart_write_newline();
 8000cbc:	f7ff fdba 	bl	8000834 <uart_write_newline>
	  				  light_led(GREEN_LED_PIN, 3, 50);
 8000cc0:	2232      	movs	r2, #50	; 0x32
 8000cc2:	2103      	movs	r1, #3
 8000cc4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cc8:	f7ff fd58 	bl	800077c <light_led>
	  				  code_ptr = 0;
 8000ccc:	4b2f      	ldr	r3, [pc, #188]	; (8000d8c <main+0x2e8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
	  				  failed_attempts_cnt = 0;
 8000cd2:	4b30      	ldr	r3, [pc, #192]	; (8000d94 <main+0x2f0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
				  if (++failed_attempts_cnt == 3) {
					  failed_attempts_cnt = 0;
					  light_led(RED_LED_PIN, 3, 50);
				  }
	  		  }
	  		  continue;
 8000cd8:	e084      	b.n	8000de4 <main+0x340>
	  			  uart_write_newline();
 8000cda:	f7ff fdab 	bl	8000834 <uart_write_newline>
	  			  light_led(RED_LED_PIN, 1, 100);
 8000cde:	2264      	movs	r2, #100	; 0x64
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000ce6:	f7ff fd49 	bl	800077c <light_led>
				  code_ptr = 0;
 8000cea:	4b28      	ldr	r3, [pc, #160]	; (8000d8c <main+0x2e8>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
				  if (++failed_attempts_cnt == 3) {
 8000cf0:	4b28      	ldr	r3, [pc, #160]	; (8000d94 <main+0x2f0>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	4b26      	ldr	r3, [pc, #152]	; (8000d94 <main+0x2f0>)
 8000cfa:	701a      	strb	r2, [r3, #0]
 8000cfc:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <main+0x2f0>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b03      	cmp	r3, #3
 8000d02:	d16f      	bne.n	8000de4 <main+0x340>
					  failed_attempts_cnt = 0;
 8000d04:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <main+0x2f0>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
					  light_led(RED_LED_PIN, 3, 50);
 8000d0a:	2232      	movs	r2, #50	; 0x32
 8000d0c:	2103      	movs	r1, #3
 8000d0e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000d12:	f7ff fd33 	bl	800077c <light_led>
	  		  continue;
 8000d16:	e065      	b.n	8000de4 <main+0x340>

	  	  case PASS_CHANGE:
	  		  if (cur_char == ENTER_ASCII) {
 8000d18:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <main+0x2f4>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b0d      	cmp	r3, #13
 8000d1e:	d103      	bne.n	8000d28 <main+0x284>
	  			  set_mode(CONFIRMATION);
 8000d20:	2002      	movs	r0, #2
 8000d22:	f7ff fe91 	bl	8000a48 <set_mode>
	  			  continue;
 8000d26:	e060      	b.n	8000dea <main+0x346>
	  		  }

	  		  new_code[new_code_ptr++] = cur_char;
 8000d28:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <main+0x300>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	1c5a      	adds	r2, r3, #1
 8000d2e:	b2d1      	uxtb	r1, r2
 8000d30:	4a1c      	ldr	r2, [pc, #112]	; (8000da4 <main+0x300>)
 8000d32:	7011      	strb	r1, [r2, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <main+0x2f4>)
 8000d38:	7819      	ldrb	r1, [r3, #0]
 8000d3a:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <main+0x304>)
 8000d3c:	5499      	strb	r1, [r3, r2]
	  		  if (new_code_ptr == 8) set_mode(CONFIRMATION);
 8000d3e:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <main+0x300>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b08      	cmp	r3, #8
 8000d44:	d150      	bne.n	8000de8 <main+0x344>
 8000d46:	2002      	movs	r0, #2
 8000d48:	f7ff fe7e 	bl	8000a48 <set_mode>
	  		  continue;
 8000d4c:	e04c      	b.n	8000de8 <main+0x344>

	  	  case CONFIRMATION:
	  		  if (cur_char == 'y') {
 8000d4e:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <main+0x2f4>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b79      	cmp	r3, #121	; 0x79
 8000d54:	d13d      	bne.n	8000dd2 <main+0x32e>
	  			  code_length = new_code_ptr;
 8000d56:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <main+0x300>)
 8000d58:	781a      	ldrb	r2, [r3, #0]
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <main+0x2fc>)
 8000d5c:	701a      	strb	r2, [r3, #0]
	  			  for (uint8_t i = 0; i < code_length; i++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000d64:	e02f      	b.n	8000dc6 <main+0x322>
 8000d66:	bf00      	nop
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020c00 	.word	0x40020c00
 8000d70:	40020800 	.word	0x40020800
 8000d74:	20000040 	.word	0x20000040
 8000d78:	20000118 	.word	0x20000118
 8000d7c:	2000051c 	.word	0x2000051c
 8000d80:	20000114 	.word	0x20000114
 8000d84:	2000002c 	.word	0x2000002c
 8000d88:	20000922 	.word	0x20000922
 8000d8c:	200000f4 	.word	0x200000f4
 8000d90:	20000104 	.word	0x20000104
 8000d94:	20000101 	.word	0x20000101
 8000d98:	20000108 	.word	0x20000108
 8000d9c:	20000054 	.word	0x20000054
 8000da0:	2000005c 	.word	0x2000005c
 8000da4:	20000100 	.word	0x20000100
 8000da8:	200000f8 	.word	0x200000f8
	  				  code[i] = new_code[i];
 8000dac:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000db0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000db4:	490d      	ldr	r1, [pc, #52]	; (8000dec <main+0x348>)
 8000db6:	5c89      	ldrb	r1, [r1, r2]
 8000db8:	4a0d      	ldr	r2, [pc, #52]	; (8000df0 <main+0x34c>)
 8000dba:	54d1      	strb	r1, [r2, r3]
	  			  for (uint8_t i = 0; i < code_length; i++)
 8000dbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <main+0x350>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d3ec      	bcc.n	8000dac <main+0x308>
	  		  }
	  		  new_code_ptr = 0;
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <main+0x354>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	701a      	strb	r2, [r3, #0]
	  		  set_mode(DEFAULT);
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f7ff fe35 	bl	8000a48 <set_mode>
	  		  continue;
 8000dde:	e004      	b.n	8000dea <main+0x346>
		  continue;
 8000de0:	bf00      	nop
 8000de2:	e6e9      	b.n	8000bb8 <main+0x114>
	  		  continue;
 8000de4:	bf00      	nop
 8000de6:	e6e7      	b.n	8000bb8 <main+0x114>
	  		  continue;
 8000de8:	bf00      	nop
	  if (update_button_state()) {
 8000dea:	e6e5      	b.n	8000bb8 <main+0x114>
 8000dec:	200000f8 	.word	0x200000f8
 8000df0:	20000054 	.word	0x20000054
 8000df4:	2000005c 	.word	0x2000005c
 8000df8:	20000100 	.word	0x20000100

08000dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b094      	sub	sp, #80	; 0x50
 8000e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e02:	f107 0320 	add.w	r3, r7, #32
 8000e06:	2230      	movs	r2, #48	; 0x30
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f003 f845 	bl	8003e9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e20:	2300      	movs	r3, #0
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	4b2b      	ldr	r3, [pc, #172]	; (8000ed4 <SystemClock_Config+0xd8>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	4a2a      	ldr	r2, [pc, #168]	; (8000ed4 <SystemClock_Config+0xd8>)
 8000e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e30:	4b28      	ldr	r3, [pc, #160]	; (8000ed4 <SystemClock_Config+0xd8>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	4b25      	ldr	r3, [pc, #148]	; (8000ed8 <SystemClock_Config+0xdc>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a24      	ldr	r2, [pc, #144]	; (8000ed8 <SystemClock_Config+0xdc>)
 8000e46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e4a:	6013      	str	r3, [r2, #0]
 8000e4c:	4b22      	ldr	r3, [pc, #136]	; (8000ed8 <SystemClock_Config+0xdc>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e62:	2302      	movs	r3, #2
 8000e64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000e6c:	230f      	movs	r3, #15
 8000e6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000e70:	23d8      	movs	r3, #216	; 0xd8
 8000e72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e74:	2302      	movs	r3, #2
 8000e76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e78:	2304      	movs	r3, #4
 8000e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e7c:	f107 0320 	add.w	r3, r7, #32
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 fe1f 	bl	8001ac4 <HAL_RCC_OscConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e8c:	f000 f826 	bl	8000edc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e90:	f000 fdc8 	bl	8001a24 <HAL_PWREx_EnableOverDrive>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000e9a:	f000 f81f 	bl	8000edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9e:	230f      	movs	r3, #15
 8000ea0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eaa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000eb6:	f107 030c 	add.w	r3, r7, #12
 8000eba:	2105      	movs	r1, #5
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f001 f879 	bl	8001fb4 <HAL_RCC_ClockConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000ec8:	f000 f808 	bl	8000edc <Error_Handler>
  }
}
 8000ecc:	bf00      	nop
 8000ece:	3750      	adds	r7, #80	; 0x50
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40007000 	.word	0x40007000

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <Error_Handler+0x8>
	...

08000ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <HAL_MspInit+0x4c>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	4a0f      	ldr	r2, [pc, #60]	; (8000f34 <HAL_MspInit+0x4c>)
 8000ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000efc:	6453      	str	r3, [r2, #68]	; 0x44
 8000efe:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <HAL_MspInit+0x4c>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	603b      	str	r3, [r7, #0]
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <HAL_MspInit+0x4c>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	4a08      	ldr	r2, [pc, #32]	; (8000f34 <HAL_MspInit+0x4c>)
 8000f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f18:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_MspInit+0x4c>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800

08000f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <NMI_Handler+0x4>

08000f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <HardFault_Handler+0x4>

08000f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <MemManage_Handler+0x4>

08000f4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <BusFault_Handler+0x4>

08000f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <UsageFault_Handler+0x4>

08000f56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f84:	f000 f94a 	bl	800121c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <USART6_IRQHandler+0x10>)
 8000f92:	f001 fc89 	bl	80028a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000928 	.word	0x20000928

08000fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa8:	4a14      	ldr	r2, [pc, #80]	; (8000ffc <_sbrk+0x5c>)
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <_sbrk+0x60>)
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d102      	bne.n	8000fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <_sbrk+0x64>)
 8000fbe:	4a12      	ldr	r2, [pc, #72]	; (8001008 <_sbrk+0x68>)
 8000fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d207      	bcs.n	8000fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd0:	f002 fe40 	bl	8003c54 <__errno>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fde:	e009      	b.n	8000ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <_sbrk+0x64>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	4a05      	ldr	r2, [pc, #20]	; (8001004 <_sbrk+0x64>)
 8000ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20030000 	.word	0x20030000
 8001000:	00000400 	.word	0x00000400
 8001004:	20000924 	.word	0x20000924
 8001008:	20000a30 	.word	0x20000a30

0800100c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <SystemInit+0x20>)
 8001012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <SystemInit+0x20>)
 8001018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800101c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_USART6_UART_Init+0x4c>)
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <MX_USART6_UART_Init+0x50>)
 8001038:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <MX_USART6_UART_Init+0x4c>)
 800103c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001040:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <MX_USART6_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <MX_USART6_UART_Init+0x4c>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <MX_USART6_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <MX_USART6_UART_Init+0x4c>)
 8001056:	220c      	movs	r2, #12
 8001058:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <MX_USART6_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <MX_USART6_UART_Init+0x4c>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_USART6_UART_Init+0x4c>)
 8001068:	f001 f984 	bl	8002374 <HAL_UART_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001072:	f7ff ff33 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000928 	.word	0x20000928
 8001080:	40011400 	.word	0x40011400

08001084 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a1d      	ldr	r2, [pc, #116]	; (8001118 <HAL_UART_MspInit+0x94>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d133      	bne.n	800110e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	4b1c      	ldr	r3, [pc, #112]	; (800111c <HAL_UART_MspInit+0x98>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	4a1b      	ldr	r2, [pc, #108]	; (800111c <HAL_UART_MspInit+0x98>)
 80010b0:	f043 0320 	orr.w	r3, r3, #32
 80010b4:	6453      	str	r3, [r2, #68]	; 0x44
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <HAL_UART_MspInit+0x98>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	f003 0320 	and.w	r3, r3, #32
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <HAL_UART_MspInit+0x98>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a14      	ldr	r2, [pc, #80]	; (800111c <HAL_UART_MspInit+0x98>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_UART_MspInit+0x98>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010de:	23c0      	movs	r3, #192	; 0xc0
 80010e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ea:	2303      	movs	r3, #3
 80010ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80010ee:	2308      	movs	r3, #8
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	4809      	ldr	r0, [pc, #36]	; (8001120 <HAL_UART_MspInit+0x9c>)
 80010fa:	f000 fab5 	bl	8001668 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	2047      	movs	r0, #71	; 0x47
 8001104:	f000 f9cd 	bl	80014a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001108:	2047      	movs	r0, #71	; 0x47
 800110a:	f000 f9e6 	bl	80014da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	; 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40011400 	.word	0x40011400
 800111c:	40023800 	.word	0x40023800
 8001120:	40020800 	.word	0x40020800

08001124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800115c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001128:	480d      	ldr	r0, [pc, #52]	; (8001160 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800112a:	490e      	ldr	r1, [pc, #56]	; (8001164 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800112c:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001130:	e002      	b.n	8001138 <LoopCopyDataInit>

08001132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001136:	3304      	adds	r3, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800113c:	d3f9      	bcc.n	8001132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113e:	4a0b      	ldr	r2, [pc, #44]	; (800116c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001140:	4c0b      	ldr	r4, [pc, #44]	; (8001170 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001144:	e001      	b.n	800114a <LoopFillZerobss>

08001146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001148:	3204      	adds	r2, #4

0800114a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800114c:	d3fb      	bcc.n	8001146 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800114e:	f7ff ff5d 	bl	800100c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001152:	f002 fe7b 	bl	8003e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001156:	f7ff fca5 	bl	8000aa4 <main>
  bx  lr    
 800115a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800115c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001164:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8001168:	0800440c 	.word	0x0800440c
  ldr r2, =_sbss
 800116c:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8001170:	20000a2c 	.word	0x20000a2c

08001174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC_IRQHandler>
	...

08001178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800117c:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <HAL_Init+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0d      	ldr	r2, [pc, #52]	; (80011b8 <HAL_Init+0x40>)
 8001182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001186:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <HAL_Init+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <HAL_Init+0x40>)
 800118e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001192:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HAL_Init+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <HAL_Init+0x40>)
 800119a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a0:	2003      	movs	r0, #3
 80011a2:	f000 f973 	bl	800148c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a6:	200f      	movs	r0, #15
 80011a8:	f000 f808 	bl	80011bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ac:	f7ff fe9c 	bl	8000ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023c00 	.word	0x40023c00

080011bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_InitTick+0x54>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_InitTick+0x58>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f999 	bl	8001512 <HAL_SYSTICK_Config>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e00e      	b.n	8001208 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b0f      	cmp	r3, #15
 80011ee:	d80a      	bhi.n	8001206 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f0:	2200      	movs	r2, #0
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011f8:	f000 f953 	bl	80014a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011fc:	4a06      	ldr	r2, [pc, #24]	; (8001218 <HAL_InitTick+0x5c>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001202:	2300      	movs	r3, #0
 8001204:	e000      	b.n	8001208 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000060 	.word	0x20000060
 8001214:	20000068 	.word	0x20000068
 8001218:	20000064 	.word	0x20000064

0800121c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_IncTick+0x20>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_IncTick+0x24>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4413      	add	r3, r2
 800122c:	4a04      	ldr	r2, [pc, #16]	; (8001240 <HAL_IncTick+0x24>)
 800122e:	6013      	str	r3, [r2, #0]
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000068 	.word	0x20000068
 8001240:	2000096c 	.word	0x2000096c

08001244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return uwTick;
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <HAL_GetTick+0x14>)
 800124a:	681b      	ldr	r3, [r3, #0]
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	2000096c 	.word	0x2000096c

0800125c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001264:	f7ff ffee 	bl	8001244 <HAL_GetTick>
 8001268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001274:	d005      	beq.n	8001282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <HAL_Delay+0x44>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4413      	add	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001282:	bf00      	nop
 8001284:	f7ff ffde 	bl	8001244 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	429a      	cmp	r2, r3
 8001292:	d8f7      	bhi.n	8001284 <HAL_Delay+0x28>
  {
  }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000068 	.word	0x20000068

080012a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c0:	4013      	ands	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d6:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	60d3      	str	r3, [r2, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <__NVIC_GetPriorityGrouping+0x18>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	f003 0307 	and.w	r3, r3, #7
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	2b00      	cmp	r3, #0
 8001318:	db0b      	blt.n	8001332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	f003 021f 	and.w	r2, r3, #31
 8001320:	4907      	ldr	r1, [pc, #28]	; (8001340 <__NVIC_EnableIRQ+0x38>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	095b      	lsrs	r3, r3, #5
 8001328:	2001      	movs	r0, #1
 800132a:	fa00 f202 	lsl.w	r2, r0, r2
 800132e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000e100 	.word	0xe000e100

08001344 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	2b00      	cmp	r3, #0
 8001354:	db12      	blt.n	800137c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	f003 021f 	and.w	r2, r3, #31
 800135c:	490a      	ldr	r1, [pc, #40]	; (8001388 <__NVIC_DisableIRQ+0x44>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	095b      	lsrs	r3, r3, #5
 8001364:	2001      	movs	r0, #1
 8001366:	fa00 f202 	lsl.w	r2, r0, r2
 800136a:	3320      	adds	r3, #32
 800136c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001370:	f3bf 8f4f 	dsb	sy
}
 8001374:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001376:	f3bf 8f6f 	isb	sy
}
 800137a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000e100 	.word	0xe000e100

0800138c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139c:	2b00      	cmp	r3, #0
 800139e:	db0a      	blt.n	80013b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	490c      	ldr	r1, [pc, #48]	; (80013d8 <__NVIC_SetPriority+0x4c>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	0112      	lsls	r2, r2, #4
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	440b      	add	r3, r1
 80013b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b4:	e00a      	b.n	80013cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4908      	ldr	r1, [pc, #32]	; (80013dc <__NVIC_SetPriority+0x50>)
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	3b04      	subs	r3, #4
 80013c4:	0112      	lsls	r2, r2, #4
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	440b      	add	r3, r1
 80013ca:	761a      	strb	r2, [r3, #24]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000e100 	.word	0xe000e100
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b089      	sub	sp, #36	; 0x24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f1c3 0307 	rsb	r3, r3, #7
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	bf28      	it	cs
 80013fe:	2304      	movcs	r3, #4
 8001400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3304      	adds	r3, #4
 8001406:	2b06      	cmp	r3, #6
 8001408:	d902      	bls.n	8001410 <NVIC_EncodePriority+0x30>
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3b03      	subs	r3, #3
 800140e:	e000      	b.n	8001412 <NVIC_EncodePriority+0x32>
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43da      	mvns	r2, r3
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	401a      	ands	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001428:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	43d9      	mvns	r1, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	4313      	orrs	r3, r2
         );
}
 800143a:	4618      	mov	r0, r3
 800143c:	3724      	adds	r7, #36	; 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001458:	d301      	bcc.n	800145e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145a:	2301      	movs	r3, #1
 800145c:	e00f      	b.n	800147e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <SysTick_Config+0x40>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001466:	210f      	movs	r1, #15
 8001468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800146c:	f7ff ff8e 	bl	800138c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <SysTick_Config+0x40>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <SysTick_Config+0x40>)
 8001478:	2207      	movs	r2, #7
 800147a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	e000e010 	.word	0xe000e010

0800148c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ff05 	bl	80012a4 <__NVIC_SetPriorityGrouping>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b4:	f7ff ff1a 	bl	80012ec <__NVIC_GetPriorityGrouping>
 80014b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	6978      	ldr	r0, [r7, #20]
 80014c0:	f7ff ff8e 	bl	80013e0 <NVIC_EncodePriority>
 80014c4:	4602      	mov	r2, r0
 80014c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff5d 	bl	800138c <__NVIC_SetPriority>
}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff0d 	bl	8001308 <__NVIC_EnableIRQ>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff1d 	bl	8001344 <__NVIC_DisableIRQ>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ff94 	bl	8001448 <SysTick_Config>
 8001520:	4603      	mov	r3, r0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001536:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001538:	f7ff fe84 	bl	8001244 <HAL_GetTick>
 800153c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d008      	beq.n	800155c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2280      	movs	r2, #128	; 0x80
 800154e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e052      	b.n	8001602 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 0216 	bic.w	r2, r2, #22
 800156a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	695a      	ldr	r2, [r3, #20]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800157a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	2b00      	cmp	r3, #0
 8001582:	d103      	bne.n	800158c <HAL_DMA_Abort+0x62>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001588:	2b00      	cmp	r3, #0
 800158a:	d007      	beq.n	800159c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0208 	bic.w	r2, r2, #8
 800159a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 0201 	bic.w	r2, r2, #1
 80015aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015ac:	e013      	b.n	80015d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015ae:	f7ff fe49 	bl	8001244 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b05      	cmp	r3, #5
 80015ba:	d90c      	bls.n	80015d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2220      	movs	r2, #32
 80015c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2203      	movs	r2, #3
 80015c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e015      	b.n	8001602 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1e4      	bne.n	80015ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e8:	223f      	movs	r2, #63	; 0x3f
 80015ea:	409a      	lsls	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d004      	beq.n	8001628 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2280      	movs	r2, #128	; 0x80
 8001622:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e00c      	b.n	8001642 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2205      	movs	r2, #5
 800162c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0201 	bic.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001668:	b480      	push	{r7}
 800166a:	b089      	sub	sp, #36	; 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800167a:	2300      	movs	r3, #0
 800167c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
 8001682:	e177      	b.n	8001974 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001684:	2201      	movs	r2, #1
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	429a      	cmp	r2, r3
 800169e:	f040 8166 	bne.w	800196e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d005      	beq.n	80016ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d130      	bne.n	800171c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	2203      	movs	r2, #3
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4013      	ands	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016f0:	2201      	movs	r2, #1
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	091b      	lsrs	r3, r3, #4
 8001706:	f003 0201 	and.w	r2, r3, #1
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	2b03      	cmp	r3, #3
 8001726:	d017      	beq.n	8001758 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	2203      	movs	r2, #3
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 0303 	and.w	r3, r3, #3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d123      	bne.n	80017ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	08da      	lsrs	r2, r3, #3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3208      	adds	r2, #8
 800176c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001770:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	f003 0307 	and.w	r3, r3, #7
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	220f      	movs	r2, #15
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	691a      	ldr	r2, [r3, #16]
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	08da      	lsrs	r2, r3, #3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3208      	adds	r2, #8
 80017a6:	69b9      	ldr	r1, [r7, #24]
 80017a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	2203      	movs	r2, #3
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 0203 	and.w	r2, r3, #3
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 80c0 	beq.w	800196e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b66      	ldr	r3, [pc, #408]	; (800198c <HAL_GPIO_Init+0x324>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	4a65      	ldr	r2, [pc, #404]	; (800198c <HAL_GPIO_Init+0x324>)
 80017f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017fc:	6453      	str	r3, [r2, #68]	; 0x44
 80017fe:	4b63      	ldr	r3, [pc, #396]	; (800198c <HAL_GPIO_Init+0x324>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800180a:	4a61      	ldr	r2, [pc, #388]	; (8001990 <HAL_GPIO_Init+0x328>)
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	089b      	lsrs	r3, r3, #2
 8001810:	3302      	adds	r3, #2
 8001812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	220f      	movs	r2, #15
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a58      	ldr	r2, [pc, #352]	; (8001994 <HAL_GPIO_Init+0x32c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d037      	beq.n	80018a6 <HAL_GPIO_Init+0x23e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a57      	ldr	r2, [pc, #348]	; (8001998 <HAL_GPIO_Init+0x330>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d031      	beq.n	80018a2 <HAL_GPIO_Init+0x23a>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a56      	ldr	r2, [pc, #344]	; (800199c <HAL_GPIO_Init+0x334>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d02b      	beq.n	800189e <HAL_GPIO_Init+0x236>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a55      	ldr	r2, [pc, #340]	; (80019a0 <HAL_GPIO_Init+0x338>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d025      	beq.n	800189a <HAL_GPIO_Init+0x232>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a54      	ldr	r2, [pc, #336]	; (80019a4 <HAL_GPIO_Init+0x33c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d01f      	beq.n	8001896 <HAL_GPIO_Init+0x22e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a53      	ldr	r2, [pc, #332]	; (80019a8 <HAL_GPIO_Init+0x340>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d019      	beq.n	8001892 <HAL_GPIO_Init+0x22a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a52      	ldr	r2, [pc, #328]	; (80019ac <HAL_GPIO_Init+0x344>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d013      	beq.n	800188e <HAL_GPIO_Init+0x226>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a51      	ldr	r2, [pc, #324]	; (80019b0 <HAL_GPIO_Init+0x348>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d00d      	beq.n	800188a <HAL_GPIO_Init+0x222>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a50      	ldr	r2, [pc, #320]	; (80019b4 <HAL_GPIO_Init+0x34c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d007      	beq.n	8001886 <HAL_GPIO_Init+0x21e>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a4f      	ldr	r2, [pc, #316]	; (80019b8 <HAL_GPIO_Init+0x350>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d101      	bne.n	8001882 <HAL_GPIO_Init+0x21a>
 800187e:	2309      	movs	r3, #9
 8001880:	e012      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 8001882:	230a      	movs	r3, #10
 8001884:	e010      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 8001886:	2308      	movs	r3, #8
 8001888:	e00e      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 800188a:	2307      	movs	r3, #7
 800188c:	e00c      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 800188e:	2306      	movs	r3, #6
 8001890:	e00a      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 8001892:	2305      	movs	r3, #5
 8001894:	e008      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 8001896:	2304      	movs	r3, #4
 8001898:	e006      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 800189a:	2303      	movs	r3, #3
 800189c:	e004      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 800189e:	2302      	movs	r3, #2
 80018a0:	e002      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 80018a6:	2300      	movs	r3, #0
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	f002 0203 	and.w	r2, r2, #3
 80018ae:	0092      	lsls	r2, r2, #2
 80018b0:	4093      	lsls	r3, r2
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018b8:	4935      	ldr	r1, [pc, #212]	; (8001990 <HAL_GPIO_Init+0x328>)
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	089b      	lsrs	r3, r3, #2
 80018be:	3302      	adds	r3, #2
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018c6:	4b3d      	ldr	r3, [pc, #244]	; (80019bc <HAL_GPIO_Init+0x354>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	43db      	mvns	r3, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4013      	ands	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018ea:	4a34      	ldr	r2, [pc, #208]	; (80019bc <HAL_GPIO_Init+0x354>)
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018f0:	4b32      	ldr	r3, [pc, #200]	; (80019bc <HAL_GPIO_Init+0x354>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001914:	4a29      	ldr	r2, [pc, #164]	; (80019bc <HAL_GPIO_Init+0x354>)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800191a:	4b28      	ldr	r3, [pc, #160]	; (80019bc <HAL_GPIO_Init+0x354>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	43db      	mvns	r3, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4013      	ands	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800193e:	4a1f      	ldr	r2, [pc, #124]	; (80019bc <HAL_GPIO_Init+0x354>)
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001944:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <HAL_GPIO_Init+0x354>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001968:	4a14      	ldr	r2, [pc, #80]	; (80019bc <HAL_GPIO_Init+0x354>)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3301      	adds	r3, #1
 8001972:	61fb      	str	r3, [r7, #28]
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	2b0f      	cmp	r3, #15
 8001978:	f67f ae84 	bls.w	8001684 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	3724      	adds	r7, #36	; 0x24
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800
 8001990:	40013800 	.word	0x40013800
 8001994:	40020000 	.word	0x40020000
 8001998:	40020400 	.word	0x40020400
 800199c:	40020800 	.word	0x40020800
 80019a0:	40020c00 	.word	0x40020c00
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40021400 	.word	0x40021400
 80019ac:	40021800 	.word	0x40021800
 80019b0:	40021c00 	.word	0x40021c00
 80019b4:	40022000 	.word	0x40022000
 80019b8:	40022400 	.word	0x40022400
 80019bc:	40013c00 	.word	0x40013c00

080019c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	887b      	ldrh	r3, [r7, #2]
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d002      	beq.n	80019de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019d8:	2301      	movs	r3, #1
 80019da:	73fb      	strb	r3, [r7, #15]
 80019dc:	e001      	b.n	80019e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	807b      	strh	r3, [r7, #2]
 80019fc:	4613      	mov	r3, r2
 80019fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a00:	787b      	ldrb	r3, [r7, #1]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a06:	887a      	ldrh	r2, [r7, #2]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a0c:	e003      	b.n	8001a16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a0e:	887b      	ldrh	r3, [r7, #2]
 8001a10:	041a      	lsls	r2, r3, #16
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	619a      	str	r2, [r3, #24]
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	603b      	str	r3, [r7, #0]
 8001a32:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	4a1f      	ldr	r2, [pc, #124]	; (8001ab4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3e:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <HAL_PWREx_EnableOverDrive+0x94>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a50:	f7ff fbf8 	bl	8001244 <HAL_GetTick>
 8001a54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a56:	e009      	b.n	8001a6c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a58:	f7ff fbf4 	bl	8001244 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a66:	d901      	bls.n	8001a6c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e01f      	b.n	8001aac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a6c:	4b13      	ldr	r3, [pc, #76]	; (8001abc <HAL_PWREx_EnableOverDrive+0x98>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a78:	d1ee      	bne.n	8001a58 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a80:	f7ff fbe0 	bl	8001244 <HAL_GetTick>
 8001a84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a86:	e009      	b.n	8001a9c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a88:	f7ff fbdc 	bl	8001244 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a96:	d901      	bls.n	8001a9c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e007      	b.n	8001aac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a9c:	4b07      	ldr	r3, [pc, #28]	; (8001abc <HAL_PWREx_EnableOverDrive+0x98>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001aa8:	d1ee      	bne.n	8001a88 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	420e0040 	.word	0x420e0040
 8001abc:	40007000 	.word	0x40007000
 8001ac0:	420e0044 	.word	0x420e0044

08001ac4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e267      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d075      	beq.n	8001bce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ae2:	4b88      	ldr	r3, [pc, #544]	; (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	d00c      	beq.n	8001b08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aee:	4b85      	ldr	r3, [pc, #532]	; (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d112      	bne.n	8001b20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001afa:	4b82      	ldr	r3, [pc, #520]	; (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b06:	d10b      	bne.n	8001b20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b08:	4b7e      	ldr	r3, [pc, #504]	; (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d05b      	beq.n	8001bcc <HAL_RCC_OscConfig+0x108>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d157      	bne.n	8001bcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e242      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b28:	d106      	bne.n	8001b38 <HAL_RCC_OscConfig+0x74>
 8001b2a:	4b76      	ldr	r3, [pc, #472]	; (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a75      	ldr	r2, [pc, #468]	; (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	e01d      	b.n	8001b74 <HAL_RCC_OscConfig+0xb0>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b40:	d10c      	bne.n	8001b5c <HAL_RCC_OscConfig+0x98>
 8001b42:	4b70      	ldr	r3, [pc, #448]	; (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a6f      	ldr	r2, [pc, #444]	; (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	4b6d      	ldr	r3, [pc, #436]	; (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a6c      	ldr	r2, [pc, #432]	; (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	e00b      	b.n	8001b74 <HAL_RCC_OscConfig+0xb0>
 8001b5c:	4b69      	ldr	r3, [pc, #420]	; (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a68      	ldr	r2, [pc, #416]	; (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	4b66      	ldr	r3, [pc, #408]	; (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a65      	ldr	r2, [pc, #404]	; (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d013      	beq.n	8001ba4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7ff fb62 	bl	8001244 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b84:	f7ff fb5e 	bl	8001244 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b64      	cmp	r3, #100	; 0x64
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e207      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b96:	4b5b      	ldr	r3, [pc, #364]	; (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0xc0>
 8001ba2:	e014      	b.n	8001bce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fb4e 	bl	8001244 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bac:	f7ff fb4a 	bl	8001244 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b64      	cmp	r3, #100	; 0x64
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e1f3      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bbe:	4b51      	ldr	r3, [pc, #324]	; (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0xe8>
 8001bca:	e000      	b.n	8001bce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d063      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bda:	4b4a      	ldr	r3, [pc, #296]	; (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00b      	beq.n	8001bfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001be6:	4b47      	ldr	r3, [pc, #284]	; (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	d11c      	bne.n	8001c2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bf2:	4b44      	ldr	r3, [pc, #272]	; (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d116      	bne.n	8001c2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfe:	4b41      	ldr	r3, [pc, #260]	; (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d005      	beq.n	8001c16 <HAL_RCC_OscConfig+0x152>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d001      	beq.n	8001c16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e1c7      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c16:	4b3b      	ldr	r3, [pc, #236]	; (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4937      	ldr	r1, [pc, #220]	; (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c2a:	e03a      	b.n	8001ca2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d020      	beq.n	8001c76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c34:	4b34      	ldr	r3, [pc, #208]	; (8001d08 <HAL_RCC_OscConfig+0x244>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3a:	f7ff fb03 	bl	8001244 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c42:	f7ff faff 	bl	8001244 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e1a8      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c54:	4b2b      	ldr	r3, [pc, #172]	; (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c60:	4b28      	ldr	r3, [pc, #160]	; (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	4925      	ldr	r1, [pc, #148]	; (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	600b      	str	r3, [r1, #0]
 8001c74:	e015      	b.n	8001ca2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c76:	4b24      	ldr	r3, [pc, #144]	; (8001d08 <HAL_RCC_OscConfig+0x244>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7c:	f7ff fae2 	bl	8001244 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c84:	f7ff fade 	bl	8001244 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e187      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c96:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d036      	beq.n	8001d1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d016      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <HAL_RCC_OscConfig+0x248>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbc:	f7ff fac2 	bl	8001244 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cc4:	f7ff fabe 	bl	8001244 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e167      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x200>
 8001ce2:	e01b      	b.n	8001d1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <HAL_RCC_OscConfig+0x248>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cea:	f7ff faab 	bl	8001244 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf0:	e00e      	b.n	8001d10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf2:	f7ff faa7 	bl	8001244 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d907      	bls.n	8001d10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e150      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
 8001d04:	40023800 	.word	0x40023800
 8001d08:	42470000 	.word	0x42470000
 8001d0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d10:	4b88      	ldr	r3, [pc, #544]	; (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1ea      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 8097 	beq.w	8001e58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2e:	4b81      	ldr	r3, [pc, #516]	; (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10f      	bne.n	8001d5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	4b7d      	ldr	r3, [pc, #500]	; (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	4a7c      	ldr	r2, [pc, #496]	; (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d48:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4a:	4b7a      	ldr	r3, [pc, #488]	; (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d56:	2301      	movs	r3, #1
 8001d58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5a:	4b77      	ldr	r3, [pc, #476]	; (8001f38 <HAL_RCC_OscConfig+0x474>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d118      	bne.n	8001d98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d66:	4b74      	ldr	r3, [pc, #464]	; (8001f38 <HAL_RCC_OscConfig+0x474>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a73      	ldr	r2, [pc, #460]	; (8001f38 <HAL_RCC_OscConfig+0x474>)
 8001d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d72:	f7ff fa67 	bl	8001244 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d7a:	f7ff fa63 	bl	8001244 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e10c      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8c:	4b6a      	ldr	r3, [pc, #424]	; (8001f38 <HAL_RCC_OscConfig+0x474>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0f0      	beq.n	8001d7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d106      	bne.n	8001dae <HAL_RCC_OscConfig+0x2ea>
 8001da0:	4b64      	ldr	r3, [pc, #400]	; (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da4:	4a63      	ldr	r2, [pc, #396]	; (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6713      	str	r3, [r2, #112]	; 0x70
 8001dac:	e01c      	b.n	8001de8 <HAL_RCC_OscConfig+0x324>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d10c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x30c>
 8001db6:	4b5f      	ldr	r3, [pc, #380]	; (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dba:	4a5e      	ldr	r2, [pc, #376]	; (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001dbc:	f043 0304 	orr.w	r3, r3, #4
 8001dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc2:	4b5c      	ldr	r3, [pc, #368]	; (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc6:	4a5b      	ldr	r2, [pc, #364]	; (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dce:	e00b      	b.n	8001de8 <HAL_RCC_OscConfig+0x324>
 8001dd0:	4b58      	ldr	r3, [pc, #352]	; (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd4:	4a57      	ldr	r2, [pc, #348]	; (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001dd6:	f023 0301 	bic.w	r3, r3, #1
 8001dda:	6713      	str	r3, [r2, #112]	; 0x70
 8001ddc:	4b55      	ldr	r3, [pc, #340]	; (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de0:	4a54      	ldr	r2, [pc, #336]	; (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001de2:	f023 0304 	bic.w	r3, r3, #4
 8001de6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d015      	beq.n	8001e1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df0:	f7ff fa28 	bl	8001244 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df6:	e00a      	b.n	8001e0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df8:	f7ff fa24 	bl	8001244 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e0cb      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0e:	4b49      	ldr	r3, [pc, #292]	; (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0ee      	beq.n	8001df8 <HAL_RCC_OscConfig+0x334>
 8001e1a:	e014      	b.n	8001e46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1c:	f7ff fa12 	bl	8001244 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e22:	e00a      	b.n	8001e3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e24:	f7ff fa0e 	bl	8001244 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e0b5      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3a:	4b3e      	ldr	r3, [pc, #248]	; (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1ee      	bne.n	8001e24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e46:	7dfb      	ldrb	r3, [r7, #23]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d105      	bne.n	8001e58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e4c:	4b39      	ldr	r3, [pc, #228]	; (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	4a38      	ldr	r2, [pc, #224]	; (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80a1 	beq.w	8001fa4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e62:	4b34      	ldr	r3, [pc, #208]	; (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	2b08      	cmp	r3, #8
 8001e6c:	d05c      	beq.n	8001f28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d141      	bne.n	8001efa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e76:	4b31      	ldr	r3, [pc, #196]	; (8001f3c <HAL_RCC_OscConfig+0x478>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7ff f9e2 	bl	8001244 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e84:	f7ff f9de 	bl	8001244 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e087      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e96:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69da      	ldr	r2, [r3, #28]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	019b      	lsls	r3, r3, #6
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb8:	085b      	lsrs	r3, r3, #1
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	041b      	lsls	r3, r3, #16
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec4:	061b      	lsls	r3, r3, #24
 8001ec6:	491b      	ldr	r1, [pc, #108]	; (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ecc:	4b1b      	ldr	r3, [pc, #108]	; (8001f3c <HAL_RCC_OscConfig+0x478>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed2:	f7ff f9b7 	bl	8001244 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eda:	f7ff f9b3 	bl	8001244 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e05c      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eec:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f0      	beq.n	8001eda <HAL_RCC_OscConfig+0x416>
 8001ef8:	e054      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efa:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <HAL_RCC_OscConfig+0x478>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7ff f9a0 	bl	8001244 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f08:	f7ff f99c 	bl	8001244 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e045      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x444>
 8001f26:	e03d      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d107      	bne.n	8001f40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e038      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40007000 	.word	0x40007000
 8001f3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f40:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <HAL_RCC_OscConfig+0x4ec>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d028      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d121      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d11a      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f70:	4013      	ands	r3, r2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d111      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f86:	085b      	lsrs	r3, r3, #1
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d107      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e000      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800

08001fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0cc      	b.n	8002162 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc8:	4b68      	ldr	r3, [pc, #416]	; (800216c <HAL_RCC_ClockConfig+0x1b8>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 030f 	and.w	r3, r3, #15
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d90c      	bls.n	8001ff0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd6:	4b65      	ldr	r3, [pc, #404]	; (800216c <HAL_RCC_ClockConfig+0x1b8>)
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fde:	4b63      	ldr	r3, [pc, #396]	; (800216c <HAL_RCC_ClockConfig+0x1b8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d001      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0b8      	b.n	8002162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d020      	beq.n	800203e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002008:	4b59      	ldr	r3, [pc, #356]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	4a58      	ldr	r2, [pc, #352]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 800200e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002012:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0308 	and.w	r3, r3, #8
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002020:	4b53      	ldr	r3, [pc, #332]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	4a52      	ldr	r2, [pc, #328]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800202a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800202c:	4b50      	ldr	r3, [pc, #320]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	494d      	ldr	r1, [pc, #308]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 800203a:	4313      	orrs	r3, r2
 800203c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d044      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d107      	bne.n	8002062 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002052:	4b47      	ldr	r3, [pc, #284]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d119      	bne.n	8002092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e07f      	b.n	8002162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b02      	cmp	r3, #2
 8002068:	d003      	beq.n	8002072 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800206e:	2b03      	cmp	r3, #3
 8002070:	d107      	bne.n	8002082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002072:	4b3f      	ldr	r3, [pc, #252]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d109      	bne.n	8002092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e06f      	b.n	8002162 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002082:	4b3b      	ldr	r3, [pc, #236]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e067      	b.n	8002162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002092:	4b37      	ldr	r3, [pc, #220]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f023 0203 	bic.w	r2, r3, #3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4934      	ldr	r1, [pc, #208]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a4:	f7ff f8ce 	bl	8001244 <HAL_GetTick>
 80020a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020aa:	e00a      	b.n	80020c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ac:	f7ff f8ca 	bl	8001244 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e04f      	b.n	8002162 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c2:	4b2b      	ldr	r3, [pc, #172]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 020c 	and.w	r2, r3, #12
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d1eb      	bne.n	80020ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020d4:	4b25      	ldr	r3, [pc, #148]	; (800216c <HAL_RCC_ClockConfig+0x1b8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 030f 	and.w	r3, r3, #15
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d20c      	bcs.n	80020fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e2:	4b22      	ldr	r3, [pc, #136]	; (800216c <HAL_RCC_ClockConfig+0x1b8>)
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ea:	4b20      	ldr	r3, [pc, #128]	; (800216c <HAL_RCC_ClockConfig+0x1b8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e032      	b.n	8002162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002108:	4b19      	ldr	r3, [pc, #100]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	4916      	ldr	r1, [pc, #88]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	4313      	orrs	r3, r2
 8002118:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d009      	beq.n	800213a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002126:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	490e      	ldr	r1, [pc, #56]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	4313      	orrs	r3, r2
 8002138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800213a:	f000 f821 	bl	8002180 <HAL_RCC_GetSysClockFreq>
 800213e:	4602      	mov	r2, r0
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	091b      	lsrs	r3, r3, #4
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	490a      	ldr	r1, [pc, #40]	; (8002174 <HAL_RCC_ClockConfig+0x1c0>)
 800214c:	5ccb      	ldrb	r3, [r1, r3]
 800214e:	fa22 f303 	lsr.w	r3, r2, r3
 8002152:	4a09      	ldr	r2, [pc, #36]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002156:	4b09      	ldr	r3, [pc, #36]	; (800217c <HAL_RCC_ClockConfig+0x1c8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff f82e 	bl	80011bc <HAL_InitTick>

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40023c00 	.word	0x40023c00
 8002170:	40023800 	.word	0x40023800
 8002174:	08004364 	.word	0x08004364
 8002178:	20000060 	.word	0x20000060
 800217c:	20000064 	.word	0x20000064

08002180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002184:	b090      	sub	sp, #64	; 0x40
 8002186:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	637b      	str	r3, [r7, #52]	; 0x34
 800218c:	2300      	movs	r3, #0
 800218e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002190:	2300      	movs	r3, #0
 8002192:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002194:	2300      	movs	r3, #0
 8002196:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002198:	4b59      	ldr	r3, [pc, #356]	; (8002300 <HAL_RCC_GetSysClockFreq+0x180>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 030c 	and.w	r3, r3, #12
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d00d      	beq.n	80021c0 <HAL_RCC_GetSysClockFreq+0x40>
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	f200 80a1 	bhi.w	80022ec <HAL_RCC_GetSysClockFreq+0x16c>
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d002      	beq.n	80021b4 <HAL_RCC_GetSysClockFreq+0x34>
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d003      	beq.n	80021ba <HAL_RCC_GetSysClockFreq+0x3a>
 80021b2:	e09b      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021b4:	4b53      	ldr	r3, [pc, #332]	; (8002304 <HAL_RCC_GetSysClockFreq+0x184>)
 80021b6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80021b8:	e09b      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021ba:	4b53      	ldr	r3, [pc, #332]	; (8002308 <HAL_RCC_GetSysClockFreq+0x188>)
 80021bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021be:	e098      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021c0:	4b4f      	ldr	r3, [pc, #316]	; (8002300 <HAL_RCC_GetSysClockFreq+0x180>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021ca:	4b4d      	ldr	r3, [pc, #308]	; (8002300 <HAL_RCC_GetSysClockFreq+0x180>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d028      	beq.n	8002228 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d6:	4b4a      	ldr	r3, [pc, #296]	; (8002300 <HAL_RCC_GetSysClockFreq+0x180>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	099b      	lsrs	r3, r3, #6
 80021dc:	2200      	movs	r2, #0
 80021de:	623b      	str	r3, [r7, #32]
 80021e0:	627a      	str	r2, [r7, #36]	; 0x24
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80021e8:	2100      	movs	r1, #0
 80021ea:	4b47      	ldr	r3, [pc, #284]	; (8002308 <HAL_RCC_GetSysClockFreq+0x188>)
 80021ec:	fb03 f201 	mul.w	r2, r3, r1
 80021f0:	2300      	movs	r3, #0
 80021f2:	fb00 f303 	mul.w	r3, r0, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	4a43      	ldr	r2, [pc, #268]	; (8002308 <HAL_RCC_GetSysClockFreq+0x188>)
 80021fa:	fba0 1202 	umull	r1, r2, r0, r2
 80021fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002200:	460a      	mov	r2, r1
 8002202:	62ba      	str	r2, [r7, #40]	; 0x28
 8002204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002206:	4413      	add	r3, r2
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800220a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220c:	2200      	movs	r2, #0
 800220e:	61bb      	str	r3, [r7, #24]
 8002210:	61fa      	str	r2, [r7, #28]
 8002212:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002216:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800221a:	f7fd ffef 	bl	80001fc <__aeabi_uldivmod>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4613      	mov	r3, r2
 8002224:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002226:	e053      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002228:	4b35      	ldr	r3, [pc, #212]	; (8002300 <HAL_RCC_GetSysClockFreq+0x180>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	099b      	lsrs	r3, r3, #6
 800222e:	2200      	movs	r2, #0
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	617a      	str	r2, [r7, #20]
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800223a:	f04f 0b00 	mov.w	fp, #0
 800223e:	4652      	mov	r2, sl
 8002240:	465b      	mov	r3, fp
 8002242:	f04f 0000 	mov.w	r0, #0
 8002246:	f04f 0100 	mov.w	r1, #0
 800224a:	0159      	lsls	r1, r3, #5
 800224c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002250:	0150      	lsls	r0, r2, #5
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	ebb2 080a 	subs.w	r8, r2, sl
 800225a:	eb63 090b 	sbc.w	r9, r3, fp
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800226a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800226e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002272:	ebb2 0408 	subs.w	r4, r2, r8
 8002276:	eb63 0509 	sbc.w	r5, r3, r9
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	00eb      	lsls	r3, r5, #3
 8002284:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002288:	00e2      	lsls	r2, r4, #3
 800228a:	4614      	mov	r4, r2
 800228c:	461d      	mov	r5, r3
 800228e:	eb14 030a 	adds.w	r3, r4, sl
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	eb45 030b 	adc.w	r3, r5, fp
 8002298:	607b      	str	r3, [r7, #4]
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022a6:	4629      	mov	r1, r5
 80022a8:	028b      	lsls	r3, r1, #10
 80022aa:	4621      	mov	r1, r4
 80022ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022b0:	4621      	mov	r1, r4
 80022b2:	028a      	lsls	r2, r1, #10
 80022b4:	4610      	mov	r0, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ba:	2200      	movs	r2, #0
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	60fa      	str	r2, [r7, #12]
 80022c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022c4:	f7fd ff9a 	bl	80001fc <__aeabi_uldivmod>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4613      	mov	r3, r2
 80022ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <HAL_RCC_GetSysClockFreq+0x180>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	0c1b      	lsrs	r3, r3, #16
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	3301      	adds	r3, #1
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80022e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022ea:	e002      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_RCC_GetSysClockFreq+0x184>)
 80022ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3740      	adds	r7, #64	; 0x40
 80022f8:	46bd      	mov	sp, r7
 80022fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800
 8002304:	00f42400 	.word	0x00f42400
 8002308:	017d7840 	.word	0x017d7840

0800230c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002310:	4b03      	ldr	r3, [pc, #12]	; (8002320 <HAL_RCC_GetHCLKFreq+0x14>)
 8002312:	681b      	ldr	r3, [r3, #0]
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000060 	.word	0x20000060

08002324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002328:	f7ff fff0 	bl	800230c <HAL_RCC_GetHCLKFreq>
 800232c:	4602      	mov	r2, r0
 800232e:	4b05      	ldr	r3, [pc, #20]	; (8002344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	0a9b      	lsrs	r3, r3, #10
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	4903      	ldr	r1, [pc, #12]	; (8002348 <HAL_RCC_GetPCLK1Freq+0x24>)
 800233a:	5ccb      	ldrb	r3, [r1, r3]
 800233c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002340:	4618      	mov	r0, r3
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40023800 	.word	0x40023800
 8002348:	08004374 	.word	0x08004374

0800234c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002350:	f7ff ffdc 	bl	800230c <HAL_RCC_GetHCLKFreq>
 8002354:	4602      	mov	r2, r0
 8002356:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	0b5b      	lsrs	r3, r3, #13
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	4903      	ldr	r1, [pc, #12]	; (8002370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002362:	5ccb      	ldrb	r3, [r1, r3]
 8002364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002368:	4618      	mov	r0, r3
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40023800 	.word	0x40023800
 8002370:	08004374 	.word	0x08004374

08002374 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e03f      	b.n	8002406 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d106      	bne.n	80023a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7fe fe72 	bl	8001084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2224      	movs	r2, #36	; 0x24
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 ff5f 	bl	800327c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695a      	ldr	r2, [r3, #20]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2220      	movs	r2, #32
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b08a      	sub	sp, #40	; 0x28
 8002412:	af02      	add	r7, sp, #8
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	603b      	str	r3, [r7, #0]
 800241a:	4613      	mov	r3, r2
 800241c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b20      	cmp	r3, #32
 800242c:	d17c      	bne.n	8002528 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <HAL_UART_Transmit+0x2c>
 8002434:	88fb      	ldrh	r3, [r7, #6]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e075      	b.n	800252a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_UART_Transmit+0x3e>
 8002448:	2302      	movs	r3, #2
 800244a:	e06e      	b.n	800252a <HAL_UART_Transmit+0x11c>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2221      	movs	r2, #33	; 0x21
 800245e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002462:	f7fe feef 	bl	8001244 <HAL_GetTick>
 8002466:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	88fa      	ldrh	r2, [r7, #6]
 800246c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	88fa      	ldrh	r2, [r7, #6]
 8002472:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800247c:	d108      	bne.n	8002490 <HAL_UART_Transmit+0x82>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d104      	bne.n	8002490 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	e003      	b.n	8002498 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002494:	2300      	movs	r3, #0
 8002496:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80024a0:	e02a      	b.n	80024f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2200      	movs	r2, #0
 80024aa:	2180      	movs	r1, #128	; 0x80
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 fc9f 	bl	8002df0 <UART_WaitOnFlagUntilTimeout>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e036      	b.n	800252a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10b      	bne.n	80024da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	3302      	adds	r3, #2
 80024d6:	61bb      	str	r3, [r7, #24]
 80024d8:	e007      	b.n	80024ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	781a      	ldrb	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	3301      	adds	r3, #1
 80024e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1cf      	bne.n	80024a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2200      	movs	r2, #0
 800250a:	2140      	movs	r1, #64	; 0x40
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 fc6f 	bl	8002df0 <UART_WaitOnFlagUntilTimeout>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e006      	b.n	800252a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2220      	movs	r2, #32
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	e000      	b.n	800252a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002528:	2302      	movs	r3, #2
  }
}
 800252a:	4618      	mov	r0, r3
 800252c:	3720      	adds	r7, #32
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b08a      	sub	sp, #40	; 0x28
 8002536:	af02      	add	r7, sp, #8
 8002538:	60f8      	str	r0, [r7, #12]
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	603b      	str	r3, [r7, #0]
 800253e:	4613      	mov	r3, r2
 8002540:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b20      	cmp	r3, #32
 8002550:	f040 808c 	bne.w	800266c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <HAL_UART_Receive+0x2e>
 800255a:	88fb      	ldrh	r3, [r7, #6]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e084      	b.n	800266e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_UART_Receive+0x40>
 800256e:	2302      	movs	r3, #2
 8002570:	e07d      	b.n	800266e <HAL_UART_Receive+0x13c>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2222      	movs	r2, #34	; 0x22
 8002584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800258e:	f7fe fe59 	bl	8001244 <HAL_GetTick>
 8002592:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	88fa      	ldrh	r2, [r7, #6]
 8002598:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	88fa      	ldrh	r2, [r7, #6]
 800259e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a8:	d108      	bne.n	80025bc <HAL_UART_Receive+0x8a>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d104      	bne.n	80025bc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	61bb      	str	r3, [r7, #24]
 80025ba:	e003      	b.n	80025c4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80025cc:	e043      	b.n	8002656 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	2200      	movs	r2, #0
 80025d6:	2120      	movs	r1, #32
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 fc09 	bl	8002df0 <UART_WaitOnFlagUntilTimeout>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e042      	b.n	800266e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10c      	bne.n	8002608 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	3302      	adds	r3, #2
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	e01f      	b.n	8002648 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002610:	d007      	beq.n	8002622 <HAL_UART_Receive+0xf0>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10a      	bne.n	8002630 <HAL_UART_Receive+0xfe>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d106      	bne.n	8002630 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	701a      	strb	r2, [r3, #0]
 800262e:	e008      	b.n	8002642 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800263c:	b2da      	uxtb	r2, r3
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3301      	adds	r3, #1
 8002646:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800264c:	b29b      	uxth	r3, r3
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800265a:	b29b      	uxth	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1b6      	bne.n	80025ce <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	e000      	b.n	800266e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800266c:	2302      	movs	r3, #2
  }
}
 800266e:	4618      	mov	r0, r3
 8002670:	3720      	adds	r7, #32
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002676:	b480      	push	{r7}
 8002678:	b085      	sub	sp, #20
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	4613      	mov	r3, r2
 8002682:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b20      	cmp	r3, #32
 800268e:	d130      	bne.n	80026f2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <HAL_UART_Transmit_IT+0x26>
 8002696:	88fb      	ldrh	r3, [r7, #6]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e029      	b.n	80026f4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_UART_Transmit_IT+0x38>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e022      	b.n	80026f4 <HAL_UART_Transmit_IT+0x7e>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	88fa      	ldrh	r2, [r7, #6]
 80026c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	88fa      	ldrh	r2, [r7, #6]
 80026c6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2221      	movs	r2, #33	; 0x21
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026ec:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80026ee:	2300      	movs	r3, #0
 80026f0:	e000      	b.n	80026f4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80026f2:	2302      	movs	r3, #2
  }
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	4613      	mov	r3, r2
 800270c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b20      	cmp	r3, #32
 8002718:	d11d      	bne.n	8002756 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d002      	beq.n	8002726 <HAL_UART_Receive_IT+0x26>
 8002720:	88fb      	ldrh	r3, [r7, #6]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e016      	b.n	8002758 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_UART_Receive_IT+0x38>
 8002734:	2302      	movs	r3, #2
 8002736:	e00f      	b.n	8002758 <HAL_UART_Receive_IT+0x58>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002746:	88fb      	ldrh	r3, [r7, #6]
 8002748:	461a      	mov	r2, r3
 800274a:	68b9      	ldr	r1, [r7, #8]
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 fbbd 	bl	8002ecc <UART_Start_Receive_IT>
 8002752:	4603      	mov	r3, r0
 8002754:	e000      	b.n	8002758 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002756:	2302      	movs	r3, #2
  }
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b09a      	sub	sp, #104	; 0x68
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	330c      	adds	r3, #12
 800276e:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002772:	e853 3f00 	ldrex	r3, [r3]
 8002776:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800277a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800277e:	667b      	str	r3, [r7, #100]	; 0x64
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	330c      	adds	r3, #12
 8002786:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002788:	657a      	str	r2, [r7, #84]	; 0x54
 800278a:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800278c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800278e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002790:	e841 2300 	strex	r3, r2, [r1]
 8002794:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1e5      	bne.n	8002768 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	3314      	adds	r3, #20
 80027a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a6:	e853 3f00 	ldrex	r3, [r3]
 80027aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80027ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ae:	f023 0301 	bic.w	r3, r3, #1
 80027b2:	663b      	str	r3, [r7, #96]	; 0x60
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	3314      	adds	r3, #20
 80027ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027bc:	643a      	str	r2, [r7, #64]	; 0x40
 80027be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80027c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027c4:	e841 2300 	strex	r3, r2, [r1]
 80027c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80027ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1e5      	bne.n	800279c <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d119      	bne.n	800280c <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	330c      	adds	r3, #12
 80027de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	e853 3f00 	ldrex	r3, [r3]
 80027e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f023 0310 	bic.w	r3, r3, #16
 80027ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	330c      	adds	r3, #12
 80027f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80027f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002800:	e841 2300 	strex	r3, r2, [r1]
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1e5      	bne.n	80027d8 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002816:	2b40      	cmp	r3, #64	; 0x40
 8002818:	d136      	bne.n	8002888 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	3314      	adds	r3, #20
 8002820:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	e853 3f00 	ldrex	r3, [r3]
 8002828:	60bb      	str	r3, [r7, #8]
   return(result);
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002830:	65bb      	str	r3, [r7, #88]	; 0x58
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	3314      	adds	r3, #20
 8002838:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800283a:	61ba      	str	r2, [r7, #24]
 800283c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283e:	6979      	ldr	r1, [r7, #20]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	e841 2300 	strex	r3, r2, [r1]
 8002846:	613b      	str	r3, [r7, #16]
   return(result);
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1e5      	bne.n	800281a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002852:	2b00      	cmp	r3, #0
 8002854:	d018      	beq.n	8002888 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285a:	2200      	movs	r2, #0
 800285c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fe61 	bl	800152a <HAL_DMA_Abort>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00c      	beq.n	8002888 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe feeb 	bl	800164e <HAL_DMA_GetError>
 8002878:	4603      	mov	r3, r0
 800287a:	2b20      	cmp	r3, #32
 800287c:	d104      	bne.n	8002888 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2210      	movs	r2, #16
 8002882:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e00a      	b.n	800289e <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3768      	adds	r7, #104	; 0x68
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b0ba      	sub	sp, #232	; 0xe8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80028da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80028e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10f      	bne.n	800290e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028f2:	f003 0320 	and.w	r3, r3, #32
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d009      	beq.n	800290e <HAL_UART_IRQHandler+0x66>
 80028fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028fe:	f003 0320 	and.w	r3, r3, #32
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fbfd 	bl	8003106 <UART_Receive_IT>
      return;
 800290c:	e256      	b.n	8002dbc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800290e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 80de 	beq.w	8002ad4 <HAL_UART_IRQHandler+0x22c>
 8002918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d106      	bne.n	8002932 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002928:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 80d1 	beq.w	8002ad4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00b      	beq.n	8002956 <HAL_UART_IRQHandler+0xae>
 800293e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d005      	beq.n	8002956 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f043 0201 	orr.w	r2, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00b      	beq.n	800297a <HAL_UART_IRQHandler+0xd2>
 8002962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d005      	beq.n	800297a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f043 0202 	orr.w	r2, r3, #2
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800297a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00b      	beq.n	800299e <HAL_UART_IRQHandler+0xf6>
 8002986:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f043 0204 	orr.w	r2, r3, #4
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800299e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d011      	beq.n	80029ce <HAL_UART_IRQHandler+0x126>
 80029aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d105      	bne.n	80029c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80029b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d005      	beq.n	80029ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f043 0208 	orr.w	r2, r3, #8
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 81ed 	beq.w	8002db2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029dc:	f003 0320 	and.w	r3, r3, #32
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d008      	beq.n	80029f6 <HAL_UART_IRQHandler+0x14e>
 80029e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029e8:	f003 0320 	and.w	r3, r3, #32
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 fb88 	bl	8003106 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a00:	2b40      	cmp	r3, #64	; 0x40
 8002a02:	bf0c      	ite	eq
 8002a04:	2301      	moveq	r3, #1
 8002a06:	2300      	movne	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d103      	bne.n	8002a22 <HAL_UART_IRQHandler+0x17a>
 8002a1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d04f      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 fa90 	bl	8002f48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a32:	2b40      	cmp	r3, #64	; 0x40
 8002a34:	d141      	bne.n	8002aba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	3314      	adds	r3, #20
 8002a3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a44:	e853 3f00 	ldrex	r3, [r3]
 8002a48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	3314      	adds	r3, #20
 8002a5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a72:	e841 2300 	strex	r3, r2, [r1]
 8002a76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1d9      	bne.n	8002a36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d013      	beq.n	8002ab2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8e:	4a7d      	ldr	r2, [pc, #500]	; (8002c84 <HAL_UART_IRQHandler+0x3dc>)
 8002a90:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe fdb7 	bl	800160a <HAL_DMA_Abort_IT>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d016      	beq.n	8002ad0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002aac:	4610      	mov	r0, r2
 8002aae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab0:	e00e      	b.n	8002ad0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f986 	bl	8002dc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab8:	e00a      	b.n	8002ad0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f982 	bl	8002dc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac0:	e006      	b.n	8002ad0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f97e 	bl	8002dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002ace:	e170      	b.n	8002db2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad0:	bf00      	nop
    return;
 8002ad2:	e16e      	b.n	8002db2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	f040 814a 	bne.w	8002d72 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 8143 	beq.w	8002d72 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002af0:	f003 0310 	and.w	r3, r3, #16
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 813c 	beq.w	8002d72 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002afa:	2300      	movs	r3, #0
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1a:	2b40      	cmp	r3, #64	; 0x40
 8002b1c:	f040 80b4 	bne.w	8002c88 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 8140 	beq.w	8002db6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	f080 8139 	bcs.w	8002db6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b4a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b56:	f000 8088 	beq.w	8002c6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	330c      	adds	r3, #12
 8002b60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b68:	e853 3f00 	ldrex	r3, [r3]
 8002b6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	330c      	adds	r3, #12
 8002b82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002b86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b96:	e841 2300 	strex	r3, r2, [r1]
 8002b9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1d9      	bne.n	8002b5a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	3314      	adds	r3, #20
 8002bac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bb0:	e853 3f00 	ldrex	r3, [r3]
 8002bb4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002bb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	3314      	adds	r3, #20
 8002bc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002bca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002bce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002bd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002bd6:	e841 2300 	strex	r3, r2, [r1]
 8002bda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002bdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1e1      	bne.n	8002ba6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	3314      	adds	r3, #20
 8002be8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bec:	e853 3f00 	ldrex	r3, [r3]
 8002bf0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002bf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	3314      	adds	r3, #20
 8002c02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c0e:	e841 2300 	strex	r3, r2, [r1]
 8002c12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002c14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1e3      	bne.n	8002be2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	330c      	adds	r3, #12
 8002c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c32:	e853 3f00 	ldrex	r3, [r3]
 8002c36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c3a:	f023 0310 	bic.w	r3, r3, #16
 8002c3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	330c      	adds	r3, #12
 8002c48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002c4c:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c4e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c54:	e841 2300 	strex	r3, r2, [r1]
 8002c58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1e3      	bne.n	8002c28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fe fc60 	bl	800152a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	4619      	mov	r1, r3
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f8ac 	bl	8002dd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c80:	e099      	b.n	8002db6 <HAL_UART_IRQHandler+0x50e>
 8002c82:	bf00      	nop
 8002c84:	0800300f 	.word	0x0800300f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 808b 	beq.w	8002dba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002ca4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 8086 	beq.w	8002dba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	330c      	adds	r3, #12
 8002cb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb8:	e853 3f00 	ldrex	r3, [r3]
 8002cbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002cc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	330c      	adds	r3, #12
 8002cce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002cd2:	647a      	str	r2, [r7, #68]	; 0x44
 8002cd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002cd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cda:	e841 2300 	strex	r3, r2, [r1]
 8002cde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1e3      	bne.n	8002cae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	3314      	adds	r3, #20
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	e853 3f00 	ldrex	r3, [r3]
 8002cf4:	623b      	str	r3, [r7, #32]
   return(result);
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	3314      	adds	r3, #20
 8002d06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d0a:	633a      	str	r2, [r7, #48]	; 0x30
 8002d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d12:	e841 2300 	strex	r3, r2, [r1]
 8002d16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1e3      	bne.n	8002ce6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	330c      	adds	r3, #12
 8002d32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	e853 3f00 	ldrex	r3, [r3]
 8002d3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f023 0310 	bic.w	r3, r3, #16
 8002d42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	330c      	adds	r3, #12
 8002d4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002d50:	61fa      	str	r2, [r7, #28]
 8002d52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d54:	69b9      	ldr	r1, [r7, #24]
 8002d56:	69fa      	ldr	r2, [r7, #28]
 8002d58:	e841 2300 	strex	r3, r2, [r1]
 8002d5c:	617b      	str	r3, [r7, #20]
   return(result);
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1e3      	bne.n	8002d2c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d68:	4619      	mov	r1, r3
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f834 	bl	8002dd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d70:	e023      	b.n	8002dba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d009      	beq.n	8002d92 <HAL_UART_IRQHandler+0x4ea>
 8002d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f953 	bl	8003036 <UART_Transmit_IT>
    return;
 8002d90:	e014      	b.n	8002dbc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00e      	beq.n	8002dbc <HAL_UART_IRQHandler+0x514>
 8002d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d008      	beq.n	8002dbc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f993 	bl	80030d6 <UART_EndTransmit_IT>
    return;
 8002db0:	e004      	b.n	8002dbc <HAL_UART_IRQHandler+0x514>
    return;
 8002db2:	bf00      	nop
 8002db4:	e002      	b.n	8002dbc <HAL_UART_IRQHandler+0x514>
      return;
 8002db6:	bf00      	nop
 8002db8:	e000      	b.n	8002dbc <HAL_UART_IRQHandler+0x514>
      return;
 8002dba:	bf00      	nop
  }
}
 8002dbc:	37e8      	adds	r7, #232	; 0xe8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop

08002dc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b090      	sub	sp, #64	; 0x40
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	603b      	str	r3, [r7, #0]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e00:	e050      	b.n	8002ea4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e08:	d04c      	beq.n	8002ea4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d007      	beq.n	8002e20 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e10:	f7fe fa18 	bl	8001244 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d241      	bcs.n	8002ea4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	330c      	adds	r3, #12
 8002e26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2a:	e853 3f00 	ldrex	r3, [r3]
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	330c      	adds	r3, #12
 8002e3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e40:	637a      	str	r2, [r7, #52]	; 0x34
 8002e42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e48:	e841 2300 	strex	r3, r2, [r1]
 8002e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1e5      	bne.n	8002e20 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	3314      	adds	r3, #20
 8002e5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	e853 3f00 	ldrex	r3, [r3]
 8002e62:	613b      	str	r3, [r7, #16]
   return(result);
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f023 0301 	bic.w	r3, r3, #1
 8002e6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3314      	adds	r3, #20
 8002e72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e74:	623a      	str	r2, [r7, #32]
 8002e76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e78:	69f9      	ldr	r1, [r7, #28]
 8002e7a:	6a3a      	ldr	r2, [r7, #32]
 8002e7c:	e841 2300 	strex	r3, r2, [r1]
 8002e80:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1e5      	bne.n	8002e54 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e00f      	b.n	8002ec4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	4013      	ands	r3, r2
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	461a      	mov	r2, r3
 8002ebc:	79fb      	ldrb	r3, [r7, #7]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d09f      	beq.n	8002e02 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3740      	adds	r7, #64	; 0x40
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	88fa      	ldrh	r2, [r7, #6]
 8002ee4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	88fa      	ldrh	r2, [r7, #6]
 8002eea:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2222      	movs	r2, #34	; 0x22
 8002ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d007      	beq.n	8002f1a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f18:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695a      	ldr	r2, [r3, #20]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f042 0201 	orr.w	r2, r2, #1
 8002f28:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 0220 	orr.w	r2, r2, #32
 8002f38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b095      	sub	sp, #84	; 0x54
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	330c      	adds	r3, #12
 8002f56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f5a:	e853 3f00 	ldrex	r3, [r3]
 8002f5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	330c      	adds	r3, #12
 8002f6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f70:	643a      	str	r2, [r7, #64]	; 0x40
 8002f72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f78:	e841 2300 	strex	r3, r2, [r1]
 8002f7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1e5      	bne.n	8002f50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	3314      	adds	r3, #20
 8002f8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	e853 3f00 	ldrex	r3, [r3]
 8002f92:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f023 0301 	bic.w	r3, r3, #1
 8002f9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	3314      	adds	r3, #20
 8002fa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fa4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002faa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fac:	e841 2300 	strex	r3, r2, [r1]
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1e5      	bne.n	8002f84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d119      	bne.n	8002ff4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	330c      	adds	r3, #12
 8002fc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	e853 3f00 	ldrex	r3, [r3]
 8002fce:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f023 0310 	bic.w	r3, r3, #16
 8002fd6:	647b      	str	r3, [r7, #68]	; 0x44
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	330c      	adds	r3, #12
 8002fde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fe0:	61ba      	str	r2, [r7, #24]
 8002fe2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe4:	6979      	ldr	r1, [r7, #20]
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	e841 2300 	strex	r3, r2, [r1]
 8002fec:	613b      	str	r3, [r7, #16]
   return(result);
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1e5      	bne.n	8002fc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003002:	bf00      	nop
 8003004:	3754      	adds	r7, #84	; 0x54
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b084      	sub	sp, #16
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f7ff fecb 	bl	8002dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800302e:	bf00      	nop
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003036:	b480      	push	{r7}
 8003038:	b085      	sub	sp, #20
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b21      	cmp	r3, #33	; 0x21
 8003048:	d13e      	bne.n	80030c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003052:	d114      	bne.n	800307e <UART_Transmit_IT+0x48>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d110      	bne.n	800307e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003070:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	1c9a      	adds	r2, r3, #2
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	621a      	str	r2, [r3, #32]
 800307c:	e008      	b.n	8003090 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	1c59      	adds	r1, r3, #1
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6211      	str	r1, [r2, #32]
 8003088:	781a      	ldrb	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b01      	subs	r3, #1
 8003098:	b29b      	uxth	r3, r3
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	4619      	mov	r1, r3
 800309e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10f      	bne.n	80030c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	e000      	b.n	80030ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80030c8:	2302      	movs	r3, #2
  }
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2220      	movs	r2, #32
 80030f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fd fba6 	bl	8000848 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b08c      	sub	sp, #48	; 0x30
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b22      	cmp	r3, #34	; 0x22
 8003118:	f040 80ab 	bne.w	8003272 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003124:	d117      	bne.n	8003156 <UART_Receive_IT+0x50>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d113      	bne.n	8003156 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800312e:	2300      	movs	r3, #0
 8003130:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003136:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	b29b      	uxth	r3, r3
 8003140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003144:	b29a      	uxth	r2, r3
 8003146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003148:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314e:	1c9a      	adds	r2, r3, #2
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	629a      	str	r2, [r3, #40]	; 0x28
 8003154:	e026      	b.n	80031a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800315c:	2300      	movs	r3, #0
 800315e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003168:	d007      	beq.n	800317a <UART_Receive_IT+0x74>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10a      	bne.n	8003188 <UART_Receive_IT+0x82>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	b2da      	uxtb	r2, r3
 8003182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003184:	701a      	strb	r2, [r3, #0]
 8003186:	e008      	b.n	800319a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003194:	b2da      	uxtb	r2, r3
 8003196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003198:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	4619      	mov	r1, r3
 80031b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d15a      	bne.n	800326e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0220 	bic.w	r2, r2, #32
 80031c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0201 	bic.w	r2, r2, #1
 80031e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d135      	bne.n	8003264 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	330c      	adds	r3, #12
 8003204:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	e853 3f00 	ldrex	r3, [r3]
 800320c:	613b      	str	r3, [r7, #16]
   return(result);
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	f023 0310 	bic.w	r3, r3, #16
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	330c      	adds	r3, #12
 800321c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800321e:	623a      	str	r2, [r7, #32]
 8003220:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003222:	69f9      	ldr	r1, [r7, #28]
 8003224:	6a3a      	ldr	r2, [r7, #32]
 8003226:	e841 2300 	strex	r3, r2, [r1]
 800322a:	61bb      	str	r3, [r7, #24]
   return(result);
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1e5      	bne.n	80031fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0310 	and.w	r3, r3, #16
 800323c:	2b10      	cmp	r3, #16
 800323e:	d10a      	bne.n	8003256 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003240:	2300      	movs	r3, #0
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800325a:	4619      	mov	r1, r3
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff fdbb 	bl	8002dd8 <HAL_UARTEx_RxEventCallback>
 8003262:	e002      	b.n	800326a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7fd fb97 	bl	8000998 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	e002      	b.n	8003274 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800326e:	2300      	movs	r3, #0
 8003270:	e000      	b.n	8003274 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003272:	2302      	movs	r3, #2
  }
}
 8003274:	4618      	mov	r0, r3
 8003276:	3730      	adds	r7, #48	; 0x30
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800327c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003280:	b0c0      	sub	sp, #256	; 0x100
 8003282:	af00      	add	r7, sp, #0
 8003284:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003298:	68d9      	ldr	r1, [r3, #12]
 800329a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	ea40 0301 	orr.w	r3, r0, r1
 80032a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	431a      	orrs	r2, r3
 80032bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80032d4:	f021 010c 	bic.w	r1, r1, #12
 80032d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80032e2:	430b      	orrs	r3, r1
 80032e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80032f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f6:	6999      	ldr	r1, [r3, #24]
 80032f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	ea40 0301 	orr.w	r3, r0, r1
 8003302:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	4b8f      	ldr	r3, [pc, #572]	; (8003548 <UART_SetConfig+0x2cc>)
 800330c:	429a      	cmp	r2, r3
 800330e:	d005      	beq.n	800331c <UART_SetConfig+0xa0>
 8003310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	4b8d      	ldr	r3, [pc, #564]	; (800354c <UART_SetConfig+0x2d0>)
 8003318:	429a      	cmp	r2, r3
 800331a:	d104      	bne.n	8003326 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800331c:	f7ff f816 	bl	800234c <HAL_RCC_GetPCLK2Freq>
 8003320:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003324:	e003      	b.n	800332e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003326:	f7fe fffd 	bl	8002324 <HAL_RCC_GetPCLK1Freq>
 800332a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800332e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003338:	f040 810c 	bne.w	8003554 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800333c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003340:	2200      	movs	r2, #0
 8003342:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003346:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800334a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800334e:	4622      	mov	r2, r4
 8003350:	462b      	mov	r3, r5
 8003352:	1891      	adds	r1, r2, r2
 8003354:	65b9      	str	r1, [r7, #88]	; 0x58
 8003356:	415b      	adcs	r3, r3
 8003358:	65fb      	str	r3, [r7, #92]	; 0x5c
 800335a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800335e:	4621      	mov	r1, r4
 8003360:	eb12 0801 	adds.w	r8, r2, r1
 8003364:	4629      	mov	r1, r5
 8003366:	eb43 0901 	adc.w	r9, r3, r1
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003376:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800337a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800337e:	4690      	mov	r8, r2
 8003380:	4699      	mov	r9, r3
 8003382:	4623      	mov	r3, r4
 8003384:	eb18 0303 	adds.w	r3, r8, r3
 8003388:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800338c:	462b      	mov	r3, r5
 800338e:	eb49 0303 	adc.w	r3, r9, r3
 8003392:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80033a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80033a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80033aa:	460b      	mov	r3, r1
 80033ac:	18db      	adds	r3, r3, r3
 80033ae:	653b      	str	r3, [r7, #80]	; 0x50
 80033b0:	4613      	mov	r3, r2
 80033b2:	eb42 0303 	adc.w	r3, r2, r3
 80033b6:	657b      	str	r3, [r7, #84]	; 0x54
 80033b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80033bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80033c0:	f7fc ff1c 	bl	80001fc <__aeabi_uldivmod>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4b61      	ldr	r3, [pc, #388]	; (8003550 <UART_SetConfig+0x2d4>)
 80033ca:	fba3 2302 	umull	r2, r3, r3, r2
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	011c      	lsls	r4, r3, #4
 80033d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033d6:	2200      	movs	r2, #0
 80033d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80033e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80033e4:	4642      	mov	r2, r8
 80033e6:	464b      	mov	r3, r9
 80033e8:	1891      	adds	r1, r2, r2
 80033ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80033ec:	415b      	adcs	r3, r3
 80033ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80033f4:	4641      	mov	r1, r8
 80033f6:	eb12 0a01 	adds.w	sl, r2, r1
 80033fa:	4649      	mov	r1, r9
 80033fc:	eb43 0b01 	adc.w	fp, r3, r1
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800340c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003410:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003414:	4692      	mov	sl, r2
 8003416:	469b      	mov	fp, r3
 8003418:	4643      	mov	r3, r8
 800341a:	eb1a 0303 	adds.w	r3, sl, r3
 800341e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003422:	464b      	mov	r3, r9
 8003424:	eb4b 0303 	adc.w	r3, fp, r3
 8003428:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800342c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003438:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800343c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003440:	460b      	mov	r3, r1
 8003442:	18db      	adds	r3, r3, r3
 8003444:	643b      	str	r3, [r7, #64]	; 0x40
 8003446:	4613      	mov	r3, r2
 8003448:	eb42 0303 	adc.w	r3, r2, r3
 800344c:	647b      	str	r3, [r7, #68]	; 0x44
 800344e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003452:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003456:	f7fc fed1 	bl	80001fc <__aeabi_uldivmod>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	4611      	mov	r1, r2
 8003460:	4b3b      	ldr	r3, [pc, #236]	; (8003550 <UART_SetConfig+0x2d4>)
 8003462:	fba3 2301 	umull	r2, r3, r3, r1
 8003466:	095b      	lsrs	r3, r3, #5
 8003468:	2264      	movs	r2, #100	; 0x64
 800346a:	fb02 f303 	mul.w	r3, r2, r3
 800346e:	1acb      	subs	r3, r1, r3
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003476:	4b36      	ldr	r3, [pc, #216]	; (8003550 <UART_SetConfig+0x2d4>)
 8003478:	fba3 2302 	umull	r2, r3, r3, r2
 800347c:	095b      	lsrs	r3, r3, #5
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003484:	441c      	add	r4, r3
 8003486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800348a:	2200      	movs	r2, #0
 800348c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003490:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003494:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003498:	4642      	mov	r2, r8
 800349a:	464b      	mov	r3, r9
 800349c:	1891      	adds	r1, r2, r2
 800349e:	63b9      	str	r1, [r7, #56]	; 0x38
 80034a0:	415b      	adcs	r3, r3
 80034a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034a8:	4641      	mov	r1, r8
 80034aa:	1851      	adds	r1, r2, r1
 80034ac:	6339      	str	r1, [r7, #48]	; 0x30
 80034ae:	4649      	mov	r1, r9
 80034b0:	414b      	adcs	r3, r1
 80034b2:	637b      	str	r3, [r7, #52]	; 0x34
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80034c0:	4659      	mov	r1, fp
 80034c2:	00cb      	lsls	r3, r1, #3
 80034c4:	4651      	mov	r1, sl
 80034c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ca:	4651      	mov	r1, sl
 80034cc:	00ca      	lsls	r2, r1, #3
 80034ce:	4610      	mov	r0, r2
 80034d0:	4619      	mov	r1, r3
 80034d2:	4603      	mov	r3, r0
 80034d4:	4642      	mov	r2, r8
 80034d6:	189b      	adds	r3, r3, r2
 80034d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034dc:	464b      	mov	r3, r9
 80034de:	460a      	mov	r2, r1
 80034e0:	eb42 0303 	adc.w	r3, r2, r3
 80034e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80034f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80034f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80034fc:	460b      	mov	r3, r1
 80034fe:	18db      	adds	r3, r3, r3
 8003500:	62bb      	str	r3, [r7, #40]	; 0x28
 8003502:	4613      	mov	r3, r2
 8003504:	eb42 0303 	adc.w	r3, r2, r3
 8003508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800350a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800350e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003512:	f7fc fe73 	bl	80001fc <__aeabi_uldivmod>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <UART_SetConfig+0x2d4>)
 800351c:	fba3 1302 	umull	r1, r3, r3, r2
 8003520:	095b      	lsrs	r3, r3, #5
 8003522:	2164      	movs	r1, #100	; 0x64
 8003524:	fb01 f303 	mul.w	r3, r1, r3
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	3332      	adds	r3, #50	; 0x32
 800352e:	4a08      	ldr	r2, [pc, #32]	; (8003550 <UART_SetConfig+0x2d4>)
 8003530:	fba2 2303 	umull	r2, r3, r2, r3
 8003534:	095b      	lsrs	r3, r3, #5
 8003536:	f003 0207 	and.w	r2, r3, #7
 800353a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4422      	add	r2, r4
 8003542:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003544:	e105      	b.n	8003752 <UART_SetConfig+0x4d6>
 8003546:	bf00      	nop
 8003548:	40011000 	.word	0x40011000
 800354c:	40011400 	.word	0x40011400
 8003550:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003558:	2200      	movs	r2, #0
 800355a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800355e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003562:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003566:	4642      	mov	r2, r8
 8003568:	464b      	mov	r3, r9
 800356a:	1891      	adds	r1, r2, r2
 800356c:	6239      	str	r1, [r7, #32]
 800356e:	415b      	adcs	r3, r3
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
 8003572:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003576:	4641      	mov	r1, r8
 8003578:	1854      	adds	r4, r2, r1
 800357a:	4649      	mov	r1, r9
 800357c:	eb43 0501 	adc.w	r5, r3, r1
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	00eb      	lsls	r3, r5, #3
 800358a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800358e:	00e2      	lsls	r2, r4, #3
 8003590:	4614      	mov	r4, r2
 8003592:	461d      	mov	r5, r3
 8003594:	4643      	mov	r3, r8
 8003596:	18e3      	adds	r3, r4, r3
 8003598:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800359c:	464b      	mov	r3, r9
 800359e:	eb45 0303 	adc.w	r3, r5, r3
 80035a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	f04f 0300 	mov.w	r3, #0
 80035be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80035c2:	4629      	mov	r1, r5
 80035c4:	008b      	lsls	r3, r1, #2
 80035c6:	4621      	mov	r1, r4
 80035c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035cc:	4621      	mov	r1, r4
 80035ce:	008a      	lsls	r2, r1, #2
 80035d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80035d4:	f7fc fe12 	bl	80001fc <__aeabi_uldivmod>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	4b60      	ldr	r3, [pc, #384]	; (8003760 <UART_SetConfig+0x4e4>)
 80035de:	fba3 2302 	umull	r2, r3, r3, r2
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	011c      	lsls	r4, r3, #4
 80035e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035ea:	2200      	movs	r2, #0
 80035ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80035f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80035f8:	4642      	mov	r2, r8
 80035fa:	464b      	mov	r3, r9
 80035fc:	1891      	adds	r1, r2, r2
 80035fe:	61b9      	str	r1, [r7, #24]
 8003600:	415b      	adcs	r3, r3
 8003602:	61fb      	str	r3, [r7, #28]
 8003604:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003608:	4641      	mov	r1, r8
 800360a:	1851      	adds	r1, r2, r1
 800360c:	6139      	str	r1, [r7, #16]
 800360e:	4649      	mov	r1, r9
 8003610:	414b      	adcs	r3, r1
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003620:	4659      	mov	r1, fp
 8003622:	00cb      	lsls	r3, r1, #3
 8003624:	4651      	mov	r1, sl
 8003626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800362a:	4651      	mov	r1, sl
 800362c:	00ca      	lsls	r2, r1, #3
 800362e:	4610      	mov	r0, r2
 8003630:	4619      	mov	r1, r3
 8003632:	4603      	mov	r3, r0
 8003634:	4642      	mov	r2, r8
 8003636:	189b      	adds	r3, r3, r2
 8003638:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800363c:	464b      	mov	r3, r9
 800363e:	460a      	mov	r2, r1
 8003640:	eb42 0303 	adc.w	r3, r2, r3
 8003644:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	67bb      	str	r3, [r7, #120]	; 0x78
 8003652:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003660:	4649      	mov	r1, r9
 8003662:	008b      	lsls	r3, r1, #2
 8003664:	4641      	mov	r1, r8
 8003666:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800366a:	4641      	mov	r1, r8
 800366c:	008a      	lsls	r2, r1, #2
 800366e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003672:	f7fc fdc3 	bl	80001fc <__aeabi_uldivmod>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4b39      	ldr	r3, [pc, #228]	; (8003760 <UART_SetConfig+0x4e4>)
 800367c:	fba3 1302 	umull	r1, r3, r3, r2
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	2164      	movs	r1, #100	; 0x64
 8003684:	fb01 f303 	mul.w	r3, r1, r3
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	3332      	adds	r3, #50	; 0x32
 800368e:	4a34      	ldr	r2, [pc, #208]	; (8003760 <UART_SetConfig+0x4e4>)
 8003690:	fba2 2303 	umull	r2, r3, r2, r3
 8003694:	095b      	lsrs	r3, r3, #5
 8003696:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800369a:	441c      	add	r4, r3
 800369c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036a0:	2200      	movs	r2, #0
 80036a2:	673b      	str	r3, [r7, #112]	; 0x70
 80036a4:	677a      	str	r2, [r7, #116]	; 0x74
 80036a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80036aa:	4642      	mov	r2, r8
 80036ac:	464b      	mov	r3, r9
 80036ae:	1891      	adds	r1, r2, r2
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	415b      	adcs	r3, r3
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036ba:	4641      	mov	r1, r8
 80036bc:	1851      	adds	r1, r2, r1
 80036be:	6039      	str	r1, [r7, #0]
 80036c0:	4649      	mov	r1, r9
 80036c2:	414b      	adcs	r3, r1
 80036c4:	607b      	str	r3, [r7, #4]
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036d2:	4659      	mov	r1, fp
 80036d4:	00cb      	lsls	r3, r1, #3
 80036d6:	4651      	mov	r1, sl
 80036d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036dc:	4651      	mov	r1, sl
 80036de:	00ca      	lsls	r2, r1, #3
 80036e0:	4610      	mov	r0, r2
 80036e2:	4619      	mov	r1, r3
 80036e4:	4603      	mov	r3, r0
 80036e6:	4642      	mov	r2, r8
 80036e8:	189b      	adds	r3, r3, r2
 80036ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80036ec:	464b      	mov	r3, r9
 80036ee:	460a      	mov	r2, r1
 80036f0:	eb42 0303 	adc.w	r3, r2, r3
 80036f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	663b      	str	r3, [r7, #96]	; 0x60
 8003700:	667a      	str	r2, [r7, #100]	; 0x64
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800370e:	4649      	mov	r1, r9
 8003710:	008b      	lsls	r3, r1, #2
 8003712:	4641      	mov	r1, r8
 8003714:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003718:	4641      	mov	r1, r8
 800371a:	008a      	lsls	r2, r1, #2
 800371c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003720:	f7fc fd6c 	bl	80001fc <__aeabi_uldivmod>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	4b0d      	ldr	r3, [pc, #52]	; (8003760 <UART_SetConfig+0x4e4>)
 800372a:	fba3 1302 	umull	r1, r3, r3, r2
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	2164      	movs	r1, #100	; 0x64
 8003732:	fb01 f303 	mul.w	r3, r1, r3
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	3332      	adds	r3, #50	; 0x32
 800373c:	4a08      	ldr	r2, [pc, #32]	; (8003760 <UART_SetConfig+0x4e4>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	f003 020f 	and.w	r2, r3, #15
 8003748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4422      	add	r2, r4
 8003750:	609a      	str	r2, [r3, #8]
}
 8003752:	bf00      	nop
 8003754:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003758:	46bd      	mov	sp, r7
 800375a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800375e:	bf00      	nop
 8003760:	51eb851f 	.word	0x51eb851f

08003764 <findslot>:
 8003764:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <findslot+0x2c>)
 8003766:	b510      	push	{r4, lr}
 8003768:	4604      	mov	r4, r0
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	b118      	cbz	r0, 8003776 <findslot+0x12>
 800376e:	6983      	ldr	r3, [r0, #24]
 8003770:	b90b      	cbnz	r3, 8003776 <findslot+0x12>
 8003772:	f000 facd 	bl	8003d10 <__sinit>
 8003776:	2c13      	cmp	r4, #19
 8003778:	d807      	bhi.n	800378a <findslot+0x26>
 800377a:	4806      	ldr	r0, [pc, #24]	; (8003794 <findslot+0x30>)
 800377c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8003780:	3201      	adds	r2, #1
 8003782:	d002      	beq.n	800378a <findslot+0x26>
 8003784:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003788:	bd10      	pop	{r4, pc}
 800378a:	2000      	movs	r0, #0
 800378c:	e7fc      	b.n	8003788 <findslot+0x24>
 800378e:	bf00      	nop
 8003790:	20000074 	.word	0x20000074
 8003794:	2000097c 	.word	0x2000097c

08003798 <error>:
 8003798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379a:	4604      	mov	r4, r0
 800379c:	f000 fa5a 	bl	8003c54 <__errno>
 80037a0:	2613      	movs	r6, #19
 80037a2:	4605      	mov	r5, r0
 80037a4:	2700      	movs	r7, #0
 80037a6:	4630      	mov	r0, r6
 80037a8:	4639      	mov	r1, r7
 80037aa:	beab      	bkpt	0x00ab
 80037ac:	4606      	mov	r6, r0
 80037ae:	602e      	str	r6, [r5, #0]
 80037b0:	4620      	mov	r0, r4
 80037b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080037b4 <checkerror>:
 80037b4:	1c43      	adds	r3, r0, #1
 80037b6:	d101      	bne.n	80037bc <checkerror+0x8>
 80037b8:	f7ff bfee 	b.w	8003798 <error>
 80037bc:	4770      	bx	lr

080037be <_swiread>:
 80037be:	b530      	push	{r4, r5, lr}
 80037c0:	b085      	sub	sp, #20
 80037c2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80037c6:	9203      	str	r2, [sp, #12]
 80037c8:	2406      	movs	r4, #6
 80037ca:	ad01      	add	r5, sp, #4
 80037cc:	4620      	mov	r0, r4
 80037ce:	4629      	mov	r1, r5
 80037d0:	beab      	bkpt	0x00ab
 80037d2:	4604      	mov	r4, r0
 80037d4:	4620      	mov	r0, r4
 80037d6:	f7ff ffed 	bl	80037b4 <checkerror>
 80037da:	b005      	add	sp, #20
 80037dc:	bd30      	pop	{r4, r5, pc}

080037de <_read>:
 80037de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037e0:	4615      	mov	r5, r2
 80037e2:	9101      	str	r1, [sp, #4]
 80037e4:	f7ff ffbe 	bl	8003764 <findslot>
 80037e8:	9901      	ldr	r1, [sp, #4]
 80037ea:	4604      	mov	r4, r0
 80037ec:	b938      	cbnz	r0, 80037fe <_read+0x20>
 80037ee:	f000 fa31 	bl	8003c54 <__errno>
 80037f2:	2309      	movs	r3, #9
 80037f4:	6003      	str	r3, [r0, #0]
 80037f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037fa:	b003      	add	sp, #12
 80037fc:	bd30      	pop	{r4, r5, pc}
 80037fe:	6800      	ldr	r0, [r0, #0]
 8003800:	462a      	mov	r2, r5
 8003802:	f7ff ffdc 	bl	80037be <_swiread>
 8003806:	1c43      	adds	r3, r0, #1
 8003808:	d0f7      	beq.n	80037fa <_read+0x1c>
 800380a:	6863      	ldr	r3, [r4, #4]
 800380c:	1a2a      	subs	r2, r5, r0
 800380e:	4413      	add	r3, r2
 8003810:	6063      	str	r3, [r4, #4]
 8003812:	4610      	mov	r0, r2
 8003814:	e7f1      	b.n	80037fa <_read+0x1c>

08003816 <_swilseek>:
 8003816:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003818:	460c      	mov	r4, r1
 800381a:	4616      	mov	r6, r2
 800381c:	f7ff ffa2 	bl	8003764 <findslot>
 8003820:	4605      	mov	r5, r0
 8003822:	b940      	cbnz	r0, 8003836 <_swilseek+0x20>
 8003824:	f000 fa16 	bl	8003c54 <__errno>
 8003828:	2309      	movs	r3, #9
 800382a:	6003      	str	r3, [r0, #0]
 800382c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003830:	4620      	mov	r0, r4
 8003832:	b003      	add	sp, #12
 8003834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003836:	2e02      	cmp	r6, #2
 8003838:	d903      	bls.n	8003842 <_swilseek+0x2c>
 800383a:	f000 fa0b 	bl	8003c54 <__errno>
 800383e:	2316      	movs	r3, #22
 8003840:	e7f3      	b.n	800382a <_swilseek+0x14>
 8003842:	2e01      	cmp	r6, #1
 8003844:	d112      	bne.n	800386c <_swilseek+0x56>
 8003846:	6843      	ldr	r3, [r0, #4]
 8003848:	18e4      	adds	r4, r4, r3
 800384a:	d4f6      	bmi.n	800383a <_swilseek+0x24>
 800384c:	682b      	ldr	r3, [r5, #0]
 800384e:	260a      	movs	r6, #10
 8003850:	e9cd 3400 	strd	r3, r4, [sp]
 8003854:	466f      	mov	r7, sp
 8003856:	4630      	mov	r0, r6
 8003858:	4639      	mov	r1, r7
 800385a:	beab      	bkpt	0x00ab
 800385c:	4606      	mov	r6, r0
 800385e:	4630      	mov	r0, r6
 8003860:	f7ff ffa8 	bl	80037b4 <checkerror>
 8003864:	2800      	cmp	r0, #0
 8003866:	dbe1      	blt.n	800382c <_swilseek+0x16>
 8003868:	606c      	str	r4, [r5, #4]
 800386a:	e7e1      	b.n	8003830 <_swilseek+0x1a>
 800386c:	2e02      	cmp	r6, #2
 800386e:	d1ed      	bne.n	800384c <_swilseek+0x36>
 8003870:	6803      	ldr	r3, [r0, #0]
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	260c      	movs	r6, #12
 8003876:	466f      	mov	r7, sp
 8003878:	4630      	mov	r0, r6
 800387a:	4639      	mov	r1, r7
 800387c:	beab      	bkpt	0x00ab
 800387e:	4606      	mov	r6, r0
 8003880:	4630      	mov	r0, r6
 8003882:	f7ff ff97 	bl	80037b4 <checkerror>
 8003886:	1c43      	adds	r3, r0, #1
 8003888:	d0d0      	beq.n	800382c <_swilseek+0x16>
 800388a:	4404      	add	r4, r0
 800388c:	e7de      	b.n	800384c <_swilseek+0x36>

0800388e <_lseek>:
 800388e:	f7ff bfc2 	b.w	8003816 <_swilseek>

08003892 <_swiwrite>:
 8003892:	b530      	push	{r4, r5, lr}
 8003894:	b085      	sub	sp, #20
 8003896:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800389a:	9203      	str	r2, [sp, #12]
 800389c:	2405      	movs	r4, #5
 800389e:	ad01      	add	r5, sp, #4
 80038a0:	4620      	mov	r0, r4
 80038a2:	4629      	mov	r1, r5
 80038a4:	beab      	bkpt	0x00ab
 80038a6:	4604      	mov	r4, r0
 80038a8:	4620      	mov	r0, r4
 80038aa:	f7ff ff83 	bl	80037b4 <checkerror>
 80038ae:	b005      	add	sp, #20
 80038b0:	bd30      	pop	{r4, r5, pc}

080038b2 <_write>:
 80038b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038b4:	4615      	mov	r5, r2
 80038b6:	9101      	str	r1, [sp, #4]
 80038b8:	f7ff ff54 	bl	8003764 <findslot>
 80038bc:	9901      	ldr	r1, [sp, #4]
 80038be:	4604      	mov	r4, r0
 80038c0:	b930      	cbnz	r0, 80038d0 <_write+0x1e>
 80038c2:	f000 f9c7 	bl	8003c54 <__errno>
 80038c6:	2309      	movs	r3, #9
 80038c8:	6003      	str	r3, [r0, #0]
 80038ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038ce:	e012      	b.n	80038f6 <_write+0x44>
 80038d0:	6800      	ldr	r0, [r0, #0]
 80038d2:	462a      	mov	r2, r5
 80038d4:	f7ff ffdd 	bl	8003892 <_swiwrite>
 80038d8:	2800      	cmp	r0, #0
 80038da:	dbf6      	blt.n	80038ca <_write+0x18>
 80038dc:	6862      	ldr	r2, [r4, #4]
 80038de:	1a2b      	subs	r3, r5, r0
 80038e0:	441a      	add	r2, r3
 80038e2:	42a8      	cmp	r0, r5
 80038e4:	6062      	str	r2, [r4, #4]
 80038e6:	d105      	bne.n	80038f4 <_write+0x42>
 80038e8:	2000      	movs	r0, #0
 80038ea:	b003      	add	sp, #12
 80038ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038f0:	f7ff bf52 	b.w	8003798 <error>
 80038f4:	4618      	mov	r0, r3
 80038f6:	b003      	add	sp, #12
 80038f8:	bd30      	pop	{r4, r5, pc}

080038fa <_swiclose>:
 80038fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038fc:	2402      	movs	r4, #2
 80038fe:	9001      	str	r0, [sp, #4]
 8003900:	ad01      	add	r5, sp, #4
 8003902:	4620      	mov	r0, r4
 8003904:	4629      	mov	r1, r5
 8003906:	beab      	bkpt	0x00ab
 8003908:	4604      	mov	r4, r0
 800390a:	4620      	mov	r0, r4
 800390c:	f7ff ff52 	bl	80037b4 <checkerror>
 8003910:	b003      	add	sp, #12
 8003912:	bd30      	pop	{r4, r5, pc}

08003914 <_close>:
 8003914:	b538      	push	{r3, r4, r5, lr}
 8003916:	4605      	mov	r5, r0
 8003918:	f7ff ff24 	bl	8003764 <findslot>
 800391c:	4604      	mov	r4, r0
 800391e:	b930      	cbnz	r0, 800392e <_close+0x1a>
 8003920:	f000 f998 	bl	8003c54 <__errno>
 8003924:	2309      	movs	r3, #9
 8003926:	6003      	str	r3, [r0, #0]
 8003928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800392c:	bd38      	pop	{r3, r4, r5, pc}
 800392e:	3d01      	subs	r5, #1
 8003930:	2d01      	cmp	r5, #1
 8003932:	d809      	bhi.n	8003948 <_close+0x34>
 8003934:	4b09      	ldr	r3, [pc, #36]	; (800395c <_close+0x48>)
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	429a      	cmp	r2, r3
 800393c:	d104      	bne.n	8003948 <_close+0x34>
 800393e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003942:	6003      	str	r3, [r0, #0]
 8003944:	2000      	movs	r0, #0
 8003946:	e7f1      	b.n	800392c <_close+0x18>
 8003948:	6820      	ldr	r0, [r4, #0]
 800394a:	f7ff ffd6 	bl	80038fa <_swiclose>
 800394e:	2800      	cmp	r0, #0
 8003950:	d1ec      	bne.n	800392c <_close+0x18>
 8003952:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003956:	6023      	str	r3, [r4, #0]
 8003958:	e7e8      	b.n	800392c <_close+0x18>
 800395a:	bf00      	nop
 800395c:	2000097c 	.word	0x2000097c

08003960 <_swistat>:
 8003960:	b570      	push	{r4, r5, r6, lr}
 8003962:	460c      	mov	r4, r1
 8003964:	f7ff fefe 	bl	8003764 <findslot>
 8003968:	4605      	mov	r5, r0
 800396a:	b930      	cbnz	r0, 800397a <_swistat+0x1a>
 800396c:	f000 f972 	bl	8003c54 <__errno>
 8003970:	2309      	movs	r3, #9
 8003972:	6003      	str	r3, [r0, #0]
 8003974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003978:	bd70      	pop	{r4, r5, r6, pc}
 800397a:	6863      	ldr	r3, [r4, #4]
 800397c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003980:	6063      	str	r3, [r4, #4]
 8003982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003986:	64a3      	str	r3, [r4, #72]	; 0x48
 8003988:	260c      	movs	r6, #12
 800398a:	4630      	mov	r0, r6
 800398c:	4629      	mov	r1, r5
 800398e:	beab      	bkpt	0x00ab
 8003990:	4605      	mov	r5, r0
 8003992:	4628      	mov	r0, r5
 8003994:	f7ff ff0e 	bl	80037b4 <checkerror>
 8003998:	1c43      	adds	r3, r0, #1
 800399a:	bf1c      	itt	ne
 800399c:	6120      	strne	r0, [r4, #16]
 800399e:	2000      	movne	r0, #0
 80039a0:	e7ea      	b.n	8003978 <_swistat+0x18>

080039a2 <_stat>:
 80039a2:	b538      	push	{r3, r4, r5, lr}
 80039a4:	460d      	mov	r5, r1
 80039a6:	4604      	mov	r4, r0
 80039a8:	2258      	movs	r2, #88	; 0x58
 80039aa:	2100      	movs	r1, #0
 80039ac:	4628      	mov	r0, r5
 80039ae:	f000 fa74 	bl	8003e9a <memset>
 80039b2:	4620      	mov	r0, r4
 80039b4:	2100      	movs	r1, #0
 80039b6:	f000 f811 	bl	80039dc <_swiopen>
 80039ba:	1c43      	adds	r3, r0, #1
 80039bc:	4604      	mov	r4, r0
 80039be:	d00b      	beq.n	80039d8 <_stat+0x36>
 80039c0:	686b      	ldr	r3, [r5, #4]
 80039c2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80039c6:	606b      	str	r3, [r5, #4]
 80039c8:	4629      	mov	r1, r5
 80039ca:	f7ff ffc9 	bl	8003960 <_swistat>
 80039ce:	4605      	mov	r5, r0
 80039d0:	4620      	mov	r0, r4
 80039d2:	f7ff ff9f 	bl	8003914 <_close>
 80039d6:	462c      	mov	r4, r5
 80039d8:	4620      	mov	r0, r4
 80039da:	bd38      	pop	{r3, r4, r5, pc}

080039dc <_swiopen>:
 80039dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039e0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003a8c <_swiopen+0xb0>
 80039e4:	b097      	sub	sp, #92	; 0x5c
 80039e6:	4607      	mov	r7, r0
 80039e8:	460e      	mov	r6, r1
 80039ea:	2500      	movs	r5, #0
 80039ec:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80039f0:	1c61      	adds	r1, r4, #1
 80039f2:	d037      	beq.n	8003a64 <_swiopen+0x88>
 80039f4:	3501      	adds	r5, #1
 80039f6:	2d14      	cmp	r5, #20
 80039f8:	d1f8      	bne.n	80039ec <_swiopen+0x10>
 80039fa:	f000 f92b 	bl	8003c54 <__errno>
 80039fe:	2318      	movs	r3, #24
 8003a00:	6003      	str	r3, [r0, #0]
 8003a02:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003a06:	e03d      	b.n	8003a84 <_swiopen+0xa8>
 8003a08:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8003a0c:	f240 6301 	movw	r3, #1537	; 0x601
 8003a10:	07b2      	lsls	r2, r6, #30
 8003a12:	bf48      	it	mi
 8003a14:	f044 0402 	orrmi.w	r4, r4, #2
 8003a18:	421e      	tst	r6, r3
 8003a1a:	bf18      	it	ne
 8003a1c:	f044 0404 	orrne.w	r4, r4, #4
 8003a20:	0733      	lsls	r3, r6, #28
 8003a22:	bf48      	it	mi
 8003a24:	f024 0404 	bicmi.w	r4, r4, #4
 8003a28:	4638      	mov	r0, r7
 8003a2a:	bf48      	it	mi
 8003a2c:	f044 0408 	orrmi.w	r4, r4, #8
 8003a30:	9700      	str	r7, [sp, #0]
 8003a32:	f7fc fbdb 	bl	80001ec <strlen>
 8003a36:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8003a3a:	2401      	movs	r4, #1
 8003a3c:	4620      	mov	r0, r4
 8003a3e:	4649      	mov	r1, r9
 8003a40:	beab      	bkpt	0x00ab
 8003a42:	4604      	mov	r4, r0
 8003a44:	2c00      	cmp	r4, #0
 8003a46:	db08      	blt.n	8003a5a <_swiopen+0x7e>
 8003a48:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8003a4c:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8003a50:	2300      	movs	r3, #0
 8003a52:	f8c8 3004 	str.w	r3, [r8, #4]
 8003a56:	462c      	mov	r4, r5
 8003a58:	e014      	b.n	8003a84 <_swiopen+0xa8>
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	f7ff fe9c 	bl	8003798 <error>
 8003a60:	4604      	mov	r4, r0
 8003a62:	e00f      	b.n	8003a84 <_swiopen+0xa8>
 8003a64:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8003a68:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003a6c:	46e9      	mov	r9, sp
 8003a6e:	d1cb      	bne.n	8003a08 <_swiopen+0x2c>
 8003a70:	4649      	mov	r1, r9
 8003a72:	4638      	mov	r0, r7
 8003a74:	f7ff ff95 	bl	80039a2 <_stat>
 8003a78:	3001      	adds	r0, #1
 8003a7a:	d0c5      	beq.n	8003a08 <_swiopen+0x2c>
 8003a7c:	f000 f8ea 	bl	8003c54 <__errno>
 8003a80:	2311      	movs	r3, #17
 8003a82:	6003      	str	r3, [r0, #0]
 8003a84:	4620      	mov	r0, r4
 8003a86:	b017      	add	sp, #92	; 0x5c
 8003a88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a8c:	2000097c 	.word	0x2000097c

08003a90 <_get_semihosting_exts>:
 8003a90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003a94:	4606      	mov	r6, r0
 8003a96:	460f      	mov	r7, r1
 8003a98:	482a      	ldr	r0, [pc, #168]	; (8003b44 <_get_semihosting_exts+0xb4>)
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	4615      	mov	r5, r2
 8003a9e:	f7ff ff9d 	bl	80039dc <_swiopen>
 8003aa2:	462a      	mov	r2, r5
 8003aa4:	4604      	mov	r4, r0
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	4630      	mov	r0, r6
 8003aaa:	f000 f9f6 	bl	8003e9a <memset>
 8003aae:	1c63      	adds	r3, r4, #1
 8003ab0:	d016      	beq.n	8003ae0 <_get_semihosting_exts+0x50>
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	f7ff fe56 	bl	8003764 <findslot>
 8003ab8:	f04f 090c 	mov.w	r9, #12
 8003abc:	4680      	mov	r8, r0
 8003abe:	4648      	mov	r0, r9
 8003ac0:	4641      	mov	r1, r8
 8003ac2:	beab      	bkpt	0x00ab
 8003ac4:	4680      	mov	r8, r0
 8003ac6:	4640      	mov	r0, r8
 8003ac8:	f7ff fe74 	bl	80037b4 <checkerror>
 8003acc:	2803      	cmp	r0, #3
 8003ace:	dd02      	ble.n	8003ad6 <_get_semihosting_exts+0x46>
 8003ad0:	1ec3      	subs	r3, r0, #3
 8003ad2:	42ab      	cmp	r3, r5
 8003ad4:	dc08      	bgt.n	8003ae8 <_get_semihosting_exts+0x58>
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	f7ff ff1c 	bl	8003914 <_close>
 8003adc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003ae0:	4620      	mov	r0, r4
 8003ae2:	b003      	add	sp, #12
 8003ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ae8:	2204      	movs	r2, #4
 8003aea:	eb0d 0102 	add.w	r1, sp, r2
 8003aee:	4620      	mov	r0, r4
 8003af0:	f7ff fe75 	bl	80037de <_read>
 8003af4:	2803      	cmp	r0, #3
 8003af6:	ddee      	ble.n	8003ad6 <_get_semihosting_exts+0x46>
 8003af8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003afc:	2b53      	cmp	r3, #83	; 0x53
 8003afe:	d1ea      	bne.n	8003ad6 <_get_semihosting_exts+0x46>
 8003b00:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003b04:	2b48      	cmp	r3, #72	; 0x48
 8003b06:	d1e6      	bne.n	8003ad6 <_get_semihosting_exts+0x46>
 8003b08:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003b0c:	2b46      	cmp	r3, #70	; 0x46
 8003b0e:	d1e2      	bne.n	8003ad6 <_get_semihosting_exts+0x46>
 8003b10:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003b14:	2b42      	cmp	r3, #66	; 0x42
 8003b16:	d1de      	bne.n	8003ad6 <_get_semihosting_exts+0x46>
 8003b18:	2201      	movs	r2, #1
 8003b1a:	4639      	mov	r1, r7
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	f7ff fe7a 	bl	8003816 <_swilseek>
 8003b22:	2800      	cmp	r0, #0
 8003b24:	dbd7      	blt.n	8003ad6 <_get_semihosting_exts+0x46>
 8003b26:	462a      	mov	r2, r5
 8003b28:	4631      	mov	r1, r6
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	f7ff fe57 	bl	80037de <_read>
 8003b30:	4605      	mov	r5, r0
 8003b32:	4620      	mov	r0, r4
 8003b34:	f7ff feee 	bl	8003914 <_close>
 8003b38:	4628      	mov	r0, r5
 8003b3a:	f7ff fe3b 	bl	80037b4 <checkerror>
 8003b3e:	4604      	mov	r4, r0
 8003b40:	e7ce      	b.n	8003ae0 <_get_semihosting_exts+0x50>
 8003b42:	bf00      	nop
 8003b44:	0800437c 	.word	0x0800437c

08003b48 <initialise_semihosting_exts>:
 8003b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b4a:	4d0a      	ldr	r5, [pc, #40]	; (8003b74 <initialise_semihosting_exts+0x2c>)
 8003b4c:	4c0a      	ldr	r4, [pc, #40]	; (8003b78 <initialise_semihosting_exts+0x30>)
 8003b4e:	2100      	movs	r1, #0
 8003b50:	2201      	movs	r2, #1
 8003b52:	a801      	add	r0, sp, #4
 8003b54:	6029      	str	r1, [r5, #0]
 8003b56:	6022      	str	r2, [r4, #0]
 8003b58:	f7ff ff9a 	bl	8003a90 <_get_semihosting_exts>
 8003b5c:	2800      	cmp	r0, #0
 8003b5e:	dd07      	ble.n	8003b70 <initialise_semihosting_exts+0x28>
 8003b60:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003b64:	f003 0201 	and.w	r2, r3, #1
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	602a      	str	r2, [r5, #0]
 8003b6e:	6023      	str	r3, [r4, #0]
 8003b70:	b003      	add	sp, #12
 8003b72:	bd30      	pop	{r4, r5, pc}
 8003b74:	2000006c 	.word	0x2000006c
 8003b78:	20000070 	.word	0x20000070

08003b7c <_has_ext_stdout_stderr>:
 8003b7c:	b510      	push	{r4, lr}
 8003b7e:	4c04      	ldr	r4, [pc, #16]	; (8003b90 <_has_ext_stdout_stderr+0x14>)
 8003b80:	6823      	ldr	r3, [r4, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	da01      	bge.n	8003b8a <_has_ext_stdout_stderr+0xe>
 8003b86:	f7ff ffdf 	bl	8003b48 <initialise_semihosting_exts>
 8003b8a:	6820      	ldr	r0, [r4, #0]
 8003b8c:	bd10      	pop	{r4, pc}
 8003b8e:	bf00      	nop
 8003b90:	20000070 	.word	0x20000070

08003b94 <initialise_monitor_handles>:
 8003b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b98:	b085      	sub	sp, #20
 8003b9a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8003c4c <initialise_monitor_handles+0xb8>
 8003b9e:	f8cd 9004 	str.w	r9, [sp, #4]
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	2400      	movs	r4, #0
 8003ba6:	9303      	str	r3, [sp, #12]
 8003ba8:	af01      	add	r7, sp, #4
 8003baa:	9402      	str	r4, [sp, #8]
 8003bac:	2501      	movs	r5, #1
 8003bae:	4628      	mov	r0, r5
 8003bb0:	4639      	mov	r1, r7
 8003bb2:	beab      	bkpt	0x00ab
 8003bb4:	4605      	mov	r5, r0
 8003bb6:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8003c50 <initialise_monitor_handles+0xbc>
 8003bba:	4623      	mov	r3, r4
 8003bbc:	4c20      	ldr	r4, [pc, #128]	; (8003c40 <initialise_monitor_handles+0xac>)
 8003bbe:	f8c8 5000 	str.w	r5, [r8]
 8003bc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bc6:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	2b14      	cmp	r3, #20
 8003bce:	d1fa      	bne.n	8003bc6 <initialise_monitor_handles+0x32>
 8003bd0:	f7ff ffd4 	bl	8003b7c <_has_ext_stdout_stderr>
 8003bd4:	4d1b      	ldr	r5, [pc, #108]	; (8003c44 <initialise_monitor_handles+0xb0>)
 8003bd6:	b1d0      	cbz	r0, 8003c0e <initialise_monitor_handles+0x7a>
 8003bd8:	f04f 0a03 	mov.w	sl, #3
 8003bdc:	2304      	movs	r3, #4
 8003bde:	f8cd 9004 	str.w	r9, [sp, #4]
 8003be2:	2601      	movs	r6, #1
 8003be4:	f8cd a00c 	str.w	sl, [sp, #12]
 8003be8:	9302      	str	r3, [sp, #8]
 8003bea:	4630      	mov	r0, r6
 8003bec:	4639      	mov	r1, r7
 8003bee:	beab      	bkpt	0x00ab
 8003bf0:	4683      	mov	fp, r0
 8003bf2:	4b15      	ldr	r3, [pc, #84]	; (8003c48 <initialise_monitor_handles+0xb4>)
 8003bf4:	f8cd 9004 	str.w	r9, [sp, #4]
 8003bf8:	f8c3 b000 	str.w	fp, [r3]
 8003bfc:	2308      	movs	r3, #8
 8003bfe:	f8cd a00c 	str.w	sl, [sp, #12]
 8003c02:	9302      	str	r3, [sp, #8]
 8003c04:	4630      	mov	r0, r6
 8003c06:	4639      	mov	r1, r7
 8003c08:	beab      	bkpt	0x00ab
 8003c0a:	4606      	mov	r6, r0
 8003c0c:	602e      	str	r6, [r5, #0]
 8003c0e:	682b      	ldr	r3, [r5, #0]
 8003c10:	3301      	adds	r3, #1
 8003c12:	bf02      	ittt	eq
 8003c14:	4b0c      	ldreq	r3, [pc, #48]	; (8003c48 <initialise_monitor_handles+0xb4>)
 8003c16:	681b      	ldreq	r3, [r3, #0]
 8003c18:	602b      	streq	r3, [r5, #0]
 8003c1a:	2600      	movs	r6, #0
 8003c1c:	f8d8 3000 	ldr.w	r3, [r8]
 8003c20:	6023      	str	r3, [r4, #0]
 8003c22:	6066      	str	r6, [r4, #4]
 8003c24:	f7ff ffaa 	bl	8003b7c <_has_ext_stdout_stderr>
 8003c28:	b130      	cbz	r0, 8003c38 <initialise_monitor_handles+0xa4>
 8003c2a:	4b07      	ldr	r3, [pc, #28]	; (8003c48 <initialise_monitor_handles+0xb4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8003c32:	682b      	ldr	r3, [r5, #0]
 8003c34:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003c38:	b005      	add	sp, #20
 8003c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c3e:	bf00      	nop
 8003c40:	2000097c 	.word	0x2000097c
 8003c44:	20000970 	.word	0x20000970
 8003c48:	20000978 	.word	0x20000978
 8003c4c:	08004392 	.word	0x08004392
 8003c50:	20000974 	.word	0x20000974

08003c54 <__errno>:
 8003c54:	4b01      	ldr	r3, [pc, #4]	; (8003c5c <__errno+0x8>)
 8003c56:	6818      	ldr	r0, [r3, #0]
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	20000074 	.word	0x20000074

08003c60 <std>:
 8003c60:	2300      	movs	r3, #0
 8003c62:	b510      	push	{r4, lr}
 8003c64:	4604      	mov	r4, r0
 8003c66:	e9c0 3300 	strd	r3, r3, [r0]
 8003c6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c6e:	6083      	str	r3, [r0, #8]
 8003c70:	8181      	strh	r1, [r0, #12]
 8003c72:	6643      	str	r3, [r0, #100]	; 0x64
 8003c74:	81c2      	strh	r2, [r0, #14]
 8003c76:	6183      	str	r3, [r0, #24]
 8003c78:	4619      	mov	r1, r3
 8003c7a:	2208      	movs	r2, #8
 8003c7c:	305c      	adds	r0, #92	; 0x5c
 8003c7e:	f000 f90c 	bl	8003e9a <memset>
 8003c82:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <std+0x38>)
 8003c84:	6263      	str	r3, [r4, #36]	; 0x24
 8003c86:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <std+0x3c>)
 8003c88:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c8a:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <std+0x40>)
 8003c8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c8e:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <std+0x44>)
 8003c90:	6224      	str	r4, [r4, #32]
 8003c92:	6323      	str	r3, [r4, #48]	; 0x30
 8003c94:	bd10      	pop	{r4, pc}
 8003c96:	bf00      	nop
 8003c98:	08003ff5 	.word	0x08003ff5
 8003c9c:	08004017 	.word	0x08004017
 8003ca0:	0800404f 	.word	0x0800404f
 8003ca4:	08004073 	.word	0x08004073

08003ca8 <_cleanup_r>:
 8003ca8:	4901      	ldr	r1, [pc, #4]	; (8003cb0 <_cleanup_r+0x8>)
 8003caa:	f000 b8af 	b.w	8003e0c <_fwalk_reent>
 8003cae:	bf00      	nop
 8003cb0:	080041dd 	.word	0x080041dd

08003cb4 <__sfmoreglue>:
 8003cb4:	b570      	push	{r4, r5, r6, lr}
 8003cb6:	2268      	movs	r2, #104	; 0x68
 8003cb8:	1e4d      	subs	r5, r1, #1
 8003cba:	4355      	muls	r5, r2
 8003cbc:	460e      	mov	r6, r1
 8003cbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003cc2:	f000 f913 	bl	8003eec <_malloc_r>
 8003cc6:	4604      	mov	r4, r0
 8003cc8:	b140      	cbz	r0, 8003cdc <__sfmoreglue+0x28>
 8003cca:	2100      	movs	r1, #0
 8003ccc:	e9c0 1600 	strd	r1, r6, [r0]
 8003cd0:	300c      	adds	r0, #12
 8003cd2:	60a0      	str	r0, [r4, #8]
 8003cd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003cd8:	f000 f8df 	bl	8003e9a <memset>
 8003cdc:	4620      	mov	r0, r4
 8003cde:	bd70      	pop	{r4, r5, r6, pc}

08003ce0 <__sfp_lock_acquire>:
 8003ce0:	4801      	ldr	r0, [pc, #4]	; (8003ce8 <__sfp_lock_acquire+0x8>)
 8003ce2:	f000 b8d8 	b.w	8003e96 <__retarget_lock_acquire_recursive>
 8003ce6:	bf00      	nop
 8003ce8:	20000a1d 	.word	0x20000a1d

08003cec <__sfp_lock_release>:
 8003cec:	4801      	ldr	r0, [pc, #4]	; (8003cf4 <__sfp_lock_release+0x8>)
 8003cee:	f000 b8d3 	b.w	8003e98 <__retarget_lock_release_recursive>
 8003cf2:	bf00      	nop
 8003cf4:	20000a1d 	.word	0x20000a1d

08003cf8 <__sinit_lock_acquire>:
 8003cf8:	4801      	ldr	r0, [pc, #4]	; (8003d00 <__sinit_lock_acquire+0x8>)
 8003cfa:	f000 b8cc 	b.w	8003e96 <__retarget_lock_acquire_recursive>
 8003cfe:	bf00      	nop
 8003d00:	20000a1e 	.word	0x20000a1e

08003d04 <__sinit_lock_release>:
 8003d04:	4801      	ldr	r0, [pc, #4]	; (8003d0c <__sinit_lock_release+0x8>)
 8003d06:	f000 b8c7 	b.w	8003e98 <__retarget_lock_release_recursive>
 8003d0a:	bf00      	nop
 8003d0c:	20000a1e 	.word	0x20000a1e

08003d10 <__sinit>:
 8003d10:	b510      	push	{r4, lr}
 8003d12:	4604      	mov	r4, r0
 8003d14:	f7ff fff0 	bl	8003cf8 <__sinit_lock_acquire>
 8003d18:	69a3      	ldr	r3, [r4, #24]
 8003d1a:	b11b      	cbz	r3, 8003d24 <__sinit+0x14>
 8003d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d20:	f7ff bff0 	b.w	8003d04 <__sinit_lock_release>
 8003d24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003d28:	6523      	str	r3, [r4, #80]	; 0x50
 8003d2a:	4b13      	ldr	r3, [pc, #76]	; (8003d78 <__sinit+0x68>)
 8003d2c:	4a13      	ldr	r2, [pc, #76]	; (8003d7c <__sinit+0x6c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	62a2      	str	r2, [r4, #40]	; 0x28
 8003d32:	42a3      	cmp	r3, r4
 8003d34:	bf04      	itt	eq
 8003d36:	2301      	moveq	r3, #1
 8003d38:	61a3      	streq	r3, [r4, #24]
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f000 f820 	bl	8003d80 <__sfp>
 8003d40:	6060      	str	r0, [r4, #4]
 8003d42:	4620      	mov	r0, r4
 8003d44:	f000 f81c 	bl	8003d80 <__sfp>
 8003d48:	60a0      	str	r0, [r4, #8]
 8003d4a:	4620      	mov	r0, r4
 8003d4c:	f000 f818 	bl	8003d80 <__sfp>
 8003d50:	2200      	movs	r2, #0
 8003d52:	60e0      	str	r0, [r4, #12]
 8003d54:	2104      	movs	r1, #4
 8003d56:	6860      	ldr	r0, [r4, #4]
 8003d58:	f7ff ff82 	bl	8003c60 <std>
 8003d5c:	68a0      	ldr	r0, [r4, #8]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	2109      	movs	r1, #9
 8003d62:	f7ff ff7d 	bl	8003c60 <std>
 8003d66:	68e0      	ldr	r0, [r4, #12]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	2112      	movs	r1, #18
 8003d6c:	f7ff ff78 	bl	8003c60 <std>
 8003d70:	2301      	movs	r3, #1
 8003d72:	61a3      	str	r3, [r4, #24]
 8003d74:	e7d2      	b.n	8003d1c <__sinit+0xc>
 8003d76:	bf00      	nop
 8003d78:	080043f8 	.word	0x080043f8
 8003d7c:	08003ca9 	.word	0x08003ca9

08003d80 <__sfp>:
 8003d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d82:	4607      	mov	r7, r0
 8003d84:	f7ff ffac 	bl	8003ce0 <__sfp_lock_acquire>
 8003d88:	4b1e      	ldr	r3, [pc, #120]	; (8003e04 <__sfp+0x84>)
 8003d8a:	681e      	ldr	r6, [r3, #0]
 8003d8c:	69b3      	ldr	r3, [r6, #24]
 8003d8e:	b913      	cbnz	r3, 8003d96 <__sfp+0x16>
 8003d90:	4630      	mov	r0, r6
 8003d92:	f7ff ffbd 	bl	8003d10 <__sinit>
 8003d96:	3648      	adds	r6, #72	; 0x48
 8003d98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	d503      	bpl.n	8003da8 <__sfp+0x28>
 8003da0:	6833      	ldr	r3, [r6, #0]
 8003da2:	b30b      	cbz	r3, 8003de8 <__sfp+0x68>
 8003da4:	6836      	ldr	r6, [r6, #0]
 8003da6:	e7f7      	b.n	8003d98 <__sfp+0x18>
 8003da8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003dac:	b9d5      	cbnz	r5, 8003de4 <__sfp+0x64>
 8003dae:	4b16      	ldr	r3, [pc, #88]	; (8003e08 <__sfp+0x88>)
 8003db0:	60e3      	str	r3, [r4, #12]
 8003db2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003db6:	6665      	str	r5, [r4, #100]	; 0x64
 8003db8:	f000 f86c 	bl	8003e94 <__retarget_lock_init_recursive>
 8003dbc:	f7ff ff96 	bl	8003cec <__sfp_lock_release>
 8003dc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003dc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003dc8:	6025      	str	r5, [r4, #0]
 8003dca:	61a5      	str	r5, [r4, #24]
 8003dcc:	2208      	movs	r2, #8
 8003dce:	4629      	mov	r1, r5
 8003dd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003dd4:	f000 f861 	bl	8003e9a <memset>
 8003dd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003ddc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003de0:	4620      	mov	r0, r4
 8003de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003de4:	3468      	adds	r4, #104	; 0x68
 8003de6:	e7d9      	b.n	8003d9c <__sfp+0x1c>
 8003de8:	2104      	movs	r1, #4
 8003dea:	4638      	mov	r0, r7
 8003dec:	f7ff ff62 	bl	8003cb4 <__sfmoreglue>
 8003df0:	4604      	mov	r4, r0
 8003df2:	6030      	str	r0, [r6, #0]
 8003df4:	2800      	cmp	r0, #0
 8003df6:	d1d5      	bne.n	8003da4 <__sfp+0x24>
 8003df8:	f7ff ff78 	bl	8003cec <__sfp_lock_release>
 8003dfc:	230c      	movs	r3, #12
 8003dfe:	603b      	str	r3, [r7, #0]
 8003e00:	e7ee      	b.n	8003de0 <__sfp+0x60>
 8003e02:	bf00      	nop
 8003e04:	080043f8 	.word	0x080043f8
 8003e08:	ffff0001 	.word	0xffff0001

08003e0c <_fwalk_reent>:
 8003e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e10:	4606      	mov	r6, r0
 8003e12:	4688      	mov	r8, r1
 8003e14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003e18:	2700      	movs	r7, #0
 8003e1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e1e:	f1b9 0901 	subs.w	r9, r9, #1
 8003e22:	d505      	bpl.n	8003e30 <_fwalk_reent+0x24>
 8003e24:	6824      	ldr	r4, [r4, #0]
 8003e26:	2c00      	cmp	r4, #0
 8003e28:	d1f7      	bne.n	8003e1a <_fwalk_reent+0xe>
 8003e2a:	4638      	mov	r0, r7
 8003e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e30:	89ab      	ldrh	r3, [r5, #12]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d907      	bls.n	8003e46 <_fwalk_reent+0x3a>
 8003e36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	d003      	beq.n	8003e46 <_fwalk_reent+0x3a>
 8003e3e:	4629      	mov	r1, r5
 8003e40:	4630      	mov	r0, r6
 8003e42:	47c0      	blx	r8
 8003e44:	4307      	orrs	r7, r0
 8003e46:	3568      	adds	r5, #104	; 0x68
 8003e48:	e7e9      	b.n	8003e1e <_fwalk_reent+0x12>
	...

08003e4c <__libc_init_array>:
 8003e4c:	b570      	push	{r4, r5, r6, lr}
 8003e4e:	4d0d      	ldr	r5, [pc, #52]	; (8003e84 <__libc_init_array+0x38>)
 8003e50:	4c0d      	ldr	r4, [pc, #52]	; (8003e88 <__libc_init_array+0x3c>)
 8003e52:	1b64      	subs	r4, r4, r5
 8003e54:	10a4      	asrs	r4, r4, #2
 8003e56:	2600      	movs	r6, #0
 8003e58:	42a6      	cmp	r6, r4
 8003e5a:	d109      	bne.n	8003e70 <__libc_init_array+0x24>
 8003e5c:	4d0b      	ldr	r5, [pc, #44]	; (8003e8c <__libc_init_array+0x40>)
 8003e5e:	4c0c      	ldr	r4, [pc, #48]	; (8003e90 <__libc_init_array+0x44>)
 8003e60:	f000 fa74 	bl	800434c <_init>
 8003e64:	1b64      	subs	r4, r4, r5
 8003e66:	10a4      	asrs	r4, r4, #2
 8003e68:	2600      	movs	r6, #0
 8003e6a:	42a6      	cmp	r6, r4
 8003e6c:	d105      	bne.n	8003e7a <__libc_init_array+0x2e>
 8003e6e:	bd70      	pop	{r4, r5, r6, pc}
 8003e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e74:	4798      	blx	r3
 8003e76:	3601      	adds	r6, #1
 8003e78:	e7ee      	b.n	8003e58 <__libc_init_array+0xc>
 8003e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e7e:	4798      	blx	r3
 8003e80:	3601      	adds	r6, #1
 8003e82:	e7f2      	b.n	8003e6a <__libc_init_array+0x1e>
 8003e84:	08004404 	.word	0x08004404
 8003e88:	08004404 	.word	0x08004404
 8003e8c:	08004404 	.word	0x08004404
 8003e90:	08004408 	.word	0x08004408

08003e94 <__retarget_lock_init_recursive>:
 8003e94:	4770      	bx	lr

08003e96 <__retarget_lock_acquire_recursive>:
 8003e96:	4770      	bx	lr

08003e98 <__retarget_lock_release_recursive>:
 8003e98:	4770      	bx	lr

08003e9a <memset>:
 8003e9a:	4402      	add	r2, r0
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d100      	bne.n	8003ea4 <memset+0xa>
 8003ea2:	4770      	bx	lr
 8003ea4:	f803 1b01 	strb.w	r1, [r3], #1
 8003ea8:	e7f9      	b.n	8003e9e <memset+0x4>
	...

08003eac <sbrk_aligned>:
 8003eac:	b570      	push	{r4, r5, r6, lr}
 8003eae:	4e0e      	ldr	r6, [pc, #56]	; (8003ee8 <sbrk_aligned+0x3c>)
 8003eb0:	460c      	mov	r4, r1
 8003eb2:	6831      	ldr	r1, [r6, #0]
 8003eb4:	4605      	mov	r5, r0
 8003eb6:	b911      	cbnz	r1, 8003ebe <sbrk_aligned+0x12>
 8003eb8:	f000 f88c 	bl	8003fd4 <_sbrk_r>
 8003ebc:	6030      	str	r0, [r6, #0]
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	f000 f887 	bl	8003fd4 <_sbrk_r>
 8003ec6:	1c43      	adds	r3, r0, #1
 8003ec8:	d00a      	beq.n	8003ee0 <sbrk_aligned+0x34>
 8003eca:	1cc4      	adds	r4, r0, #3
 8003ecc:	f024 0403 	bic.w	r4, r4, #3
 8003ed0:	42a0      	cmp	r0, r4
 8003ed2:	d007      	beq.n	8003ee4 <sbrk_aligned+0x38>
 8003ed4:	1a21      	subs	r1, r4, r0
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	f000 f87c 	bl	8003fd4 <_sbrk_r>
 8003edc:	3001      	adds	r0, #1
 8003ede:	d101      	bne.n	8003ee4 <sbrk_aligned+0x38>
 8003ee0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	bd70      	pop	{r4, r5, r6, pc}
 8003ee8:	20000a24 	.word	0x20000a24

08003eec <_malloc_r>:
 8003eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef0:	1ccd      	adds	r5, r1, #3
 8003ef2:	f025 0503 	bic.w	r5, r5, #3
 8003ef6:	3508      	adds	r5, #8
 8003ef8:	2d0c      	cmp	r5, #12
 8003efa:	bf38      	it	cc
 8003efc:	250c      	movcc	r5, #12
 8003efe:	2d00      	cmp	r5, #0
 8003f00:	4607      	mov	r7, r0
 8003f02:	db01      	blt.n	8003f08 <_malloc_r+0x1c>
 8003f04:	42a9      	cmp	r1, r5
 8003f06:	d905      	bls.n	8003f14 <_malloc_r+0x28>
 8003f08:	230c      	movs	r3, #12
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	2600      	movs	r6, #0
 8003f0e:	4630      	mov	r0, r6
 8003f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f14:	4e2e      	ldr	r6, [pc, #184]	; (8003fd0 <_malloc_r+0xe4>)
 8003f16:	f000 f9af 	bl	8004278 <__malloc_lock>
 8003f1a:	6833      	ldr	r3, [r6, #0]
 8003f1c:	461c      	mov	r4, r3
 8003f1e:	bb34      	cbnz	r4, 8003f6e <_malloc_r+0x82>
 8003f20:	4629      	mov	r1, r5
 8003f22:	4638      	mov	r0, r7
 8003f24:	f7ff ffc2 	bl	8003eac <sbrk_aligned>
 8003f28:	1c43      	adds	r3, r0, #1
 8003f2a:	4604      	mov	r4, r0
 8003f2c:	d14d      	bne.n	8003fca <_malloc_r+0xde>
 8003f2e:	6834      	ldr	r4, [r6, #0]
 8003f30:	4626      	mov	r6, r4
 8003f32:	2e00      	cmp	r6, #0
 8003f34:	d140      	bne.n	8003fb8 <_malloc_r+0xcc>
 8003f36:	6823      	ldr	r3, [r4, #0]
 8003f38:	4631      	mov	r1, r6
 8003f3a:	4638      	mov	r0, r7
 8003f3c:	eb04 0803 	add.w	r8, r4, r3
 8003f40:	f000 f848 	bl	8003fd4 <_sbrk_r>
 8003f44:	4580      	cmp	r8, r0
 8003f46:	d13a      	bne.n	8003fbe <_malloc_r+0xd2>
 8003f48:	6821      	ldr	r1, [r4, #0]
 8003f4a:	3503      	adds	r5, #3
 8003f4c:	1a6d      	subs	r5, r5, r1
 8003f4e:	f025 0503 	bic.w	r5, r5, #3
 8003f52:	3508      	adds	r5, #8
 8003f54:	2d0c      	cmp	r5, #12
 8003f56:	bf38      	it	cc
 8003f58:	250c      	movcc	r5, #12
 8003f5a:	4629      	mov	r1, r5
 8003f5c:	4638      	mov	r0, r7
 8003f5e:	f7ff ffa5 	bl	8003eac <sbrk_aligned>
 8003f62:	3001      	adds	r0, #1
 8003f64:	d02b      	beq.n	8003fbe <_malloc_r+0xd2>
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	442b      	add	r3, r5
 8003f6a:	6023      	str	r3, [r4, #0]
 8003f6c:	e00e      	b.n	8003f8c <_malloc_r+0xa0>
 8003f6e:	6822      	ldr	r2, [r4, #0]
 8003f70:	1b52      	subs	r2, r2, r5
 8003f72:	d41e      	bmi.n	8003fb2 <_malloc_r+0xc6>
 8003f74:	2a0b      	cmp	r2, #11
 8003f76:	d916      	bls.n	8003fa6 <_malloc_r+0xba>
 8003f78:	1961      	adds	r1, r4, r5
 8003f7a:	42a3      	cmp	r3, r4
 8003f7c:	6025      	str	r5, [r4, #0]
 8003f7e:	bf18      	it	ne
 8003f80:	6059      	strne	r1, [r3, #4]
 8003f82:	6863      	ldr	r3, [r4, #4]
 8003f84:	bf08      	it	eq
 8003f86:	6031      	streq	r1, [r6, #0]
 8003f88:	5162      	str	r2, [r4, r5]
 8003f8a:	604b      	str	r3, [r1, #4]
 8003f8c:	4638      	mov	r0, r7
 8003f8e:	f104 060b 	add.w	r6, r4, #11
 8003f92:	f000 f977 	bl	8004284 <__malloc_unlock>
 8003f96:	f026 0607 	bic.w	r6, r6, #7
 8003f9a:	1d23      	adds	r3, r4, #4
 8003f9c:	1af2      	subs	r2, r6, r3
 8003f9e:	d0b6      	beq.n	8003f0e <_malloc_r+0x22>
 8003fa0:	1b9b      	subs	r3, r3, r6
 8003fa2:	50a3      	str	r3, [r4, r2]
 8003fa4:	e7b3      	b.n	8003f0e <_malloc_r+0x22>
 8003fa6:	6862      	ldr	r2, [r4, #4]
 8003fa8:	42a3      	cmp	r3, r4
 8003faa:	bf0c      	ite	eq
 8003fac:	6032      	streq	r2, [r6, #0]
 8003fae:	605a      	strne	r2, [r3, #4]
 8003fb0:	e7ec      	b.n	8003f8c <_malloc_r+0xa0>
 8003fb2:	4623      	mov	r3, r4
 8003fb4:	6864      	ldr	r4, [r4, #4]
 8003fb6:	e7b2      	b.n	8003f1e <_malloc_r+0x32>
 8003fb8:	4634      	mov	r4, r6
 8003fba:	6876      	ldr	r6, [r6, #4]
 8003fbc:	e7b9      	b.n	8003f32 <_malloc_r+0x46>
 8003fbe:	230c      	movs	r3, #12
 8003fc0:	603b      	str	r3, [r7, #0]
 8003fc2:	4638      	mov	r0, r7
 8003fc4:	f000 f95e 	bl	8004284 <__malloc_unlock>
 8003fc8:	e7a1      	b.n	8003f0e <_malloc_r+0x22>
 8003fca:	6025      	str	r5, [r4, #0]
 8003fcc:	e7de      	b.n	8003f8c <_malloc_r+0xa0>
 8003fce:	bf00      	nop
 8003fd0:	20000a20 	.word	0x20000a20

08003fd4 <_sbrk_r>:
 8003fd4:	b538      	push	{r3, r4, r5, lr}
 8003fd6:	4d06      	ldr	r5, [pc, #24]	; (8003ff0 <_sbrk_r+0x1c>)
 8003fd8:	2300      	movs	r3, #0
 8003fda:	4604      	mov	r4, r0
 8003fdc:	4608      	mov	r0, r1
 8003fde:	602b      	str	r3, [r5, #0]
 8003fe0:	f7fc ffde 	bl	8000fa0 <_sbrk>
 8003fe4:	1c43      	adds	r3, r0, #1
 8003fe6:	d102      	bne.n	8003fee <_sbrk_r+0x1a>
 8003fe8:	682b      	ldr	r3, [r5, #0]
 8003fea:	b103      	cbz	r3, 8003fee <_sbrk_r+0x1a>
 8003fec:	6023      	str	r3, [r4, #0]
 8003fee:	bd38      	pop	{r3, r4, r5, pc}
 8003ff0:	20000a28 	.word	0x20000a28

08003ff4 <__sread>:
 8003ff4:	b510      	push	{r4, lr}
 8003ff6:	460c      	mov	r4, r1
 8003ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ffc:	f000 f994 	bl	8004328 <_read_r>
 8004000:	2800      	cmp	r0, #0
 8004002:	bfab      	itete	ge
 8004004:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004006:	89a3      	ldrhlt	r3, [r4, #12]
 8004008:	181b      	addge	r3, r3, r0
 800400a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800400e:	bfac      	ite	ge
 8004010:	6563      	strge	r3, [r4, #84]	; 0x54
 8004012:	81a3      	strhlt	r3, [r4, #12]
 8004014:	bd10      	pop	{r4, pc}

08004016 <__swrite>:
 8004016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800401a:	461f      	mov	r7, r3
 800401c:	898b      	ldrh	r3, [r1, #12]
 800401e:	05db      	lsls	r3, r3, #23
 8004020:	4605      	mov	r5, r0
 8004022:	460c      	mov	r4, r1
 8004024:	4616      	mov	r6, r2
 8004026:	d505      	bpl.n	8004034 <__swrite+0x1e>
 8004028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800402c:	2302      	movs	r3, #2
 800402e:	2200      	movs	r2, #0
 8004030:	f000 f910 	bl	8004254 <_lseek_r>
 8004034:	89a3      	ldrh	r3, [r4, #12]
 8004036:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800403a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800403e:	81a3      	strh	r3, [r4, #12]
 8004040:	4632      	mov	r2, r6
 8004042:	463b      	mov	r3, r7
 8004044:	4628      	mov	r0, r5
 8004046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800404a:	f000 b81f 	b.w	800408c <_write_r>

0800404e <__sseek>:
 800404e:	b510      	push	{r4, lr}
 8004050:	460c      	mov	r4, r1
 8004052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004056:	f000 f8fd 	bl	8004254 <_lseek_r>
 800405a:	1c43      	adds	r3, r0, #1
 800405c:	89a3      	ldrh	r3, [r4, #12]
 800405e:	bf15      	itete	ne
 8004060:	6560      	strne	r0, [r4, #84]	; 0x54
 8004062:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004066:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800406a:	81a3      	strheq	r3, [r4, #12]
 800406c:	bf18      	it	ne
 800406e:	81a3      	strhne	r3, [r4, #12]
 8004070:	bd10      	pop	{r4, pc}

08004072 <__sclose>:
 8004072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004076:	f000 b81b 	b.w	80040b0 <_close_r>

0800407a <strcpy>:
 800407a:	4603      	mov	r3, r0
 800407c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004080:	f803 2b01 	strb.w	r2, [r3], #1
 8004084:	2a00      	cmp	r2, #0
 8004086:	d1f9      	bne.n	800407c <strcpy+0x2>
 8004088:	4770      	bx	lr
	...

0800408c <_write_r>:
 800408c:	b538      	push	{r3, r4, r5, lr}
 800408e:	4d07      	ldr	r5, [pc, #28]	; (80040ac <_write_r+0x20>)
 8004090:	4604      	mov	r4, r0
 8004092:	4608      	mov	r0, r1
 8004094:	4611      	mov	r1, r2
 8004096:	2200      	movs	r2, #0
 8004098:	602a      	str	r2, [r5, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	f7ff fc09 	bl	80038b2 <_write>
 80040a0:	1c43      	adds	r3, r0, #1
 80040a2:	d102      	bne.n	80040aa <_write_r+0x1e>
 80040a4:	682b      	ldr	r3, [r5, #0]
 80040a6:	b103      	cbz	r3, 80040aa <_write_r+0x1e>
 80040a8:	6023      	str	r3, [r4, #0]
 80040aa:	bd38      	pop	{r3, r4, r5, pc}
 80040ac:	20000a28 	.word	0x20000a28

080040b0 <_close_r>:
 80040b0:	b538      	push	{r3, r4, r5, lr}
 80040b2:	4d06      	ldr	r5, [pc, #24]	; (80040cc <_close_r+0x1c>)
 80040b4:	2300      	movs	r3, #0
 80040b6:	4604      	mov	r4, r0
 80040b8:	4608      	mov	r0, r1
 80040ba:	602b      	str	r3, [r5, #0]
 80040bc:	f7ff fc2a 	bl	8003914 <_close>
 80040c0:	1c43      	adds	r3, r0, #1
 80040c2:	d102      	bne.n	80040ca <_close_r+0x1a>
 80040c4:	682b      	ldr	r3, [r5, #0]
 80040c6:	b103      	cbz	r3, 80040ca <_close_r+0x1a>
 80040c8:	6023      	str	r3, [r4, #0]
 80040ca:	bd38      	pop	{r3, r4, r5, pc}
 80040cc:	20000a28 	.word	0x20000a28

080040d0 <__sflush_r>:
 80040d0:	898a      	ldrh	r2, [r1, #12]
 80040d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040d6:	4605      	mov	r5, r0
 80040d8:	0710      	lsls	r0, r2, #28
 80040da:	460c      	mov	r4, r1
 80040dc:	d458      	bmi.n	8004190 <__sflush_r+0xc0>
 80040de:	684b      	ldr	r3, [r1, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	dc05      	bgt.n	80040f0 <__sflush_r+0x20>
 80040e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	dc02      	bgt.n	80040f0 <__sflush_r+0x20>
 80040ea:	2000      	movs	r0, #0
 80040ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040f2:	2e00      	cmp	r6, #0
 80040f4:	d0f9      	beq.n	80040ea <__sflush_r+0x1a>
 80040f6:	2300      	movs	r3, #0
 80040f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80040fc:	682f      	ldr	r7, [r5, #0]
 80040fe:	602b      	str	r3, [r5, #0]
 8004100:	d032      	beq.n	8004168 <__sflush_r+0x98>
 8004102:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004104:	89a3      	ldrh	r3, [r4, #12]
 8004106:	075a      	lsls	r2, r3, #29
 8004108:	d505      	bpl.n	8004116 <__sflush_r+0x46>
 800410a:	6863      	ldr	r3, [r4, #4]
 800410c:	1ac0      	subs	r0, r0, r3
 800410e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004110:	b10b      	cbz	r3, 8004116 <__sflush_r+0x46>
 8004112:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004114:	1ac0      	subs	r0, r0, r3
 8004116:	2300      	movs	r3, #0
 8004118:	4602      	mov	r2, r0
 800411a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800411c:	6a21      	ldr	r1, [r4, #32]
 800411e:	4628      	mov	r0, r5
 8004120:	47b0      	blx	r6
 8004122:	1c43      	adds	r3, r0, #1
 8004124:	89a3      	ldrh	r3, [r4, #12]
 8004126:	d106      	bne.n	8004136 <__sflush_r+0x66>
 8004128:	6829      	ldr	r1, [r5, #0]
 800412a:	291d      	cmp	r1, #29
 800412c:	d82c      	bhi.n	8004188 <__sflush_r+0xb8>
 800412e:	4a2a      	ldr	r2, [pc, #168]	; (80041d8 <__sflush_r+0x108>)
 8004130:	40ca      	lsrs	r2, r1
 8004132:	07d6      	lsls	r6, r2, #31
 8004134:	d528      	bpl.n	8004188 <__sflush_r+0xb8>
 8004136:	2200      	movs	r2, #0
 8004138:	6062      	str	r2, [r4, #4]
 800413a:	04d9      	lsls	r1, r3, #19
 800413c:	6922      	ldr	r2, [r4, #16]
 800413e:	6022      	str	r2, [r4, #0]
 8004140:	d504      	bpl.n	800414c <__sflush_r+0x7c>
 8004142:	1c42      	adds	r2, r0, #1
 8004144:	d101      	bne.n	800414a <__sflush_r+0x7a>
 8004146:	682b      	ldr	r3, [r5, #0]
 8004148:	b903      	cbnz	r3, 800414c <__sflush_r+0x7c>
 800414a:	6560      	str	r0, [r4, #84]	; 0x54
 800414c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800414e:	602f      	str	r7, [r5, #0]
 8004150:	2900      	cmp	r1, #0
 8004152:	d0ca      	beq.n	80040ea <__sflush_r+0x1a>
 8004154:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004158:	4299      	cmp	r1, r3
 800415a:	d002      	beq.n	8004162 <__sflush_r+0x92>
 800415c:	4628      	mov	r0, r5
 800415e:	f000 f897 	bl	8004290 <_free_r>
 8004162:	2000      	movs	r0, #0
 8004164:	6360      	str	r0, [r4, #52]	; 0x34
 8004166:	e7c1      	b.n	80040ec <__sflush_r+0x1c>
 8004168:	6a21      	ldr	r1, [r4, #32]
 800416a:	2301      	movs	r3, #1
 800416c:	4628      	mov	r0, r5
 800416e:	47b0      	blx	r6
 8004170:	1c41      	adds	r1, r0, #1
 8004172:	d1c7      	bne.n	8004104 <__sflush_r+0x34>
 8004174:	682b      	ldr	r3, [r5, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0c4      	beq.n	8004104 <__sflush_r+0x34>
 800417a:	2b1d      	cmp	r3, #29
 800417c:	d001      	beq.n	8004182 <__sflush_r+0xb2>
 800417e:	2b16      	cmp	r3, #22
 8004180:	d101      	bne.n	8004186 <__sflush_r+0xb6>
 8004182:	602f      	str	r7, [r5, #0]
 8004184:	e7b1      	b.n	80040ea <__sflush_r+0x1a>
 8004186:	89a3      	ldrh	r3, [r4, #12]
 8004188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800418c:	81a3      	strh	r3, [r4, #12]
 800418e:	e7ad      	b.n	80040ec <__sflush_r+0x1c>
 8004190:	690f      	ldr	r7, [r1, #16]
 8004192:	2f00      	cmp	r7, #0
 8004194:	d0a9      	beq.n	80040ea <__sflush_r+0x1a>
 8004196:	0793      	lsls	r3, r2, #30
 8004198:	680e      	ldr	r6, [r1, #0]
 800419a:	bf08      	it	eq
 800419c:	694b      	ldreq	r3, [r1, #20]
 800419e:	600f      	str	r7, [r1, #0]
 80041a0:	bf18      	it	ne
 80041a2:	2300      	movne	r3, #0
 80041a4:	eba6 0807 	sub.w	r8, r6, r7
 80041a8:	608b      	str	r3, [r1, #8]
 80041aa:	f1b8 0f00 	cmp.w	r8, #0
 80041ae:	dd9c      	ble.n	80040ea <__sflush_r+0x1a>
 80041b0:	6a21      	ldr	r1, [r4, #32]
 80041b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80041b4:	4643      	mov	r3, r8
 80041b6:	463a      	mov	r2, r7
 80041b8:	4628      	mov	r0, r5
 80041ba:	47b0      	blx	r6
 80041bc:	2800      	cmp	r0, #0
 80041be:	dc06      	bgt.n	80041ce <__sflush_r+0xfe>
 80041c0:	89a3      	ldrh	r3, [r4, #12]
 80041c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041c6:	81a3      	strh	r3, [r4, #12]
 80041c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041cc:	e78e      	b.n	80040ec <__sflush_r+0x1c>
 80041ce:	4407      	add	r7, r0
 80041d0:	eba8 0800 	sub.w	r8, r8, r0
 80041d4:	e7e9      	b.n	80041aa <__sflush_r+0xda>
 80041d6:	bf00      	nop
 80041d8:	20400001 	.word	0x20400001

080041dc <_fflush_r>:
 80041dc:	b538      	push	{r3, r4, r5, lr}
 80041de:	690b      	ldr	r3, [r1, #16]
 80041e0:	4605      	mov	r5, r0
 80041e2:	460c      	mov	r4, r1
 80041e4:	b913      	cbnz	r3, 80041ec <_fflush_r+0x10>
 80041e6:	2500      	movs	r5, #0
 80041e8:	4628      	mov	r0, r5
 80041ea:	bd38      	pop	{r3, r4, r5, pc}
 80041ec:	b118      	cbz	r0, 80041f6 <_fflush_r+0x1a>
 80041ee:	6983      	ldr	r3, [r0, #24]
 80041f0:	b90b      	cbnz	r3, 80041f6 <_fflush_r+0x1a>
 80041f2:	f7ff fd8d 	bl	8003d10 <__sinit>
 80041f6:	4b14      	ldr	r3, [pc, #80]	; (8004248 <_fflush_r+0x6c>)
 80041f8:	429c      	cmp	r4, r3
 80041fa:	d11b      	bne.n	8004234 <_fflush_r+0x58>
 80041fc:	686c      	ldr	r4, [r5, #4]
 80041fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0ef      	beq.n	80041e6 <_fflush_r+0xa>
 8004206:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004208:	07d0      	lsls	r0, r2, #31
 800420a:	d404      	bmi.n	8004216 <_fflush_r+0x3a>
 800420c:	0599      	lsls	r1, r3, #22
 800420e:	d402      	bmi.n	8004216 <_fflush_r+0x3a>
 8004210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004212:	f7ff fe40 	bl	8003e96 <__retarget_lock_acquire_recursive>
 8004216:	4628      	mov	r0, r5
 8004218:	4621      	mov	r1, r4
 800421a:	f7ff ff59 	bl	80040d0 <__sflush_r>
 800421e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004220:	07da      	lsls	r2, r3, #31
 8004222:	4605      	mov	r5, r0
 8004224:	d4e0      	bmi.n	80041e8 <_fflush_r+0xc>
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	059b      	lsls	r3, r3, #22
 800422a:	d4dd      	bmi.n	80041e8 <_fflush_r+0xc>
 800422c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800422e:	f7ff fe33 	bl	8003e98 <__retarget_lock_release_recursive>
 8004232:	e7d9      	b.n	80041e8 <_fflush_r+0xc>
 8004234:	4b05      	ldr	r3, [pc, #20]	; (800424c <_fflush_r+0x70>)
 8004236:	429c      	cmp	r4, r3
 8004238:	d101      	bne.n	800423e <_fflush_r+0x62>
 800423a:	68ac      	ldr	r4, [r5, #8]
 800423c:	e7df      	b.n	80041fe <_fflush_r+0x22>
 800423e:	4b04      	ldr	r3, [pc, #16]	; (8004250 <_fflush_r+0x74>)
 8004240:	429c      	cmp	r4, r3
 8004242:	bf08      	it	eq
 8004244:	68ec      	ldreq	r4, [r5, #12]
 8004246:	e7da      	b.n	80041fe <_fflush_r+0x22>
 8004248:	080043b8 	.word	0x080043b8
 800424c:	080043d8 	.word	0x080043d8
 8004250:	08004398 	.word	0x08004398

08004254 <_lseek_r>:
 8004254:	b538      	push	{r3, r4, r5, lr}
 8004256:	4d07      	ldr	r5, [pc, #28]	; (8004274 <_lseek_r+0x20>)
 8004258:	4604      	mov	r4, r0
 800425a:	4608      	mov	r0, r1
 800425c:	4611      	mov	r1, r2
 800425e:	2200      	movs	r2, #0
 8004260:	602a      	str	r2, [r5, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	f7ff fb13 	bl	800388e <_lseek>
 8004268:	1c43      	adds	r3, r0, #1
 800426a:	d102      	bne.n	8004272 <_lseek_r+0x1e>
 800426c:	682b      	ldr	r3, [r5, #0]
 800426e:	b103      	cbz	r3, 8004272 <_lseek_r+0x1e>
 8004270:	6023      	str	r3, [r4, #0]
 8004272:	bd38      	pop	{r3, r4, r5, pc}
 8004274:	20000a28 	.word	0x20000a28

08004278 <__malloc_lock>:
 8004278:	4801      	ldr	r0, [pc, #4]	; (8004280 <__malloc_lock+0x8>)
 800427a:	f7ff be0c 	b.w	8003e96 <__retarget_lock_acquire_recursive>
 800427e:	bf00      	nop
 8004280:	20000a1c 	.word	0x20000a1c

08004284 <__malloc_unlock>:
 8004284:	4801      	ldr	r0, [pc, #4]	; (800428c <__malloc_unlock+0x8>)
 8004286:	f7ff be07 	b.w	8003e98 <__retarget_lock_release_recursive>
 800428a:	bf00      	nop
 800428c:	20000a1c 	.word	0x20000a1c

08004290 <_free_r>:
 8004290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004292:	2900      	cmp	r1, #0
 8004294:	d044      	beq.n	8004320 <_free_r+0x90>
 8004296:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800429a:	9001      	str	r0, [sp, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	f1a1 0404 	sub.w	r4, r1, #4
 80042a2:	bfb8      	it	lt
 80042a4:	18e4      	addlt	r4, r4, r3
 80042a6:	f7ff ffe7 	bl	8004278 <__malloc_lock>
 80042aa:	4a1e      	ldr	r2, [pc, #120]	; (8004324 <_free_r+0x94>)
 80042ac:	9801      	ldr	r0, [sp, #4]
 80042ae:	6813      	ldr	r3, [r2, #0]
 80042b0:	b933      	cbnz	r3, 80042c0 <_free_r+0x30>
 80042b2:	6063      	str	r3, [r4, #4]
 80042b4:	6014      	str	r4, [r2, #0]
 80042b6:	b003      	add	sp, #12
 80042b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042bc:	f7ff bfe2 	b.w	8004284 <__malloc_unlock>
 80042c0:	42a3      	cmp	r3, r4
 80042c2:	d908      	bls.n	80042d6 <_free_r+0x46>
 80042c4:	6825      	ldr	r5, [r4, #0]
 80042c6:	1961      	adds	r1, r4, r5
 80042c8:	428b      	cmp	r3, r1
 80042ca:	bf01      	itttt	eq
 80042cc:	6819      	ldreq	r1, [r3, #0]
 80042ce:	685b      	ldreq	r3, [r3, #4]
 80042d0:	1949      	addeq	r1, r1, r5
 80042d2:	6021      	streq	r1, [r4, #0]
 80042d4:	e7ed      	b.n	80042b2 <_free_r+0x22>
 80042d6:	461a      	mov	r2, r3
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	b10b      	cbz	r3, 80042e0 <_free_r+0x50>
 80042dc:	42a3      	cmp	r3, r4
 80042de:	d9fa      	bls.n	80042d6 <_free_r+0x46>
 80042e0:	6811      	ldr	r1, [r2, #0]
 80042e2:	1855      	adds	r5, r2, r1
 80042e4:	42a5      	cmp	r5, r4
 80042e6:	d10b      	bne.n	8004300 <_free_r+0x70>
 80042e8:	6824      	ldr	r4, [r4, #0]
 80042ea:	4421      	add	r1, r4
 80042ec:	1854      	adds	r4, r2, r1
 80042ee:	42a3      	cmp	r3, r4
 80042f0:	6011      	str	r1, [r2, #0]
 80042f2:	d1e0      	bne.n	80042b6 <_free_r+0x26>
 80042f4:	681c      	ldr	r4, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	6053      	str	r3, [r2, #4]
 80042fa:	4421      	add	r1, r4
 80042fc:	6011      	str	r1, [r2, #0]
 80042fe:	e7da      	b.n	80042b6 <_free_r+0x26>
 8004300:	d902      	bls.n	8004308 <_free_r+0x78>
 8004302:	230c      	movs	r3, #12
 8004304:	6003      	str	r3, [r0, #0]
 8004306:	e7d6      	b.n	80042b6 <_free_r+0x26>
 8004308:	6825      	ldr	r5, [r4, #0]
 800430a:	1961      	adds	r1, r4, r5
 800430c:	428b      	cmp	r3, r1
 800430e:	bf04      	itt	eq
 8004310:	6819      	ldreq	r1, [r3, #0]
 8004312:	685b      	ldreq	r3, [r3, #4]
 8004314:	6063      	str	r3, [r4, #4]
 8004316:	bf04      	itt	eq
 8004318:	1949      	addeq	r1, r1, r5
 800431a:	6021      	streq	r1, [r4, #0]
 800431c:	6054      	str	r4, [r2, #4]
 800431e:	e7ca      	b.n	80042b6 <_free_r+0x26>
 8004320:	b003      	add	sp, #12
 8004322:	bd30      	pop	{r4, r5, pc}
 8004324:	20000a20 	.word	0x20000a20

08004328 <_read_r>:
 8004328:	b538      	push	{r3, r4, r5, lr}
 800432a:	4d07      	ldr	r5, [pc, #28]	; (8004348 <_read_r+0x20>)
 800432c:	4604      	mov	r4, r0
 800432e:	4608      	mov	r0, r1
 8004330:	4611      	mov	r1, r2
 8004332:	2200      	movs	r2, #0
 8004334:	602a      	str	r2, [r5, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	f7ff fa51 	bl	80037de <_read>
 800433c:	1c43      	adds	r3, r0, #1
 800433e:	d102      	bne.n	8004346 <_read_r+0x1e>
 8004340:	682b      	ldr	r3, [r5, #0]
 8004342:	b103      	cbz	r3, 8004346 <_read_r+0x1e>
 8004344:	6023      	str	r3, [r4, #0]
 8004346:	bd38      	pop	{r3, r4, r5, pc}
 8004348:	20000a28 	.word	0x20000a28

0800434c <_init>:
 800434c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434e:	bf00      	nop
 8004350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004352:	bc08      	pop	{r3}
 8004354:	469e      	mov	lr, r3
 8004356:	4770      	bx	lr

08004358 <_fini>:
 8004358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435a:	bf00      	nop
 800435c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800435e:	bc08      	pop	{r3}
 8004360:	469e      	mov	lr, r3
 8004362:	4770      	bx	lr
