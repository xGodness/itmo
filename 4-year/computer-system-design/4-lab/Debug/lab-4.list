
lab-4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f84  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08006134  08006134  00016134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006294  08006294  00020278  2**0
                  CONTENTS
  4 .ARM          00000008  08006294  08006294  00016294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800629c  0800629c  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800629c  0800629c  0001629c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062a0  080062a0  000162a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  080062a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020278  2**0
                  CONTENTS
 10 .bss          00000270  20000278  20000278  00020278  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004e8  200004e8  00020278  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011d93  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000245a  00000000  00000000  0003203b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  00034498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ed8  00000000  00000000  00035450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024102  00000000  00000000  00036328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013298  00000000  00000000  0005a42a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da678  00000000  00000000  0006d6c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00147d3a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004cd4  00000000  00000000  00147d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000278 	.word	0x20000278
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800611c 	.word	0x0800611c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000027c 	.word	0x2000027c
 80001ec:	0800611c 	.word	0x0800611c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b087      	sub	sp, #28
 80005a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
 80005ae:	4b2c      	ldr	r3, [pc, #176]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a2b      	ldr	r2, [pc, #172]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b29      	ldr	r3, [pc, #164]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c2:	617b      	str	r3, [r7, #20]
 80005c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	4b25      	ldr	r3, [pc, #148]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a24      	ldr	r2, [pc, #144]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005d0:	f043 0310 	orr.w	r3, r3, #16
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b22      	ldr	r3, [pc, #136]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0310 	and.w	r3, r3, #16
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a1d      	ldr	r2, [pc, #116]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0308 	and.w	r3, r3, #8
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b17      	ldr	r3, [pc, #92]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a16      	ldr	r2, [pc, #88]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a0f      	ldr	r2, [pc, #60]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <MX_GPIO_Init+0xbc>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_GPIO_Init+0xbc>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a08      	ldr	r2, [pc, #32]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]

}
 8000652:	bf00      	nop
 8000654:	371c      	adds	r7, #28
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800

08000664 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <MX_I2C1_Init+0x74>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	; (80006dc <MX_I2C1_Init+0x78>)
 800066c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000670:	4a1b      	ldr	r2, [pc, #108]	; (80006e0 <MX_I2C1_Init+0x7c>)
 8000672:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <MX_I2C1_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000682:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000686:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_I2C1_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000694:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_I2C1_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a0:	480d      	ldr	r0, [pc, #52]	; (80006d8 <MX_I2C1_Init+0x74>)
 80006a2:	f001 fc3b 	bl	8001f1c <HAL_I2C_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006ac:	f000 fd98 	bl	80011e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006b0:	2100      	movs	r1, #0
 80006b2:	4809      	ldr	r0, [pc, #36]	; (80006d8 <MX_I2C1_Init+0x74>)
 80006b4:	f002 fbf1 	bl	8002e9a <HAL_I2CEx_ConfigAnalogFilter>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006be:	f000 fd8f 	bl	80011e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006c2:	2100      	movs	r1, #0
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_I2C1_Init+0x74>)
 80006c6:	f002 fc24 	bl	8002f12 <HAL_I2CEx_ConfigDigitalFilter>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006d0:	f000 fd86 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000294 	.word	0x20000294
 80006dc:	40005400 	.word	0x40005400
 80006e0:	00061a80 	.word	0x00061a80

080006e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a19      	ldr	r2, [pc, #100]	; (8000768 <HAL_I2C_MspInit+0x84>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d12c      	bne.n	8000760 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <HAL_I2C_MspInit+0x88>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a17      	ldr	r2, [pc, #92]	; (800076c <HAL_I2C_MspInit+0x88>)
 8000710:	f043 0302 	orr.w	r3, r3, #2
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <HAL_I2C_MspInit+0x88>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000722:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000728:	2312      	movs	r3, #18
 800072a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000730:	2303      	movs	r3, #3
 8000732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000734:	2304      	movs	r3, #4
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	480c      	ldr	r0, [pc, #48]	; (8000770 <HAL_I2C_MspInit+0x8c>)
 8000740:	f001 fa28 	bl	8001b94 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <HAL_I2C_MspInit+0x88>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	4a07      	ldr	r2, [pc, #28]	; (800076c <HAL_I2C_MspInit+0x88>)
 800074e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000752:	6413      	str	r3, [r2, #64]	; 0x40
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <HAL_I2C_MspInit+0x88>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000760:	bf00      	nop
 8000762:	3728      	adds	r7, #40	; 0x28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40005400 	.word	0x40005400
 800076c:	40023800 	.word	0x40023800
 8000770:	40020400 	.word	0x40020400

08000774 <init_led_pwm>:
bool guess_status[] = {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false};
uint8_t cur_note_ptr = 0;
uint8_t cur_guess = 0;


void init_led_pwm(void) {
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
	htim4.Instance->ARR = led_arr_value;
 8000778:	4b04      	ldr	r3, [pc, #16]	; (800078c <init_led_pwm+0x18>)
 800077a:	881a      	ldrh	r2, [r3, #0]
 800077c:	4b04      	ldr	r3, [pc, #16]	; (8000790 <init_led_pwm+0x1c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	20000004 	.word	0x20000004
 8000790:	20000354 	.word	0x20000354

08000794 <is_button_pressed>:

bool is_digit(char *c) {
	return '1' <= *c && *c <= '9';
}

bool is_button_pressed(void) {
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	 return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == 0;
 8000798:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <is_button_pressed+0x20>)
 800079e:	f001 fba5 	bl	8001eec <HAL_GPIO_ReadPin>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	bf0c      	ite	eq
 80007a8:	2301      	moveq	r3, #1
 80007aa:	2300      	movne	r3, #0
 80007ac:	b2db      	uxtb	r3, r3
 }
 80007ae:	4618      	mov	r0, r3
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40020800 	.word	0x40020800

080007b8 <uart_write>:

void uart_write(char *data) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	uint16_t size = strlen(data);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff fd15 	bl	80001f0 <strlen>
 80007c6:	4603      	mov	r3, r0
 80007c8:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart6, (uint8_t *) data, size, 100);
 80007ca:	89fa      	ldrh	r2, [r7, #14]
 80007cc:	2364      	movs	r3, #100	; 0x64
 80007ce:	6879      	ldr	r1, [r7, #4]
 80007d0:	4803      	ldr	r0, [pc, #12]	; (80007e0 <uart_write+0x28>)
 80007d2:	f003 ffd2 	bl	800477a <HAL_UART_Transmit>
}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200003e4 	.word	0x200003e4

080007e4 <uart_write_newline>:

void uart_write_newline(void) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	uart_write(newline);
 80007e8:	4802      	ldr	r0, [pc, #8]	; (80007f4 <uart_write_newline+0x10>)
 80007ea:	f7ff ffe5 	bl	80007b8 <uart_write>
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000008 	.word	0x20000008

080007f8 <play_sound>:
	HAL_StatusTypeDef status = HAL_UART_Receive(&huart6, (uint8_t *) buf_char, sizeof(char), 100);
	if (HAL_OK == status && process_char(buf_char))
		uart_write(buf_char);
}

void play_sound(uint32_t *frequency) {
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	htim1.Instance->ARR = (1000000 / (*frequency)) - 1; // Set The PWM Frequency
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a09      	ldr	r2, [pc, #36]	; (800082c <play_sound+0x34>)
 8000806:	fbb2 f2f3 	udiv	r2, r2, r3
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <play_sound+0x38>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	3a01      	subs	r2, #1
 8000810:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1.Instance->CCR1 = (htim1.Instance->ARR >> 1); // Set Duty Cycle 50%
 8000812:	4b07      	ldr	r3, [pc, #28]	; (8000830 <play_sound+0x38>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <play_sound+0x38>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	0852      	lsrs	r2, r2, #1
 800081e:	635a      	str	r2, [r3, #52]	; 0x34
//	printf("ARR = %lu | F = %lu\n", htim1.Instance->ARR, 60000000 / (htim1.Instance->PSC + 1) / (htim1.Instance->ARR + 1));
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	000f4240 	.word	0x000f4240
 8000830:	2000030c 	.word	0x2000030c

08000834 <mute>:

void mute(void) {
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
	htim1.Instance->CCR1 = 0;
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <mute+0x18>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2200      	movs	r2, #0
 800083e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	2000030c 	.word	0x2000030c

08000850 <disable_all_leds>:

void disable_all_leds(void) {
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
	htim4.Instance->CCR2 = 0;
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <disable_all_leds+0x28>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2200      	movs	r2, #0
 800085a:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance->CCR3 = 0;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <disable_all_leds+0x28>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2200      	movs	r2, #0
 8000862:	63da      	str	r2, [r3, #60]	; 0x3c
	htim4.Instance->CCR4 = 0;
 8000864:	4b04      	ldr	r3, [pc, #16]	; (8000878 <disable_all_leds+0x28>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2200      	movs	r2, #0
 800086a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	20000354 	.word	0x20000354

0800087c <light_led>:

void light_led(LED *led, LEDBrightness *brightness) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
	disable_all_leds();
 8000886:	f7ff ffe3 	bl	8000850 <disable_all_leds>
	uint16_t ccr_value = CLOCK_SCALED_FREQUENCY / LED_PWM_FREQUENCY * (*brightness) / 100;
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b29b      	uxth	r3, r3
 8000890:	461a      	mov	r2, r3
 8000892:	0092      	lsls	r2, r2, #2
 8000894:	4413      	add	r3, r2
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	81fb      	strh	r3, [r7, #14]
	switch (*led) {
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b02      	cmp	r3, #2
 80008a0:	d010      	beq.n	80008c4 <light_led+0x48>
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	dc13      	bgt.n	80008ce <light_led+0x52>
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d002      	beq.n	80008b0 <light_led+0x34>
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d005      	beq.n	80008ba <light_led+0x3e>
			break;
		case RED:
			htim4.Instance->CCR4 = ccr_value;
			break;
	}
}
 80008ae:	e00e      	b.n	80008ce <light_led+0x52>
			htim4.Instance->CCR2 = ccr_value;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <light_led+0x5c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	89fa      	ldrh	r2, [r7, #14]
 80008b6:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80008b8:	e009      	b.n	80008ce <light_led+0x52>
			htim4.Instance->CCR3 = ccr_value;
 80008ba:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <light_led+0x5c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	89fa      	ldrh	r2, [r7, #14]
 80008c0:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80008c2:	e004      	b.n	80008ce <light_led+0x52>
			htim4.Instance->CCR4 = ccr_value;
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <light_led+0x5c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	89fa      	ldrh	r2, [r7, #14]
 80008ca:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 80008cc:	bf00      	nop
}
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000354 	.word	0x20000354

080008dc <play_note>:

void play_note(Note *note) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	switch (note_mode) {
 80008e4:	4b14      	ldr	r3, [pc, #80]	; (8000938 <play_note+0x5c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	d01b      	beq.n	8000924 <play_note+0x48>
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	dc1f      	bgt.n	8000930 <play_note+0x54>
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d002      	beq.n	80008fa <play_note+0x1e>
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d00d      	beq.n	8000914 <play_note+0x38>
			break;
		case SOUND_ONLY:
			play_sound(&note->frequency);
			break;
	}
}
 80008f8:	e01a      	b.n	8000930 <play_note+0x54>
			play_sound(&note->frequency);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	3304      	adds	r3, #4
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ff7a 	bl	80007f8 <play_sound>
			light_led(&note->led, &note->brightness);
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	3301      	adds	r3, #1
 800090a:	4619      	mov	r1, r3
 800090c:	4610      	mov	r0, r2
 800090e:	f7ff ffb5 	bl	800087c <light_led>
			break;
 8000912:	e00d      	b.n	8000930 <play_note+0x54>
			light_led(&note->led, &note->brightness);
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	3301      	adds	r3, #1
 800091a:	4619      	mov	r1, r3
 800091c:	4610      	mov	r0, r2
 800091e:	f7ff ffad 	bl	800087c <light_led>
			break;
 8000922:	e005      	b.n	8000930 <play_note+0x54>
			play_sound(&note->frequency);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3304      	adds	r3, #4
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ff65 	bl	80007f8 <play_sound>
			break;
 800092e:	bf00      	nop
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200002ee 	.word	0x200002ee

0800093c <stop_note>:

void stop_note(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	mute();
 8000940:	f7ff ff78 	bl	8000834 <mute>
	disable_all_leds();
 8000944:	f7ff ff84 	bl	8000850 <disable_all_leds>
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}

0800094c <uart_write_note_info>:

void uart_write_note_info(Note *note) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b0c6      	sub	sp, #280	; 0x118
 8000950:	af02      	add	r7, sp, #8
 8000952:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000956:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800095a:	6018      	str	r0, [r3, #0]
	char buf[256];
	char *colour = note->led == GREEN ? "green" : (note->led == YELLOW ? "yellow" : "red");
 800095c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000960:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d00b      	beq.n	8000984 <uart_write_note_info+0x38>
 800096c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000970:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d101      	bne.n	8000980 <uart_write_note_info+0x34>
 800097c:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <uart_write_note_info+0xa4>)
 800097e:	e002      	b.n	8000986 <uart_write_note_info+0x3a>
 8000980:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <uart_write_note_info+0xa8>)
 8000982:	e000      	b.n	8000986 <uart_write_note_info+0x3a>
 8000984:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <uart_write_note_info+0xac>)
 8000986:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t brightness = note->brightness == LOW ? 20 : (note->brightness == MEDIUM ? 50 : 100);
 800098a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800098e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	785b      	ldrb	r3, [r3, #1]
 8000996:	2b14      	cmp	r3, #20
 8000998:	d00b      	beq.n	80009b2 <uart_write_note_info+0x66>
 800099a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800099e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	785b      	ldrb	r3, [r3, #1]
 80009a6:	2b32      	cmp	r3, #50	; 0x32
 80009a8:	d101      	bne.n	80009ae <uart_write_note_info+0x62>
 80009aa:	2332      	movs	r3, #50	; 0x32
 80009ac:	e002      	b.n	80009b4 <uart_write_note_info+0x68>
 80009ae:	2364      	movs	r3, #100	; 0x64
 80009b0:	e000      	b.n	80009b4 <uart_write_note_info+0x68>
 80009b2:	2314      	movs	r3, #20
 80009b4:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b

	sprintf(buf, "\n\rNote colour: %s\n\rNote brightness: %d\n\rNote frequency: %lu\n\r", colour, brightness, note->frequency);
 80009b8:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 80009bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f107 0008 	add.w	r0, r7, #8
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	4613      	mov	r3, r2
 80009d0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80009d4:	4909      	ldr	r1, [pc, #36]	; (80009fc <uart_write_note_info+0xb0>)
 80009d6:	f004 fe8d 	bl	80056f4 <siprintf>

	uart_write(buf);
 80009da:	f107 0308 	add.w	r3, r7, #8
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff feea 	bl	80007b8 <uart_write>
}
 80009e4:	bf00      	nop
 80009e6:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	08006134 	.word	0x08006134
 80009f4:	0800613c 	.word	0x0800613c
 80009f8:	08006140 	.word	0x08006140
 80009fc:	08006148 	.word	0x08006148

08000a00 <reset_keypad>:

HAL_StatusTypeDef reset_keypad(void) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af04      	add	r7, sp, #16
	uint8_t buf = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, KEYPAD_WRITE_ADDRESS, POLARITY_INV_REG, 1, &buf, 1, 100);
 8000a0a:	2364      	movs	r3, #100	; 0x64
 8000a0c:	9302      	str	r3, [sp, #8]
 8000a0e:	2301      	movs	r3, #1
 8000a10:	9301      	str	r3, [sp, #4]
 8000a12:	1dbb      	adds	r3, r7, #6
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	2301      	movs	r3, #1
 8000a18:	2202      	movs	r2, #2
 8000a1a:	21e2      	movs	r1, #226	; 0xe2
 8000a1c:	480e      	ldr	r0, [pc, #56]	; (8000a58 <reset_keypad+0x58>)
 8000a1e:	f001 fbc1 	bl	80021a4 <HAL_I2C_Mem_Write>
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <reset_keypad+0x30>
		return status;
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	e00e      	b.n	8000a4e <reset_keypad+0x4e>
	status = HAL_I2C_Mem_Write(&hi2c1, KEYPAD_WRITE_ADDRESS, OUTPUT_PORT_REG, 1, &buf, 1, 100);
 8000a30:	2364      	movs	r3, #100	; 0x64
 8000a32:	9302      	str	r3, [sp, #8]
 8000a34:	2301      	movs	r3, #1
 8000a36:	9301      	str	r3, [sp, #4]
 8000a38:	1dbb      	adds	r3, r7, #6
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	2201      	movs	r2, #1
 8000a40:	21e2      	movs	r1, #226	; 0xe2
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <reset_keypad+0x58>)
 8000a44:	f001 fbae 	bl	80021a4 <HAL_I2C_Mem_Write>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	71fb      	strb	r3, [r7, #7]
	return status;
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000294 	.word	0x20000294

08000a5c <keypad_read_key_index>:

int keypad_read_key_index(void) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af04      	add	r7, sp, #16
	uint32_t cur_time = HAL_GetTick();
 8000a62:	f000 ff55 	bl	8001910 <HAL_GetTick>
 8000a66:	6078      	str	r0, [r7, #4]
	if (cur_time - last_pressed_time < CONTACT_BOUNCE_MS) return -1;
 8000a68:	4b47      	ldr	r3, [pc, #284]	; (8000b88 <keypad_read_key_index+0x12c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	1ad3      	subs	r3, r2, r3
 8000a70:	2b13      	cmp	r3, #19
 8000a72:	d802      	bhi.n	8000a7a <keypad_read_key_index+0x1e>
 8000a74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a78:	e081      	b.n	8000b7e <keypad_read_key_index+0x122>

    int key_index = -1;
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a7e:	60fb      	str	r3, [r7, #12]
    uint8_t buf;
    uint16_t pressed_column;

    for (int row = 0; row < 4; row++) {
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	e065      	b.n	8000b52 <keypad_read_key_index+0xf6>
        buf = ~((uint8_t) (1 << row));
 8000a86:	2201      	movs	r2, #1
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	707b      	strb	r3, [r7, #1]
        pressed_column = 0x00;
 8000a96:	2300      	movs	r3, #0
 8000a98:	807b      	strh	r3, [r7, #2]

        reset_keypad();
 8000a9a:	f7ff ffb1 	bl	8000a00 <reset_keypad>

        HAL_I2C_Mem_Write(&hi2c1, KEYPAD_WRITE_ADDRESS, CONFIG_REG, 1, &buf, 1, 100);
 8000a9e:	2364      	movs	r3, #100	; 0x64
 8000aa0:	9302      	str	r3, [sp, #8]
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	9301      	str	r3, [sp, #4]
 8000aa6:	1c7b      	adds	r3, r7, #1
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	2301      	movs	r3, #1
 8000aac:	2203      	movs	r2, #3
 8000aae:	21e2      	movs	r1, #226	; 0xe2
 8000ab0:	4836      	ldr	r0, [pc, #216]	; (8000b8c <keypad_read_key_index+0x130>)
 8000ab2:	f001 fb77 	bl	80021a4 <HAL_I2C_Mem_Write>
        HAL_Delay(10);
 8000ab6:	200a      	movs	r0, #10
 8000ab8:	f000 ff36 	bl	8001928 <HAL_Delay>
        HAL_I2C_Mem_Read(&hi2c1, KEYPAD_READ_ADDRESS, INPUT_PORT_REG, 1, &buf, 1, 100);
 8000abc:	2364      	movs	r3, #100	; 0x64
 8000abe:	9302      	str	r3, [sp, #8]
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	9301      	str	r3, [sp, #4]
 8000ac4:	1c7b      	adds	r3, r7, #1
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	2301      	movs	r3, #1
 8000aca:	2200      	movs	r2, #0
 8000acc:	21e3      	movs	r1, #227	; 0xe3
 8000ace:	482f      	ldr	r0, [pc, #188]	; (8000b8c <keypad_read_key_index+0x130>)
 8000ad0:	f001 fc62 	bl	8002398 <HAL_I2C_Mem_Read>

        pressed_column = (~(buf >> 4)) & COLUMN_MASK;
 8000ad4:	787b      	ldrb	r3, [r7, #1]
 8000ad6:	091b      	lsrs	r3, r3, #4
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	43db      	mvns	r3, r3
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	f003 0307 	and.w	r3, r3, #7
 8000ae4:	807b      	strh	r3, [r7, #2]
        switch (pressed_column) {
 8000ae6:	887b      	ldrh	r3, [r7, #2]
 8000ae8:	2b04      	cmp	r3, #4
 8000aea:	d021      	beq.n	8000b30 <keypad_read_key_index+0xd4>
 8000aec:	2b04      	cmp	r3, #4
 8000aee:	dc2d      	bgt.n	8000b4c <keypad_read_key_index+0xf0>
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d002      	beq.n	8000afa <keypad_read_key_index+0x9e>
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d00d      	beq.n	8000b14 <keypad_read_key_index+0xb8>
 8000af8:	e028      	b.n	8000b4c <keypad_read_key_index+0xf0>
            case 0x1:
                if (key_index != -1) return -1;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b00:	d002      	beq.n	8000b08 <keypad_read_key_index+0xac>
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b06:	e03a      	b.n	8000b7e <keypad_read_key_index+0x122>
                key_index = row * 3;
 8000b08:	68ba      	ldr	r2, [r7, #8]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	4413      	add	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
                break;
 8000b12:	e01b      	b.n	8000b4c <keypad_read_key_index+0xf0>
            case 0x2:
                if (key_index != -1) return -1;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b1a:	d002      	beq.n	8000b22 <keypad_read_key_index+0xc6>
 8000b1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b20:	e02d      	b.n	8000b7e <keypad_read_key_index+0x122>
                key_index = (row * 3) + 1;
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	4613      	mov	r3, r2
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	4413      	add	r3, r2
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	60fb      	str	r3, [r7, #12]
                break;
 8000b2e:	e00d      	b.n	8000b4c <keypad_read_key_index+0xf0>
            case 0x4:
                if (key_index != -1) return -1;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b36:	d002      	beq.n	8000b3e <keypad_read_key_index+0xe2>
 8000b38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b3c:	e01f      	b.n	8000b7e <keypad_read_key_index+0x122>
                key_index = (row * 3) + 2;
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	3302      	adds	r3, #2
 8000b48:	60fb      	str	r3, [r7, #12]
                break;
 8000b4a:	bf00      	nop
    for (int row = 0; row < 4; row++) {
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	2b03      	cmp	r3, #3
 8000b56:	dd96      	ble.n	8000a86 <keypad_read_key_index+0x2a>
        }
    }

    if (key_index != -1) last_pressed_time = cur_time;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b5e:	d002      	beq.n	8000b66 <keypad_read_key_index+0x10a>
 8000b60:	4a09      	ldr	r2, [pc, #36]	; (8000b88 <keypad_read_key_index+0x12c>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]
    if (key_index == last_pressed_key_index)
 8000b66:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <keypad_read_key_index+0x134>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d102      	bne.n	8000b76 <keypad_read_key_index+0x11a>
    	return -1;
 8000b70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b74:	e003      	b.n	8000b7e <keypad_read_key_index+0x122>
    last_pressed_key_index = key_index;
 8000b76:	4a06      	ldr	r2, [pc, #24]	; (8000b90 <keypad_read_key_index+0x134>)
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	6013      	str	r3, [r2, #0]
    return key_index;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200002e8 	.word	0x200002e8
 8000b8c:	20000294 	.word	0x20000294
 8000b90:	20000000 	.word	0x20000000

08000b94 <countdown_start_game>:

void countdown_start_game(void) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	uart_write(countdown_prepare_msg);
 8000b98:	480c      	ldr	r0, [pc, #48]	; (8000bcc <countdown_start_game+0x38>)
 8000b9a:	f7ff fe0d 	bl	80007b8 <uart_write>
	uart_write(countdown_3_msg);
 8000b9e:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <countdown_start_game+0x3c>)
 8000ba0:	f7ff fe0a 	bl	80007b8 <uart_write>
	HAL_Delay(1000);
 8000ba4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ba8:	f000 febe 	bl	8001928 <HAL_Delay>
	uart_write(countdown_2_msg);
 8000bac:	4809      	ldr	r0, [pc, #36]	; (8000bd4 <countdown_start_game+0x40>)
 8000bae:	f7ff fe03 	bl	80007b8 <uart_write>
	HAL_Delay(1000);
 8000bb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bb6:	f000 feb7 	bl	8001928 <HAL_Delay>
	uart_write(countdown_1_msg);
 8000bba:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <countdown_start_game+0x44>)
 8000bbc:	f7ff fdfc 	bl	80007b8 <uart_write>
	HAL_Delay(1000);
 8000bc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bc4:	f000 feb0 	bl	8001928 <HAL_Delay>
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	2000012c 	.word	0x2000012c
 8000bd0:	20000144 	.word	0x20000144
 8000bd4:	2000015c 	.word	0x2000015c
 8000bd8:	20000174 	.word	0x20000174

08000bdc <stop_timer>:

void stop_timer(void) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim6);
 8000be0:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <stop_timer+0x18>)
 8000be2:	f002 feed 	bl	80039c0 <HAL_TIM_Base_Stop_IT>
	htim6.Instance->ARR = 0;
 8000be6:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <stop_timer+0x18>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2200      	movs	r2, #0
 8000bec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	2000039c 	.word	0x2000039c

08000bf8 <set_timer_ms>:

void set_timer_ms(uint32_t ms) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	htim6.Instance->ARR = ms - 1;
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <set_timer_ms+0x20>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	3a01      	subs	r2, #1
 8000c08:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_Base_Start_IT(&htim6);
 8000c0a:	4803      	ldr	r0, [pc, #12]	; (8000c18 <set_timer_ms+0x20>)
 8000c0c:	f002 fe68 	bl	80038e0 <HAL_TIM_Base_Start_IT>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	2000039c 	.word	0x2000039c

08000c1c <finish_game>:

void finish_game(void) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b0c2      	sub	sp, #264	; 0x108
 8000c20:	af00      	add	r7, sp, #0
	stop_timer();
 8000c22:	f7ff ffdb 	bl	8000bdc <stop_timer>
	stop_note();
 8000c26:	f7ff fe89 	bl	800093c <stop_note>

	uart_write_newline();
 8000c2a:	f7ff fddb 	bl	80007e4 <uart_write_newline>
	uart_write(game_finished_msg);
 8000c2e:	482c      	ldr	r0, [pc, #176]	; (8000ce0 <finish_game+0xc4>)
 8000c30:	f7ff fdc2 	bl	80007b8 <uart_write>

	char buf[256];
	uint8_t points = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	for (uint8_t i = 0; i < note_sequence_length; i++) {
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8000c40:	e02f      	b.n	8000ca2 <finish_game+0x86>
		sprintf(buf, "Note %d: %s\n\r", i + 1, guess_status[i] ? "correct" : "wrong");
 8000c42:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000c4c:	4925      	ldr	r1, [pc, #148]	; (8000ce4 <finish_game+0xc8>)
 8000c4e:	5ccb      	ldrb	r3, [r1, r3]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <finish_game+0x3c>
 8000c54:	4b24      	ldr	r3, [pc, #144]	; (8000ce8 <finish_game+0xcc>)
 8000c56:	e000      	b.n	8000c5a <finish_game+0x3e>
 8000c58:	4b24      	ldr	r3, [pc, #144]	; (8000cec <finish_game+0xd0>)
 8000c5a:	1d38      	adds	r0, r7, #4
 8000c5c:	4924      	ldr	r1, [pc, #144]	; (8000cf0 <finish_game+0xd4>)
 8000c5e:	f004 fd49 	bl	80056f4 <siprintf>
		uart_write(buf);
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fda7 	bl	80007b8 <uart_write>
		points += (guess_status[i] * (4 - difficulty));
 8000c6a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000c6e:	4a1d      	ldr	r2, [pc, #116]	; (8000ce4 <finish_game+0xc8>)
 8000c70:	5cd3      	ldrb	r3, [r2, r3]
 8000c72:	461a      	mov	r2, r3
 8000c74:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <finish_game+0xd8>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	f1c3 0304 	rsb	r3, r3, #4
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	fb12 f303 	smulbb	r3, r2, r3
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8000c88:	4413      	add	r3, r2
 8000c8a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

		guess_status[i] = false;
 8000c8e:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000c92:	4a14      	ldr	r2, [pc, #80]	; (8000ce4 <finish_game+0xc8>)
 8000c94:	2100      	movs	r1, #0
 8000c96:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < note_sequence_length; i++) {
 8000c98:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <finish_game+0xdc>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d3c9      	bcc.n	8000c42 <finish_game+0x26>
	}

	sprintf(buf, "Your score: %d\n\r", points);
 8000cae:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	4911      	ldr	r1, [pc, #68]	; (8000cfc <finish_game+0xe0>)
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f004 fd1c 	bl	80056f4 <siprintf>
	uart_write(buf);
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fd7a 	bl	80007b8 <uart_write>

	cur_note_ptr = 0;
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <finish_game+0xe4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
	cur_guess = 0;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <finish_game+0xe8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
	game_started = false;
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <finish_game+0xec>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
}
 8000cd6:	bf00      	nop
 8000cd8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000058 	.word	0x20000058
 8000ce4:	200002f0 	.word	0x200002f0
 8000ce8:	08006188 	.word	0x08006188
 8000cec:	08006190 	.word	0x08006190
 8000cf0:	08006198 	.word	0x08006198
 8000cf4:	2000019d 	.word	0x2000019d
 8000cf8:	200001e8 	.word	0x200001e8
 8000cfc:	080061a8 	.word	0x080061a8
 8000d00:	20000304 	.word	0x20000304
 8000d04:	20000305 	.word	0x20000305
 8000d08:	200002ec 	.word	0x200002ec

08000d0c <switch_game_mode>:

void switch_game_mode(void) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	switch (game_mode) {
 8000d10:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <switch_game_mode+0x90>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d002      	beq.n	8000d1e <switch_game_mode+0x12>
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d022      	beq.n	8000d62 <switch_game_mode+0x56>
			if (cur_note_ptr < note_sequence_length && cur_guess == note_sequence[cur_note_ptr])
				guess_status[cur_note_ptr] = true;
			finish_game();
			break;
	}
}
 8000d1c:	e03c      	b.n	8000d98 <switch_game_mode+0x8c>
			game_mode = PLAY;
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <switch_game_mode+0x90>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	701a      	strb	r2, [r3, #0]
			countdown_start_game();
 8000d24:	f7ff ff36 	bl	8000b94 <countdown_start_game>
			uart_write(game_started_msg);
 8000d28:	481d      	ldr	r0, [pc, #116]	; (8000da0 <switch_game_mode+0x94>)
 8000d2a:	f7ff fd45 	bl	80007b8 <uart_write>
			uart_write(guess_note_msg);
 8000d2e:	481d      	ldr	r0, [pc, #116]	; (8000da4 <switch_game_mode+0x98>)
 8000d30:	f7ff fd42 	bl	80007b8 <uart_write>
			play_note(&notes[note_sequence[cur_note_ptr] - 1]);
 8000d34:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <switch_game_mode+0x9c>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <switch_game_mode+0xa0>)
 8000d3c:	5c9b      	ldrb	r3, [r3, r2]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	4a1b      	ldr	r2, [pc, #108]	; (8000db0 <switch_game_mode+0xa4>)
 8000d44:	4413      	add	r3, r2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fdc8 	bl	80008dc <play_note>
			set_timer_ms(difficulty * 1000);
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <switch_game_mode+0xa8>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d56:	fb02 f303 	mul.w	r3, r2, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ff4c 	bl	8000bf8 <set_timer_ms>
			break;
 8000d60:	e01a      	b.n	8000d98 <switch_game_mode+0x8c>
			game_mode = INFO;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <switch_game_mode+0x90>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
			if (cur_note_ptr < note_sequence_length && cur_guess == note_sequence[cur_note_ptr])
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <switch_game_mode+0x9c>)
 8000d6a:	781a      	ldrb	r2, [r3, #0]
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <switch_game_mode+0xac>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d20e      	bcs.n	8000d92 <switch_game_mode+0x86>
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <switch_game_mode+0x9c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <switch_game_mode+0xa0>)
 8000d7c:	5c9a      	ldrb	r2, [r3, r2]
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <switch_game_mode+0xb0>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d105      	bne.n	8000d92 <switch_game_mode+0x86>
				guess_status[cur_note_ptr] = true;
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <switch_game_mode+0x9c>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <switch_game_mode+0xb4>)
 8000d8e:	2101      	movs	r1, #1
 8000d90:	5499      	strb	r1, [r3, r2]
			finish_game();
 8000d92:	f7ff ff43 	bl	8000c1c <finish_game>
			break;
 8000d96:	bf00      	nop
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200002ed 	.word	0x200002ed
 8000da0:	20000044 	.word	0x20000044
 8000da4:	2000018c 	.word	0x2000018c
 8000da8:	20000304 	.word	0x20000304
 8000dac:	200001ec 	.word	0x200001ec
 8000db0:	200001a0 	.word	0x200001a0
 8000db4:	2000019d 	.word	0x2000019d
 8000db8:	200001e8 	.word	0x200001e8
 8000dbc:	20000305 	.word	0x20000305
 8000dc0:	200002f0 	.word	0x200002f0

08000dc4 <switch_note_mode>:

void switch_note_mode(void) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	stop_note();
 8000dc8:	f7ff fdb8 	bl	800093c <stop_note>
	switch (note_mode) {
 8000dcc:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <switch_note_mode+0x4c>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d014      	beq.n	8000dfe <switch_note_mode+0x3a>
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	dc19      	bgt.n	8000e0c <switch_note_mode+0x48>
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d002      	beq.n	8000de2 <switch_note_mode+0x1e>
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d007      	beq.n	8000df0 <switch_note_mode+0x2c>
		case SOUND_ONLY:
			note_mode = ALL;
			uart_write(note_mode_all_msg);
			break;
	}
}
 8000de0:	e014      	b.n	8000e0c <switch_note_mode+0x48>
			note_mode = LED_ONLY;
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <switch_note_mode+0x4c>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	701a      	strb	r2, [r3, #0]
			uart_write(note_mode_led_msg);
 8000de8:	480a      	ldr	r0, [pc, #40]	; (8000e14 <switch_note_mode+0x50>)
 8000dea:	f7ff fce5 	bl	80007b8 <uart_write>
			break;
 8000dee:	e00d      	b.n	8000e0c <switch_note_mode+0x48>
			note_mode = SOUND_ONLY;
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <switch_note_mode+0x4c>)
 8000df2:	2202      	movs	r2, #2
 8000df4:	701a      	strb	r2, [r3, #0]
			uart_write(note_mode_sound_msg);
 8000df6:	4808      	ldr	r0, [pc, #32]	; (8000e18 <switch_note_mode+0x54>)
 8000df8:	f7ff fcde 	bl	80007b8 <uart_write>
			break;
 8000dfc:	e006      	b.n	8000e0c <switch_note_mode+0x48>
			note_mode = ALL;
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <switch_note_mode+0x4c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
			uart_write(note_mode_all_msg);
 8000e04:	4805      	ldr	r0, [pc, #20]	; (8000e1c <switch_note_mode+0x58>)
 8000e06:	f7ff fcd7 	bl	80007b8 <uart_write>
			break;
 8000e0a:	bf00      	nop
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	200002ee 	.word	0x200002ee
 8000e14:	20000088 	.word	0x20000088
 8000e18:	200000a8 	.word	0x200000a8
 8000e1c:	2000006c 	.word	0x2000006c

08000e20 <switch_difficulty>:

void switch_difficulty(void) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	switch (difficulty) {
 8000e24:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <switch_difficulty+0x48>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	d006      	beq.n	8000e3a <switch_difficulty+0x1a>
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	dc19      	bgt.n	8000e64 <switch_difficulty+0x44>
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d010      	beq.n	8000e56 <switch_difficulty+0x36>
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d007      	beq.n	8000e48 <switch_difficulty+0x28>
		case HARD:
			difficulty= EASY;
			uart_write(difficulty_easy_msg);
			break;
	}
}
 8000e38:	e014      	b.n	8000e64 <switch_difficulty+0x44>
			difficulty= NORMAL;
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <switch_difficulty+0x48>)
 8000e3c:	2202      	movs	r2, #2
 8000e3e:	701a      	strb	r2, [r3, #0]
			uart_write(difficulty_normal_msg);
 8000e40:	480a      	ldr	r0, [pc, #40]	; (8000e6c <switch_difficulty+0x4c>)
 8000e42:	f7ff fcb9 	bl	80007b8 <uart_write>
			break;
 8000e46:	e00d      	b.n	8000e64 <switch_difficulty+0x44>
			difficulty= HARD;
 8000e48:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <switch_difficulty+0x48>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	701a      	strb	r2, [r3, #0]
			uart_write(difficulty_hard_msg);
 8000e4e:	4808      	ldr	r0, [pc, #32]	; (8000e70 <switch_difficulty+0x50>)
 8000e50:	f7ff fcb2 	bl	80007b8 <uart_write>
			break;
 8000e54:	e006      	b.n	8000e64 <switch_difficulty+0x44>
			difficulty= EASY;
 8000e56:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <switch_difficulty+0x48>)
 8000e58:	2203      	movs	r2, #3
 8000e5a:	701a      	strb	r2, [r3, #0]
			uart_write(difficulty_easy_msg);
 8000e5c:	4805      	ldr	r0, [pc, #20]	; (8000e74 <switch_difficulty+0x54>)
 8000e5e:	f7ff fcab 	bl	80007b8 <uart_write>
			break;
 8000e62:	bf00      	nop
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	2000019d 	.word	0x2000019d
 8000e6c:	200000ec 	.word	0x200000ec
 8000e70:	2000010c 	.word	0x2000010c
 8000e74:	200000cc 	.word	0x200000cc

08000e78 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a25      	ldr	r2, [pc, #148]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d145      	bne.n	8000f16 <HAL_TIM_PeriodElapsedCallback+0x9e>
		if (game_mode == INFO) {
 8000e8a:	4b25      	ldr	r3, [pc, #148]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d104      	bne.n	8000e9c <HAL_TIM_PeriodElapsedCallback+0x24>
			stop_note();
 8000e92:	f7ff fd53 	bl	800093c <stop_note>
			stop_timer();
 8000e96:	f7ff fea1 	bl	8000bdc <stop_timer>
			return;
 8000e9a:	e03c      	b.n	8000f16 <HAL_TIM_PeriodElapsedCallback+0x9e>
		}

		if (!game_started) {
 8000e9c:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	f083 0301 	eor.w	r3, r3, #1
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <HAL_TIM_PeriodElapsedCallback+0x3a>
			game_started = true;
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]
			return;
 8000eb0:	e031      	b.n	8000f16 <HAL_TIM_PeriodElapsedCallback+0x9e>
		}

		if (cur_guess == note_sequence[cur_note_ptr])
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000eba:	5c9a      	ldrb	r2, [r3, r2]
 8000ebc:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d105      	bne.n	8000ed0 <HAL_TIM_PeriodElapsedCallback+0x58>
			guess_status[cur_note_ptr] = true;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000ecc:	2101      	movs	r1, #1
 8000ece:	5499      	strb	r1, [r3, r2]

		cur_guess = 0;
 8000ed0:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
		cur_note_ptr++;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	3301      	adds	r3, #1
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000ee0:	701a      	strb	r2, [r3, #0]

		if (cur_note_ptr == note_sequence_length) {
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000ee4:	781a      	ldrb	r2, [r3, #0]
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d102      	bne.n	8000ef4 <HAL_TIM_PeriodElapsedCallback+0x7c>
			switch_game_mode();
 8000eee:	f7ff ff0d 	bl	8000d0c <switch_game_mode>
 8000ef2:	e010      	b.n	8000f16 <HAL_TIM_PeriodElapsedCallback+0x9e>
		} else {
			uart_write_newline();
 8000ef4:	f7ff fc76 	bl	80007e4 <uart_write_newline>
			uart_write(guess_note_msg);
 8000ef8:	4810      	ldr	r0, [pc, #64]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000efa:	f7ff fc5d 	bl	80007b8 <uart_write>
			play_note(&notes[note_sequence[cur_note_ptr] - 1]);
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000f06:	5c9b      	ldrb	r3, [r3, r2]
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	4a0c      	ldr	r2, [pc, #48]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000f0e:	4413      	add	r3, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fce3 	bl	80008dc <play_note>
		}
	}
}
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40001000 	.word	0x40001000
 8000f20:	200002ed 	.word	0x200002ed
 8000f24:	200002ec 	.word	0x200002ec
 8000f28:	20000304 	.word	0x20000304
 8000f2c:	200001ec 	.word	0x200001ec
 8000f30:	20000305 	.word	0x20000305
 8000f34:	200002f0 	.word	0x200002f0
 8000f38:	200001e8 	.word	0x200001e8
 8000f3c:	2000018c 	.word	0x2000018c
 8000f40:	200001a0 	.word	0x200001a0

08000f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000f4a:	f004 f9a3 	bl	8005294 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4e:	f000 fc79 	bl	8001844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f52:	f000 f8d9 	bl	8001108 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f56:	f7ff fb25 	bl	80005a4 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000f5a:	f000 fa6f 	bl	800143c <MX_TIM4_Init>
  MX_TIM6_Init();
 8000f5e:	f000 fadb 	bl	8001518 <MX_TIM6_Init>
  MX_USART6_UART_Init();
 8000f62:	f000 fbd3 	bl	800170c <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8000f66:	f000 f9e5 	bl	8001334 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000f6a:	f7ff fb7b 	bl	8000664 <MX_I2C1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000f6e:	2104      	movs	r1, #4
 8000f70:	485b      	ldr	r0, [pc, #364]	; (80010e0 <main+0x19c>)
 8000f72:	f002 fda3 	bl	8003abc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000f76:	2108      	movs	r1, #8
 8000f78:	4859      	ldr	r0, [pc, #356]	; (80010e0 <main+0x19c>)
 8000f7a:	f002 fd9f 	bl	8003abc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000f7e:	210c      	movs	r1, #12
 8000f80:	4857      	ldr	r0, [pc, #348]	; (80010e0 <main+0x19c>)
 8000f82:	f002 fd9b 	bl	8003abc <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim1);
 8000f86:	4857      	ldr	r0, [pc, #348]	; (80010e4 <main+0x1a0>)
 8000f88:	f002 fcaa 	bl	80038e0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4855      	ldr	r0, [pc, #340]	; (80010e4 <main+0x1a0>)
 8000f90:	f002 fd94 	bl	8003abc <HAL_TIM_PWM_Start>

  init_led_pwm();
 8000f94:	f7ff fbee 	bl	8000774 <init_led_pwm>
  stop_timer();
 8000f98:	f7ff fe20 	bl	8000bdc <stop_timer>

  last_pressed_time = 0;
 8000f9c:	4b52      	ldr	r3, [pc, #328]	; (80010e8 <main+0x1a4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
  bool button_pressed = false;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	75fb      	strb	r3, [r7, #23]
  bool is_test_mode = true;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	75bb      	strb	r3, [r7, #22]

  uart_write(is_test_mode ? test_mode_msg : main_mode_msg);
 8000faa:	7dbb      	ldrb	r3, [r7, #22]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <main+0x70>
 8000fb0:	4b4e      	ldr	r3, [pc, #312]	; (80010ec <main+0x1a8>)
 8000fb2:	e000      	b.n	8000fb6 <main+0x72>
 8000fb4:	4b4e      	ldr	r3, [pc, #312]	; (80010f0 <main+0x1ac>)
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fbfe 	bl	80007b8 <uart_write>

  int key_index;
  while (1)
  {
	  if (is_button_pressed() && button_pressed) continue;
 8000fbc:	f7ff fbea 	bl	8000794 <is_button_pressed>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <main+0x8a>
 8000fc6:	7dfb      	ldrb	r3, [r7, #23]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f040 8084 	bne.w	80010d6 <main+0x192>

	  button_pressed = is_button_pressed();
 8000fce:	f7ff fbe1 	bl	8000794 <is_button_pressed>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	75fb      	strb	r3, [r7, #23]

	  if (button_pressed) {
 8000fd6:	7dfb      	ldrb	r3, [r7, #23]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d017      	beq.n	800100c <main+0xc8>
		  is_test_mode = !is_test_mode;
 8000fdc:	7dbb      	ldrb	r3, [r7, #22]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	bf14      	ite	ne
 8000fe2:	2301      	movne	r3, #1
 8000fe4:	2300      	moveq	r3, #0
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	f083 0301 	eor.w	r3, r3, #1
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	75bb      	strb	r3, [r7, #22]
 8000ff0:	7dbb      	ldrb	r3, [r7, #22]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	75bb      	strb	r3, [r7, #22]
		  uart_write(is_test_mode ? test_mode_msg : main_mode_msg);
 8000ff8:	7dbb      	ldrb	r3, [r7, #22]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <main+0xbe>
 8000ffe:	4b3b      	ldr	r3, [pc, #236]	; (80010ec <main+0x1a8>)
 8001000:	e000      	b.n	8001004 <main+0xc0>
 8001002:	4b3b      	ldr	r3, [pc, #236]	; (80010f0 <main+0x1ac>)
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fbd7 	bl	80007b8 <uart_write>
		  continue;
 800100a:	e067      	b.n	80010dc <main+0x198>
	  }

	  key_index = keypad_read_key_index();
 800100c:	f7ff fd26 	bl	8000a5c <keypad_read_key_index>
 8001010:	6138      	str	r0, [r7, #16]

	  if (key_index == -1)
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001018:	d05f      	beq.n	80010da <main+0x196>
		  continue;

	  if (is_test_mode) {
 800101a:	7dbb      	ldrb	r3, [r7, #22]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00c      	beq.n	800103a <main+0xf6>
		  char buf[4];
		  sprintf(buf, "%d\n\r", key_index);
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4933      	ldr	r1, [pc, #204]	; (80010f4 <main+0x1b0>)
 8001028:	4618      	mov	r0, r3
 800102a:	f004 fb63 	bl	80056f4 <siprintf>
		  uart_write(buf);
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fbc0 	bl	80007b8 <uart_write>
 8001038:	e7c0      	b.n	8000fbc <main+0x78>
		  continue;
	  }

	  if (key_index == 11) {
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	2b0b      	cmp	r3, #11
 800103e:	d102      	bne.n	8001046 <main+0x102>
		  switch_game_mode();
 8001040:	f7ff fe64 	bl	8000d0c <switch_game_mode>
		  continue;
 8001044:	e04a      	b.n	80010dc <main+0x198>
	  }

	  if (0 <= key_index && key_index <= 8) {
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	2b00      	cmp	r3, #0
 800104a:	db2e      	blt.n	80010aa <main+0x166>
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	2b08      	cmp	r3, #8
 8001050:	dc2b      	bgt.n	80010aa <main+0x166>
		  if (game_mode == INFO) {
 8001052:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <main+0x1b4>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d114      	bne.n	8001084 <main+0x140>
			  uint8_t id = key_index;
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	73fb      	strb	r3, [r7, #15]
			  play_note(&notes[id]);
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	4a26      	ldr	r2, [pc, #152]	; (80010fc <main+0x1b8>)
 8001064:	4413      	add	r3, r2
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fc38 	bl	80008dc <play_note>
			  uart_write_note_info(&notes[id]);
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	4a22      	ldr	r2, [pc, #136]	; (80010fc <main+0x1b8>)
 8001072:	4413      	add	r3, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fc69 	bl	800094c <uart_write_note_info>

			  set_timer_ms(1000);
 800107a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800107e:	f7ff fdbb 	bl	8000bf8 <set_timer_ms>
			  cur_guess = key_index + 1;
			  char buf[4];
			  sprintf(buf, "%d", cur_guess);
			  uart_write(buf);
		  }
		  continue;
 8001082:	e02b      	b.n	80010dc <main+0x198>
			  cur_guess = key_index + 1;
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	3301      	adds	r3, #1
 800108a:	b2da      	uxtb	r2, r3
 800108c:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <main+0x1bc>)
 800108e:	701a      	strb	r2, [r3, #0]
			  sprintf(buf, "%d", cur_guess);
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <main+0x1bc>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	491a      	ldr	r1, [pc, #104]	; (8001104 <main+0x1c0>)
 800109a:	4618      	mov	r0, r3
 800109c:	f004 fb2a 	bl	80056f4 <siprintf>
			  uart_write(buf);
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fb88 	bl	80007b8 <uart_write>
		  continue;
 80010a8:	e018      	b.n	80010dc <main+0x198>
	  }

	  if (key_index == 9 && game_mode == INFO) {
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	2b09      	cmp	r3, #9
 80010ae:	d106      	bne.n	80010be <main+0x17a>
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <main+0x1b4>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <main+0x17a>
		  switch_note_mode();
 80010b8:	f7ff fe84 	bl	8000dc4 <switch_note_mode>
		  continue;
 80010bc:	e00e      	b.n	80010dc <main+0x198>
	  }

	  if (key_index == 10 && game_mode == INFO) {
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	2b0a      	cmp	r3, #10
 80010c2:	f47f af7b 	bne.w	8000fbc <main+0x78>
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <main+0x1b4>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f47f af76 	bne.w	8000fbc <main+0x78>
		  switch_difficulty();
 80010d0:	f7ff fea6 	bl	8000e20 <switch_difficulty>
		  continue;
 80010d4:	e002      	b.n	80010dc <main+0x198>
	  if (is_button_pressed() && button_pressed) continue;
 80010d6:	bf00      	nop
 80010d8:	e770      	b.n	8000fbc <main+0x78>
		  continue;
 80010da:	bf00      	nop
	  if (is_button_pressed() && button_pressed) continue;
 80010dc:	e76e      	b.n	8000fbc <main+0x78>
 80010de:	bf00      	nop
 80010e0:	20000354 	.word	0x20000354
 80010e4:	2000030c 	.word	0x2000030c
 80010e8:	200002e8 	.word	0x200002e8
 80010ec:	2000000c 	.word	0x2000000c
 80010f0:	2000002c 	.word	0x2000002c
 80010f4:	080061bc 	.word	0x080061bc
 80010f8:	200002ed 	.word	0x200002ed
 80010fc:	200001a0 	.word	0x200001a0
 8001100:	20000305 	.word	0x20000305
 8001104:	080061c4 	.word	0x080061c4

08001108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b094      	sub	sp, #80	; 0x50
 800110c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110e:	f107 0320 	add.w	r3, r7, #32
 8001112:	2230      	movs	r2, #48	; 0x30
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f004 fa3f 	bl	800559a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	4b29      	ldr	r3, [pc, #164]	; (80011d8 <SystemClock_Config+0xd0>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	4a28      	ldr	r2, [pc, #160]	; (80011d8 <SystemClock_Config+0xd0>)
 8001136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113a:	6413      	str	r3, [r2, #64]	; 0x40
 800113c:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <SystemClock_Config+0xd0>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001148:	2300      	movs	r3, #0
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	4b23      	ldr	r3, [pc, #140]	; (80011dc <SystemClock_Config+0xd4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001154:	4a21      	ldr	r2, [pc, #132]	; (80011dc <SystemClock_Config+0xd4>)
 8001156:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <SystemClock_Config+0xd4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001168:	2301      	movs	r3, #1
 800116a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800116c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001172:	2302      	movs	r3, #2
 8001174:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001176:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800117a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800117c:	230f      	movs	r3, #15
 800117e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001180:	2348      	movs	r3, #72	; 0x48
 8001182:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001184:	2302      	movs	r3, #2
 8001186:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001188:	2304      	movs	r3, #4
 800118a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118c:	f107 0320 	add.w	r3, r7, #32
 8001190:	4618      	mov	r0, r3
 8001192:	f001 fefd 	bl	8002f90 <HAL_RCC_OscConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800119c:	f000 f820 	bl	80011e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a0:	230f      	movs	r3, #15
 80011a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a4:	2302      	movs	r3, #2
 80011a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	2101      	movs	r1, #1
 80011be:	4618      	mov	r0, r3
 80011c0:	f002 f95e 	bl	8003480 <HAL_RCC_ClockConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011ca:	f000 f809 	bl	80011e0 <Error_Handler>
  }
}
 80011ce:	bf00      	nop
 80011d0:	3750      	adds	r7, #80	; 0x50
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40007000 	.word	0x40007000

080011e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e4:	b672      	cpsid	i
}
 80011e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <Error_Handler+0x8>
	...

080011ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <HAL_MspInit+0x4c>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	4a0f      	ldr	r2, [pc, #60]	; (8001238 <HAL_MspInit+0x4c>)
 80011fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001200:	6453      	str	r3, [r2, #68]	; 0x44
 8001202:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <HAL_MspInit+0x4c>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <HAL_MspInit+0x4c>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	4a08      	ldr	r2, [pc, #32]	; (8001238 <HAL_MspInit+0x4c>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121c:	6413      	str	r3, [r2, #64]	; 0x40
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_MspInit+0x4c>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800

0800123c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <NMI_Handler+0x4>

08001242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <HardFault_Handler+0x4>

08001248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <MemManage_Handler+0x4>

0800124e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <BusFault_Handler+0x4>

08001254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <UsageFault_Handler+0x4>

0800125a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001288:	f000 fb2e 	bl	80018e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}

08001290 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <TIM6_DAC_IRQHandler+0x10>)
 8001296:	f002 fcd9 	bl	8003c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	2000039c 	.word	0x2000039c

080012a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012ac:	4a14      	ldr	r2, [pc, #80]	; (8001300 <_sbrk+0x5c>)
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <_sbrk+0x60>)
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <_sbrk+0x64>)
 80012c2:	4a12      	ldr	r2, [pc, #72]	; (800130c <_sbrk+0x68>)
 80012c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <_sbrk+0x64>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d207      	bcs.n	80012e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d4:	f004 f83e 	bl	8005354 <__errno>
 80012d8:	4603      	mov	r3, r0
 80012da:	220c      	movs	r2, #12
 80012dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012e2:	e009      	b.n	80012f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <_sbrk+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ea:	4b07      	ldr	r3, [pc, #28]	; (8001308 <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <_sbrk+0x64>)
 80012f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012f6:	68fb      	ldr	r3, [r7, #12]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20030000 	.word	0x20030000
 8001304:	00000400 	.word	0x00000400
 8001308:	20000308 	.word	0x20000308
 800130c:	200004e8 	.word	0x200004e8

08001310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <SystemInit+0x20>)
 8001316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800131a:	4a05      	ldr	r2, [pc, #20]	; (8001330 <SystemInit+0x20>)
 800131c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b092      	sub	sp, #72	; 0x48
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
 8001354:	615a      	str	r2, [r3, #20]
 8001356:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	2220      	movs	r2, #32
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f004 f91b 	bl	800559a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001364:	4b33      	ldr	r3, [pc, #204]	; (8001434 <MX_TIM1_Init+0x100>)
 8001366:	4a34      	ldr	r2, [pc, #208]	; (8001438 <MX_TIM1_Init+0x104>)
 8001368:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 59;
 800136a:	4b32      	ldr	r3, [pc, #200]	; (8001434 <MX_TIM1_Init+0x100>)
 800136c:	223b      	movs	r2, #59	; 0x3b
 800136e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001370:	4b30      	ldr	r3, [pc, #192]	; (8001434 <MX_TIM1_Init+0x100>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001376:	4b2f      	ldr	r3, [pc, #188]	; (8001434 <MX_TIM1_Init+0x100>)
 8001378:	2200      	movs	r2, #0
 800137a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137c:	4b2d      	ldr	r3, [pc, #180]	; (8001434 <MX_TIM1_Init+0x100>)
 800137e:	2200      	movs	r2, #0
 8001380:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001382:	4b2c      	ldr	r3, [pc, #176]	; (8001434 <MX_TIM1_Init+0x100>)
 8001384:	2200      	movs	r2, #0
 8001386:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001388:	4b2a      	ldr	r3, [pc, #168]	; (8001434 <MX_TIM1_Init+0x100>)
 800138a:	2200      	movs	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800138e:	4829      	ldr	r0, [pc, #164]	; (8001434 <MX_TIM1_Init+0x100>)
 8001390:	f002 fb45 	bl	8003a1e <HAL_TIM_PWM_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800139a:	f7ff ff21 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013aa:	4619      	mov	r1, r3
 80013ac:	4821      	ldr	r0, [pc, #132]	; (8001434 <MX_TIM1_Init+0x100>)
 80013ae:	f003 f8b5 	bl	800451c <HAL_TIMEx_MasterConfigSynchronization>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80013b8:	f7ff ff12 	bl	80011e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013bc:	2360      	movs	r3, #96	; 0x60
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 32769;
 80013c0:	f248 0301 	movw	r3, #32769	; 0x8001
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013ca:	2300      	movs	r3, #0
 80013cc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013de:	2200      	movs	r2, #0
 80013e0:	4619      	mov	r1, r3
 80013e2:	4814      	ldr	r0, [pc, #80]	; (8001434 <MX_TIM1_Init+0x100>)
 80013e4:	f002 fd3a 	bl	8003e5c <HAL_TIM_PWM_ConfigChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80013ee:	f7ff fef7 	bl	80011e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001406:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800140a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	4619      	mov	r1, r3
 8001414:	4807      	ldr	r0, [pc, #28]	; (8001434 <MX_TIM1_Init+0x100>)
 8001416:	f003 f8fd 	bl	8004614 <HAL_TIMEx_ConfigBreakDeadTime>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001420:	f7ff fede 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001424:	4803      	ldr	r0, [pc, #12]	; (8001434 <MX_TIM1_Init+0x100>)
 8001426:	f000 f90d 	bl	8001644 <HAL_TIM_MspPostInit>

}
 800142a:	bf00      	nop
 800142c:	3748      	adds	r7, #72	; 0x48
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2000030c 	.word	0x2000030c
 8001438:	40010000 	.word	0x40010000

0800143c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001442:	f107 0320 	add.w	r3, r7, #32
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]
 800145a:	615a      	str	r2, [r3, #20]
 800145c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800145e:	4b2c      	ldr	r3, [pc, #176]	; (8001510 <MX_TIM4_Init+0xd4>)
 8001460:	4a2c      	ldr	r2, [pc, #176]	; (8001514 <MX_TIM4_Init+0xd8>)
 8001462:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 59;
 8001464:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <MX_TIM4_Init+0xd4>)
 8001466:	223b      	movs	r2, #59	; 0x3b
 8001468:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146a:	4b29      	ldr	r3, [pc, #164]	; (8001510 <MX_TIM4_Init+0xd4>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8001470:	4b27      	ldr	r3, [pc, #156]	; (8001510 <MX_TIM4_Init+0xd4>)
 8001472:	2263      	movs	r2, #99	; 0x63
 8001474:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001476:	4b26      	ldr	r3, [pc, #152]	; (8001510 <MX_TIM4_Init+0xd4>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147c:	4b24      	ldr	r3, [pc, #144]	; (8001510 <MX_TIM4_Init+0xd4>)
 800147e:	2200      	movs	r2, #0
 8001480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001482:	4823      	ldr	r0, [pc, #140]	; (8001510 <MX_TIM4_Init+0xd4>)
 8001484:	f002 facb 	bl	8003a1e <HAL_TIM_PWM_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800148e:	f7ff fea7 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800149a:	f107 0320 	add.w	r3, r7, #32
 800149e:	4619      	mov	r1, r3
 80014a0:	481b      	ldr	r0, [pc, #108]	; (8001510 <MX_TIM4_Init+0xd4>)
 80014a2:	f003 f83b 	bl	800451c <HAL_TIMEx_MasterConfigSynchronization>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80014ac:	f7ff fe98 	bl	80011e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014b0:	2360      	movs	r3, #96	; 0x60
 80014b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	2204      	movs	r2, #4
 80014c4:	4619      	mov	r1, r3
 80014c6:	4812      	ldr	r0, [pc, #72]	; (8001510 <MX_TIM4_Init+0xd4>)
 80014c8:	f002 fcc8 	bl	8003e5c <HAL_TIM_PWM_ConfigChannel>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80014d2:	f7ff fe85 	bl	80011e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	2208      	movs	r2, #8
 80014da:	4619      	mov	r1, r3
 80014dc:	480c      	ldr	r0, [pc, #48]	; (8001510 <MX_TIM4_Init+0xd4>)
 80014de:	f002 fcbd 	bl	8003e5c <HAL_TIM_PWM_ConfigChannel>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80014e8:	f7ff fe7a 	bl	80011e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	220c      	movs	r2, #12
 80014f0:	4619      	mov	r1, r3
 80014f2:	4807      	ldr	r0, [pc, #28]	; (8001510 <MX_TIM4_Init+0xd4>)
 80014f4:	f002 fcb2 	bl	8003e5c <HAL_TIM_PWM_ConfigChannel>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 80014fe:	f7ff fe6f 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001502:	4803      	ldr	r0, [pc, #12]	; (8001510 <MX_TIM4_Init+0xd4>)
 8001504:	f000 f89e 	bl	8001644 <HAL_TIM_MspPostInit>

}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	; 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000354 	.word	0x20000354
 8001514:	40000800 	.word	0x40000800

08001518 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151e:	463b      	mov	r3, r7
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <MX_TIM6_Init+0x64>)
 8001528:	4a15      	ldr	r2, [pc, #84]	; (8001580 <MX_TIM6_Init+0x68>)
 800152a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 59999;
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <MX_TIM6_Init+0x64>)
 800152e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001532:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <MX_TIM6_Init+0x64>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <MX_TIM6_Init+0x64>)
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001540:	4b0e      	ldr	r3, [pc, #56]	; (800157c <MX_TIM6_Init+0x64>)
 8001542:	2200      	movs	r2, #0
 8001544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001546:	480d      	ldr	r0, [pc, #52]	; (800157c <MX_TIM6_Init+0x64>)
 8001548:	f002 f97a 	bl	8003840 <HAL_TIM_Base_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001552:	f7ff fe45 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001556:	2300      	movs	r3, #0
 8001558:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800155e:	463b      	mov	r3, r7
 8001560:	4619      	mov	r1, r3
 8001562:	4806      	ldr	r0, [pc, #24]	; (800157c <MX_TIM6_Init+0x64>)
 8001564:	f002 ffda 	bl	800451c <HAL_TIMEx_MasterConfigSynchronization>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800156e:	f7ff fe37 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	2000039c 	.word	0x2000039c
 8001580:	40001000 	.word	0x40001000

08001584 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a15      	ldr	r2, [pc, #84]	; (80015e8 <HAL_TIM_PWM_MspInit+0x64>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d10e      	bne.n	80015b4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b14      	ldr	r3, [pc, #80]	; (80015ec <HAL_TIM_PWM_MspInit+0x68>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	4a13      	ldr	r2, [pc, #76]	; (80015ec <HAL_TIM_PWM_MspInit+0x68>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6453      	str	r3, [r2, #68]	; 0x44
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <HAL_TIM_PWM_MspInit+0x68>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80015b2:	e012      	b.n	80015da <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM4)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0d      	ldr	r2, [pc, #52]	; (80015f0 <HAL_TIM_PWM_MspInit+0x6c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d10d      	bne.n	80015da <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <HAL_TIM_PWM_MspInit+0x68>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	4a09      	ldr	r2, [pc, #36]	; (80015ec <HAL_TIM_PWM_MspInit+0x68>)
 80015c8:	f043 0304 	orr.w	r3, r3, #4
 80015cc:	6413      	str	r3, [r2, #64]	; 0x40
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <HAL_TIM_PWM_MspInit+0x68>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40010000 	.word	0x40010000
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40000800 	.word	0x40000800

080015f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0e      	ldr	r2, [pc, #56]	; (800163c <HAL_TIM_Base_MspInit+0x48>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d115      	bne.n	8001632 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <HAL_TIM_Base_MspInit+0x4c>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	4a0c      	ldr	r2, [pc, #48]	; (8001640 <HAL_TIM_Base_MspInit+0x4c>)
 8001610:	f043 0310 	orr.w	r3, r3, #16
 8001614:	6413      	str	r3, [r2, #64]	; 0x40
 8001616:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_TIM_Base_MspInit+0x4c>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	f003 0310 	and.w	r3, r3, #16
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	2036      	movs	r0, #54	; 0x36
 8001628:	f000 fa7d 	bl	8001b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800162c:	2036      	movs	r0, #54	; 0x36
 800162e:	f000 fa96 	bl	8001b5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40001000 	.word	0x40001000
 8001640:	40023800 	.word	0x40023800

08001644 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	; 0x28
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a25      	ldr	r2, [pc, #148]	; (80016f8 <HAL_TIM_MspPostInit+0xb4>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d11f      	bne.n	80016a6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	4b24      	ldr	r3, [pc, #144]	; (80016fc <HAL_TIM_MspPostInit+0xb8>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a23      	ldr	r2, [pc, #140]	; (80016fc <HAL_TIM_MspPostInit+0xb8>)
 8001670:	f043 0310 	orr.w	r3, r3, #16
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b21      	ldr	r3, [pc, #132]	; (80016fc <HAL_TIM_MspPostInit+0xb8>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001682:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001694:	2301      	movs	r3, #1
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	4818      	ldr	r0, [pc, #96]	; (8001700 <HAL_TIM_MspPostInit+0xbc>)
 80016a0:	f000 fa78 	bl	8001b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80016a4:	e023      	b.n	80016ee <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM4)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a16      	ldr	r2, [pc, #88]	; (8001704 <HAL_TIM_MspPostInit+0xc0>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d11e      	bne.n	80016ee <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_TIM_MspPostInit+0xb8>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	4a10      	ldr	r2, [pc, #64]	; (80016fc <HAL_TIM_MspPostInit+0xb8>)
 80016ba:	f043 0308 	orr.w	r3, r3, #8
 80016be:	6313      	str	r3, [r2, #48]	; 0x30
 80016c0:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <HAL_TIM_MspPostInit+0xb8>)
 80016c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80016cc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80016d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016de:	2302      	movs	r3, #2
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4619      	mov	r1, r3
 80016e8:	4807      	ldr	r0, [pc, #28]	; (8001708 <HAL_TIM_MspPostInit+0xc4>)
 80016ea:	f000 fa53 	bl	8001b94 <HAL_GPIO_Init>
}
 80016ee:	bf00      	nop
 80016f0:	3728      	adds	r7, #40	; 0x28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40010000 	.word	0x40010000
 80016fc:	40023800 	.word	0x40023800
 8001700:	40021000 	.word	0x40021000
 8001704:	40000800 	.word	0x40000800
 8001708:	40020c00 	.word	0x40020c00

0800170c <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_USART6_UART_Init+0x4c>)
 8001712:	4a12      	ldr	r2, [pc, #72]	; (800175c <MX_USART6_UART_Init+0x50>)
 8001714:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <MX_USART6_UART_Init+0x4c>)
 8001718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800171c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_USART6_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_USART6_UART_Init+0x4c>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_USART6_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_USART6_UART_Init+0x4c>)
 8001732:	220c      	movs	r2, #12
 8001734:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MX_USART6_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_USART6_UART_Init+0x4c>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_USART6_UART_Init+0x4c>)
 8001744:	f002 ffcc 	bl	80046e0 <HAL_UART_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800174e:	f7ff fd47 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200003e4 	.word	0x200003e4
 800175c:	40011400 	.word	0x40011400

08001760 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	; 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a19      	ldr	r2, [pc, #100]	; (80017e4 <HAL_UART_MspInit+0x84>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d12b      	bne.n	80017da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <HAL_UART_MspInit+0x88>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	4a17      	ldr	r2, [pc, #92]	; (80017e8 <HAL_UART_MspInit+0x88>)
 800178c:	f043 0320 	orr.w	r3, r3, #32
 8001790:	6453      	str	r3, [r2, #68]	; 0x44
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_UART_MspInit+0x88>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	f003 0320 	and.w	r3, r3, #32
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <HAL_UART_MspInit+0x88>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a10      	ldr	r2, [pc, #64]	; (80017e8 <HAL_UART_MspInit+0x88>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <HAL_UART_MspInit+0x88>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017ba:	23c0      	movs	r3, #192	; 0xc0
 80017bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c6:	2303      	movs	r3, #3
 80017c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80017ca:	2308      	movs	r3, #8
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	4805      	ldr	r0, [pc, #20]	; (80017ec <HAL_UART_MspInit+0x8c>)
 80017d6:	f000 f9dd 	bl	8001b94 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80017da:	bf00      	nop
 80017dc:	3728      	adds	r7, #40	; 0x28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40011400 	.word	0x40011400
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40020800 	.word	0x40020800

080017f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001828 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f4:	480d      	ldr	r0, [pc, #52]	; (800182c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017f6:	490e      	ldr	r1, [pc, #56]	; (8001830 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017f8:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017fc:	e002      	b.n	8001804 <LoopCopyDataInit>

080017fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001802:	3304      	adds	r3, #4

08001804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001808:	d3f9      	bcc.n	80017fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180a:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800180c:	4c0b      	ldr	r4, [pc, #44]	; (800183c <LoopFillZerobss+0x26>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001810:	e001      	b.n	8001816 <LoopFillZerobss>

08001812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001814:	3204      	adds	r2, #4

08001816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001818:	d3fb      	bcc.n	8001812 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800181a:	f7ff fd79 	bl	8001310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800181e:	f003 fe95 	bl	800554c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001822:	f7ff fb8f 	bl	8000f44 <main>
  bx  lr    
 8001826:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001828:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800182c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001830:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8001834:	080062a4 	.word	0x080062a4
  ldr r2, =_sbss
 8001838:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 800183c:	200004e8 	.word	0x200004e8

08001840 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001840:	e7fe      	b.n	8001840 <ADC_IRQHandler>
	...

08001844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001848:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <HAL_Init+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0d      	ldr	r2, [pc, #52]	; (8001884 <HAL_Init+0x40>)
 800184e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001852:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_Init+0x40>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <HAL_Init+0x40>)
 800185a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800185e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a07      	ldr	r2, [pc, #28]	; (8001884 <HAL_Init+0x40>)
 8001866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186c:	2003      	movs	r0, #3
 800186e:	f000 f94f 	bl	8001b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001872:	200f      	movs	r0, #15
 8001874:	f000 f808 	bl	8001888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001878:	f7ff fcb8 	bl	80011ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023c00 	.word	0x40023c00

08001888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_InitTick+0x54>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_InitTick+0x58>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189e:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 f967 	bl	8001b7a <HAL_SYSTICK_Config>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00e      	b.n	80018d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b0f      	cmp	r3, #15
 80018ba:	d80a      	bhi.n	80018d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018bc:	2200      	movs	r2, #0
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018c4:	f000 f92f 	bl	8001b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c8:	4a06      	ldr	r2, [pc, #24]	; (80018e4 <HAL_InitTick+0x5c>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e000      	b.n	80018d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000200 	.word	0x20000200
 80018e0:	20000208 	.word	0x20000208
 80018e4:	20000204 	.word	0x20000204

080018e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_IncTick+0x20>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_IncTick+0x24>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a04      	ldr	r2, [pc, #16]	; (800190c <HAL_IncTick+0x24>)
 80018fa:	6013      	str	r3, [r2, #0]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000208 	.word	0x20000208
 800190c:	20000428 	.word	0x20000428

08001910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return uwTick;
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <HAL_GetTick+0x14>)
 8001916:	681b      	ldr	r3, [r3, #0]
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000428 	.word	0x20000428

08001928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001930:	f7ff ffee 	bl	8001910 <HAL_GetTick>
 8001934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001940:	d005      	beq.n	800194e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001942:	4b0a      	ldr	r3, [pc, #40]	; (800196c <HAL_Delay+0x44>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4413      	add	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800194e:	bf00      	nop
 8001950:	f7ff ffde 	bl	8001910 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	429a      	cmp	r2, r3
 800195e:	d8f7      	bhi.n	8001950 <HAL_Delay+0x28>
  {
  }
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000208 	.word	0x20000208

08001970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800198c:	4013      	ands	r3, r2
 800198e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800199c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a2:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	60d3      	str	r3, [r2, #12]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <__NVIC_GetPriorityGrouping+0x18>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	f003 0307 	and.w	r3, r3, #7
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	db0b      	blt.n	80019fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	f003 021f 	and.w	r2, r3, #31
 80019ec:	4907      	ldr	r1, [pc, #28]	; (8001a0c <__NVIC_EnableIRQ+0x38>)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	2001      	movs	r0, #1
 80019f6:	fa00 f202 	lsl.w	r2, r0, r2
 80019fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000e100 	.word	0xe000e100

08001a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	6039      	str	r1, [r7, #0]
 8001a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	db0a      	blt.n	8001a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	490c      	ldr	r1, [pc, #48]	; (8001a5c <__NVIC_SetPriority+0x4c>)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	0112      	lsls	r2, r2, #4
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	440b      	add	r3, r1
 8001a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a38:	e00a      	b.n	8001a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4908      	ldr	r1, [pc, #32]	; (8001a60 <__NVIC_SetPriority+0x50>)
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	3b04      	subs	r3, #4
 8001a48:	0112      	lsls	r2, r2, #4
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	761a      	strb	r2, [r3, #24]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000e100 	.word	0xe000e100
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f1c3 0307 	rsb	r3, r3, #7
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	bf28      	it	cs
 8001a82:	2304      	movcs	r3, #4
 8001a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	2b06      	cmp	r3, #6
 8001a8c:	d902      	bls.n	8001a94 <NVIC_EncodePriority+0x30>
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3b03      	subs	r3, #3
 8001a92:	e000      	b.n	8001a96 <NVIC_EncodePriority+0x32>
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab6:	43d9      	mvns	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	4313      	orrs	r3, r2
         );
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3724      	adds	r7, #36	; 0x24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001adc:	d301      	bcc.n	8001ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e00f      	b.n	8001b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <SysTick_Config+0x40>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aea:	210f      	movs	r1, #15
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001af0:	f7ff ff8e 	bl	8001a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <SysTick_Config+0x40>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001afa:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <SysTick_Config+0x40>)
 8001afc:	2207      	movs	r2, #7
 8001afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	e000e010 	.word	0xe000e010

08001b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ff29 	bl	8001970 <__NVIC_SetPriorityGrouping>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b38:	f7ff ff3e 	bl	80019b8 <__NVIC_GetPriorityGrouping>
 8001b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	6978      	ldr	r0, [r7, #20]
 8001b44:	f7ff ff8e 	bl	8001a64 <NVIC_EncodePriority>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff5d 	bl	8001a10 <__NVIC_SetPriority>
}
 8001b56:	bf00      	nop
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	4603      	mov	r3, r0
 8001b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff31 	bl	80019d4 <__NVIC_EnableIRQ>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ffa2 	bl	8001acc <SysTick_Config>
 8001b88:	4603      	mov	r3, r0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b089      	sub	sp, #36	; 0x24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
 8001bae:	e177      	b.n	8001ea0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	f040 8166 	bne.w	8001e9a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d005      	beq.n	8001be6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d130      	bne.n	8001c48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 0201 	and.w	r2, r3, #1
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	d017      	beq.n	8001c84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	2203      	movs	r2, #3
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d123      	bne.n	8001cd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	08da      	lsrs	r2, r3, #3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3208      	adds	r2, #8
 8001c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	220f      	movs	r2, #15
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	691a      	ldr	r2, [r3, #16]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	08da      	lsrs	r2, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3208      	adds	r2, #8
 8001cd2:	69b9      	ldr	r1, [r7, #24]
 8001cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0203 	and.w	r2, r3, #3
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80c0 	beq.w	8001e9a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	4b66      	ldr	r3, [pc, #408]	; (8001eb8 <HAL_GPIO_Init+0x324>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	4a65      	ldr	r2, [pc, #404]	; (8001eb8 <HAL_GPIO_Init+0x324>)
 8001d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d28:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2a:	4b63      	ldr	r3, [pc, #396]	; (8001eb8 <HAL_GPIO_Init+0x324>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d36:	4a61      	ldr	r2, [pc, #388]	; (8001ebc <HAL_GPIO_Init+0x328>)
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	220f      	movs	r2, #15
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a58      	ldr	r2, [pc, #352]	; (8001ec0 <HAL_GPIO_Init+0x32c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d037      	beq.n	8001dd2 <HAL_GPIO_Init+0x23e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a57      	ldr	r2, [pc, #348]	; (8001ec4 <HAL_GPIO_Init+0x330>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d031      	beq.n	8001dce <HAL_GPIO_Init+0x23a>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a56      	ldr	r2, [pc, #344]	; (8001ec8 <HAL_GPIO_Init+0x334>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d02b      	beq.n	8001dca <HAL_GPIO_Init+0x236>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a55      	ldr	r2, [pc, #340]	; (8001ecc <HAL_GPIO_Init+0x338>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d025      	beq.n	8001dc6 <HAL_GPIO_Init+0x232>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a54      	ldr	r2, [pc, #336]	; (8001ed0 <HAL_GPIO_Init+0x33c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d01f      	beq.n	8001dc2 <HAL_GPIO_Init+0x22e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a53      	ldr	r2, [pc, #332]	; (8001ed4 <HAL_GPIO_Init+0x340>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d019      	beq.n	8001dbe <HAL_GPIO_Init+0x22a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a52      	ldr	r2, [pc, #328]	; (8001ed8 <HAL_GPIO_Init+0x344>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d013      	beq.n	8001dba <HAL_GPIO_Init+0x226>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a51      	ldr	r2, [pc, #324]	; (8001edc <HAL_GPIO_Init+0x348>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d00d      	beq.n	8001db6 <HAL_GPIO_Init+0x222>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a50      	ldr	r2, [pc, #320]	; (8001ee0 <HAL_GPIO_Init+0x34c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d007      	beq.n	8001db2 <HAL_GPIO_Init+0x21e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4f      	ldr	r2, [pc, #316]	; (8001ee4 <HAL_GPIO_Init+0x350>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d101      	bne.n	8001dae <HAL_GPIO_Init+0x21a>
 8001daa:	2309      	movs	r3, #9
 8001dac:	e012      	b.n	8001dd4 <HAL_GPIO_Init+0x240>
 8001dae:	230a      	movs	r3, #10
 8001db0:	e010      	b.n	8001dd4 <HAL_GPIO_Init+0x240>
 8001db2:	2308      	movs	r3, #8
 8001db4:	e00e      	b.n	8001dd4 <HAL_GPIO_Init+0x240>
 8001db6:	2307      	movs	r3, #7
 8001db8:	e00c      	b.n	8001dd4 <HAL_GPIO_Init+0x240>
 8001dba:	2306      	movs	r3, #6
 8001dbc:	e00a      	b.n	8001dd4 <HAL_GPIO_Init+0x240>
 8001dbe:	2305      	movs	r3, #5
 8001dc0:	e008      	b.n	8001dd4 <HAL_GPIO_Init+0x240>
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	e006      	b.n	8001dd4 <HAL_GPIO_Init+0x240>
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e004      	b.n	8001dd4 <HAL_GPIO_Init+0x240>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e002      	b.n	8001dd4 <HAL_GPIO_Init+0x240>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <HAL_GPIO_Init+0x240>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	69fa      	ldr	r2, [r7, #28]
 8001dd6:	f002 0203 	and.w	r2, r2, #3
 8001dda:	0092      	lsls	r2, r2, #2
 8001ddc:	4093      	lsls	r3, r2
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001de4:	4935      	ldr	r1, [pc, #212]	; (8001ebc <HAL_GPIO_Init+0x328>)
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	089b      	lsrs	r3, r3, #2
 8001dea:	3302      	adds	r3, #2
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001df2:	4b3d      	ldr	r3, [pc, #244]	; (8001ee8 <HAL_GPIO_Init+0x354>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e16:	4a34      	ldr	r2, [pc, #208]	; (8001ee8 <HAL_GPIO_Init+0x354>)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e1c:	4b32      	ldr	r3, [pc, #200]	; (8001ee8 <HAL_GPIO_Init+0x354>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e40:	4a29      	ldr	r2, [pc, #164]	; (8001ee8 <HAL_GPIO_Init+0x354>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e46:	4b28      	ldr	r3, [pc, #160]	; (8001ee8 <HAL_GPIO_Init+0x354>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4013      	ands	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e6a:	4a1f      	ldr	r2, [pc, #124]	; (8001ee8 <HAL_GPIO_Init+0x354>)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e70:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <HAL_GPIO_Init+0x354>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e94:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <HAL_GPIO_Init+0x354>)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	61fb      	str	r3, [r7, #28]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	2b0f      	cmp	r3, #15
 8001ea4:	f67f ae84 	bls.w	8001bb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ea8:	bf00      	nop
 8001eaa:	bf00      	nop
 8001eac:	3724      	adds	r7, #36	; 0x24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40013800 	.word	0x40013800
 8001ec0:	40020000 	.word	0x40020000
 8001ec4:	40020400 	.word	0x40020400
 8001ec8:	40020800 	.word	0x40020800
 8001ecc:	40020c00 	.word	0x40020c00
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40021400 	.word	0x40021400
 8001ed8:	40021800 	.word	0x40021800
 8001edc:	40021c00 	.word	0x40021c00
 8001ee0:	40022000 	.word	0x40022000
 8001ee4:	40022400 	.word	0x40022400
 8001ee8:	40013c00 	.word	0x40013c00

08001eec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691a      	ldr	r2, [r3, #16]
 8001efc:	887b      	ldrh	r3, [r7, #2]
 8001efe:	4013      	ands	r3, r2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d002      	beq.n	8001f0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f04:	2301      	movs	r3, #1
 8001f06:	73fb      	strb	r3, [r7, #15]
 8001f08:	e001      	b.n	8001f0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e12b      	b.n	8002186 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d106      	bne.n	8001f48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7fe fbce 	bl	80006e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2224      	movs	r2, #36	; 0x24
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0201 	bic.w	r2, r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f80:	f001 fc36 	bl	80037f0 <HAL_RCC_GetPCLK1Freq>
 8001f84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	4a81      	ldr	r2, [pc, #516]	; (8002190 <HAL_I2C_Init+0x274>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d807      	bhi.n	8001fa0 <HAL_I2C_Init+0x84>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4a80      	ldr	r2, [pc, #512]	; (8002194 <HAL_I2C_Init+0x278>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	bf94      	ite	ls
 8001f98:	2301      	movls	r3, #1
 8001f9a:	2300      	movhi	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	e006      	b.n	8001fae <HAL_I2C_Init+0x92>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4a7d      	ldr	r2, [pc, #500]	; (8002198 <HAL_I2C_Init+0x27c>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	bf94      	ite	ls
 8001fa8:	2301      	movls	r3, #1
 8001faa:	2300      	movhi	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e0e7      	b.n	8002186 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4a78      	ldr	r2, [pc, #480]	; (800219c <HAL_I2C_Init+0x280>)
 8001fba:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbe:	0c9b      	lsrs	r3, r3, #18
 8001fc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	4a6a      	ldr	r2, [pc, #424]	; (8002190 <HAL_I2C_Init+0x274>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d802      	bhi.n	8001ff0 <HAL_I2C_Init+0xd4>
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	3301      	adds	r3, #1
 8001fee:	e009      	b.n	8002004 <HAL_I2C_Init+0xe8>
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ff6:	fb02 f303 	mul.w	r3, r2, r3
 8001ffa:	4a69      	ldr	r2, [pc, #420]	; (80021a0 <HAL_I2C_Init+0x284>)
 8001ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8002000:	099b      	lsrs	r3, r3, #6
 8002002:	3301      	adds	r3, #1
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	430b      	orrs	r3, r1
 800200a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002016:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	495c      	ldr	r1, [pc, #368]	; (8002190 <HAL_I2C_Init+0x274>)
 8002020:	428b      	cmp	r3, r1
 8002022:	d819      	bhi.n	8002058 <HAL_I2C_Init+0x13c>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	1e59      	subs	r1, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002032:	1c59      	adds	r1, r3, #1
 8002034:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002038:	400b      	ands	r3, r1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00a      	beq.n	8002054 <HAL_I2C_Init+0x138>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1e59      	subs	r1, r3, #1
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	fbb1 f3f3 	udiv	r3, r1, r3
 800204c:	3301      	adds	r3, #1
 800204e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002052:	e051      	b.n	80020f8 <HAL_I2C_Init+0x1dc>
 8002054:	2304      	movs	r3, #4
 8002056:	e04f      	b.n	80020f8 <HAL_I2C_Init+0x1dc>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d111      	bne.n	8002084 <HAL_I2C_Init+0x168>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	1e58      	subs	r0, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6859      	ldr	r1, [r3, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	440b      	add	r3, r1
 800206e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002072:	3301      	adds	r3, #1
 8002074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002078:	2b00      	cmp	r3, #0
 800207a:	bf0c      	ite	eq
 800207c:	2301      	moveq	r3, #1
 800207e:	2300      	movne	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	e012      	b.n	80020aa <HAL_I2C_Init+0x18e>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	1e58      	subs	r0, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6859      	ldr	r1, [r3, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	0099      	lsls	r1, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	fbb0 f3f3 	udiv	r3, r0, r3
 800209a:	3301      	adds	r3, #1
 800209c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	bf0c      	ite	eq
 80020a4:	2301      	moveq	r3, #1
 80020a6:	2300      	movne	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_I2C_Init+0x196>
 80020ae:	2301      	movs	r3, #1
 80020b0:	e022      	b.n	80020f8 <HAL_I2C_Init+0x1dc>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10e      	bne.n	80020d8 <HAL_I2C_Init+0x1bc>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1e58      	subs	r0, r3, #1
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6859      	ldr	r1, [r3, #4]
 80020c2:	460b      	mov	r3, r1
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	440b      	add	r3, r1
 80020c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80020cc:	3301      	adds	r3, #1
 80020ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020d6:	e00f      	b.n	80020f8 <HAL_I2C_Init+0x1dc>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	1e58      	subs	r0, r3, #1
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6859      	ldr	r1, [r3, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	0099      	lsls	r1, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ee:	3301      	adds	r3, #1
 80020f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	6809      	ldr	r1, [r1, #0]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69da      	ldr	r2, [r3, #28]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002126:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6911      	ldr	r1, [r2, #16]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	68d2      	ldr	r2, [r2, #12]
 8002132:	4311      	orrs	r1, r2
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	430b      	orrs	r3, r1
 800213a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0201 	orr.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2220      	movs	r2, #32
 8002172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	000186a0 	.word	0x000186a0
 8002194:	001e847f 	.word	0x001e847f
 8002198:	003d08ff 	.word	0x003d08ff
 800219c:	431bde83 	.word	0x431bde83
 80021a0:	10624dd3 	.word	0x10624dd3

080021a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b088      	sub	sp, #32
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	4608      	mov	r0, r1
 80021ae:	4611      	mov	r1, r2
 80021b0:	461a      	mov	r2, r3
 80021b2:	4603      	mov	r3, r0
 80021b4:	817b      	strh	r3, [r7, #10]
 80021b6:	460b      	mov	r3, r1
 80021b8:	813b      	strh	r3, [r7, #8]
 80021ba:	4613      	mov	r3, r2
 80021bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021be:	f7ff fba7 	bl	8001910 <HAL_GetTick>
 80021c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b20      	cmp	r3, #32
 80021ce:	f040 80d9 	bne.w	8002384 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2319      	movs	r3, #25
 80021d8:	2201      	movs	r2, #1
 80021da:	496d      	ldr	r1, [pc, #436]	; (8002390 <HAL_I2C_Mem_Write+0x1ec>)
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 fc7f 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80021e8:	2302      	movs	r3, #2
 80021ea:	e0cc      	b.n	8002386 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_I2C_Mem_Write+0x56>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e0c5      	b.n	8002386 <HAL_I2C_Mem_Write+0x1e2>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b01      	cmp	r3, #1
 800220e:	d007      	beq.n	8002220 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0201 	orr.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800222e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2221      	movs	r2, #33	; 0x21
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2240      	movs	r2, #64	; 0x40
 800223c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a3a      	ldr	r2, [r7, #32]
 800224a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002250:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4a4d      	ldr	r2, [pc, #308]	; (8002394 <HAL_I2C_Mem_Write+0x1f0>)
 8002260:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002262:	88f8      	ldrh	r0, [r7, #6]
 8002264:	893a      	ldrh	r2, [r7, #8]
 8002266:	8979      	ldrh	r1, [r7, #10]
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	4603      	mov	r3, r0
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 fab6 	bl	80027e4 <I2C_RequestMemoryWrite>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d052      	beq.n	8002324 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e081      	b.n	8002386 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 fd00 	bl	8002c8c <I2C_WaitOnTXEFlagUntilTimeout>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00d      	beq.n	80022ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	2b04      	cmp	r3, #4
 8002298:	d107      	bne.n	80022aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e06b      	b.n	8002386 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	781a      	ldrb	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c8:	3b01      	subs	r3, #1
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	3b01      	subs	r3, #1
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d11b      	bne.n	8002324 <HAL_I2C_Mem_Write+0x180>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d017      	beq.n	8002324 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	781a      	ldrb	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230e:	3b01      	subs	r3, #1
 8002310:	b29a      	uxth	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231a:	b29b      	uxth	r3, r3
 800231c:	3b01      	subs	r3, #1
 800231e:	b29a      	uxth	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1aa      	bne.n	8002282 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 fcec 	bl	8002d0e <I2C_WaitOnBTFFlagUntilTimeout>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00d      	beq.n	8002358 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	2b04      	cmp	r3, #4
 8002342:	d107      	bne.n	8002354 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002352:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e016      	b.n	8002386 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2220      	movs	r2, #32
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	e000      	b.n	8002386 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002384:	2302      	movs	r3, #2
  }
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	00100002 	.word	0x00100002
 8002394:	ffff0000 	.word	0xffff0000

08002398 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08c      	sub	sp, #48	; 0x30
 800239c:	af02      	add	r7, sp, #8
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	4608      	mov	r0, r1
 80023a2:	4611      	mov	r1, r2
 80023a4:	461a      	mov	r2, r3
 80023a6:	4603      	mov	r3, r0
 80023a8:	817b      	strh	r3, [r7, #10]
 80023aa:	460b      	mov	r3, r1
 80023ac:	813b      	strh	r3, [r7, #8]
 80023ae:	4613      	mov	r3, r2
 80023b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023b2:	f7ff faad 	bl	8001910 <HAL_GetTick>
 80023b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	f040 8208 	bne.w	80027d6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	2319      	movs	r3, #25
 80023cc:	2201      	movs	r2, #1
 80023ce:	497b      	ldr	r1, [pc, #492]	; (80025bc <HAL_I2C_Mem_Read+0x224>)
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 fb85 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80023dc:	2302      	movs	r3, #2
 80023de:	e1fb      	b.n	80027d8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <HAL_I2C_Mem_Read+0x56>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e1f4      	b.n	80027d8 <HAL_I2C_Mem_Read+0x440>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b01      	cmp	r3, #1
 8002402:	d007      	beq.n	8002414 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0201 	orr.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002422:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2222      	movs	r2, #34	; 0x22
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2240      	movs	r2, #64	; 0x40
 8002430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800243e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002444:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4a5b      	ldr	r2, [pc, #364]	; (80025c0 <HAL_I2C_Mem_Read+0x228>)
 8002454:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002456:	88f8      	ldrh	r0, [r7, #6]
 8002458:	893a      	ldrh	r2, [r7, #8]
 800245a:	8979      	ldrh	r1, [r7, #10]
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	9301      	str	r3, [sp, #4]
 8002460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	4603      	mov	r3, r0
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 fa52 	bl	8002910 <I2C_RequestMemoryRead>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e1b0      	b.n	80027d8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247a:	2b00      	cmp	r3, #0
 800247c:	d113      	bne.n	80024a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800247e:	2300      	movs	r3, #0
 8002480:	623b      	str	r3, [r7, #32]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	623b      	str	r3, [r7, #32]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	623b      	str	r3, [r7, #32]
 8002492:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	e184      	b.n	80027b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d11b      	bne.n	80024e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	61fb      	str	r3, [r7, #28]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	61fb      	str	r3, [r7, #28]
 80024d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	e164      	b.n	80027b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d11b      	bne.n	8002526 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800250c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800250e:	2300      	movs	r3, #0
 8002510:	61bb      	str	r3, [r7, #24]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	61bb      	str	r3, [r7, #24]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	61bb      	str	r3, [r7, #24]
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	e144      	b.n	80027b0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800253c:	e138      	b.n	80027b0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002542:	2b03      	cmp	r3, #3
 8002544:	f200 80f1 	bhi.w	800272a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254c:	2b01      	cmp	r3, #1
 800254e:	d123      	bne.n	8002598 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002552:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 fc1b 	bl	8002d90 <I2C_WaitOnRXNEFlagUntilTimeout>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e139      	b.n	80027d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	691a      	ldr	r2, [r3, #16]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	1c5a      	adds	r2, r3, #1
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258c:	b29b      	uxth	r3, r3
 800258e:	3b01      	subs	r3, #1
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002596:	e10b      	b.n	80027b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259c:	2b02      	cmp	r3, #2
 800259e:	d14e      	bne.n	800263e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a6:	2200      	movs	r2, #0
 80025a8:	4906      	ldr	r1, [pc, #24]	; (80025c4 <HAL_I2C_Mem_Read+0x22c>)
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 fa98 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d008      	beq.n	80025c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e10e      	b.n	80027d8 <HAL_I2C_Mem_Read+0x440>
 80025ba:	bf00      	nop
 80025bc:	00100002 	.word	0x00100002
 80025c0:	ffff0000 	.word	0xffff0000
 80025c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	691a      	ldr	r2, [r3, #16]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002600:	b29b      	uxth	r3, r3
 8002602:	3b01      	subs	r3, #1
 8002604:	b29a      	uxth	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002626:	3b01      	subs	r3, #1
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002632:	b29b      	uxth	r3, r3
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800263c:	e0b8      	b.n	80027b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002644:	2200      	movs	r2, #0
 8002646:	4966      	ldr	r1, [pc, #408]	; (80027e0 <HAL_I2C_Mem_Read+0x448>)
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 fa49 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0bf      	b.n	80027d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002666:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691a      	ldr	r2, [r3, #16]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002690:	b29b      	uxth	r3, r3
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a0:	2200      	movs	r2, #0
 80026a2:	494f      	ldr	r1, [pc, #316]	; (80027e0 <HAL_I2C_Mem_Read+0x448>)
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 fa1b 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e091      	b.n	80027d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	691a      	ldr	r2, [r3, #16]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271e:	b29b      	uxth	r3, r3
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002728:	e042      	b.n	80027b0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800272a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800272c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 fb2e 	bl	8002d90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e04c      	b.n	80027d8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002766:	b29b      	uxth	r3, r3
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b04      	cmp	r3, #4
 800277c:	d118      	bne.n	80027b0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f47f aec2 	bne.w	800253e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2220      	movs	r2, #32
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	e000      	b.n	80027d8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80027d6:	2302      	movs	r3, #2
  }
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3728      	adds	r7, #40	; 0x28
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	00010004 	.word	0x00010004

080027e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af02      	add	r7, sp, #8
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	4608      	mov	r0, r1
 80027ee:	4611      	mov	r1, r2
 80027f0:	461a      	mov	r2, r3
 80027f2:	4603      	mov	r3, r0
 80027f4:	817b      	strh	r3, [r7, #10]
 80027f6:	460b      	mov	r3, r1
 80027f8:	813b      	strh	r3, [r7, #8]
 80027fa:	4613      	mov	r3, r2
 80027fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800280c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	2200      	movs	r2, #0
 8002816:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 f960 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00d      	beq.n	8002842 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002834:	d103      	bne.n	800283e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800283c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e05f      	b.n	8002902 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002842:	897b      	ldrh	r3, [r7, #10]
 8002844:	b2db      	uxtb	r3, r3
 8002846:	461a      	mov	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002850:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	6a3a      	ldr	r2, [r7, #32]
 8002856:	492d      	ldr	r1, [pc, #180]	; (800290c <I2C_RequestMemoryWrite+0x128>)
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 f998 	bl	8002b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e04c      	b.n	8002902 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	617b      	str	r3, [r7, #20]
 800287c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800287e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002880:	6a39      	ldr	r1, [r7, #32]
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 fa02 	bl	8002c8c <I2C_WaitOnTXEFlagUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00d      	beq.n	80028aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	2b04      	cmp	r3, #4
 8002894:	d107      	bne.n	80028a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e02b      	b.n	8002902 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028aa:	88fb      	ldrh	r3, [r7, #6]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d105      	bne.n	80028bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028b0:	893b      	ldrh	r3, [r7, #8]
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	611a      	str	r2, [r3, #16]
 80028ba:	e021      	b.n	8002900 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028bc:	893b      	ldrh	r3, [r7, #8]
 80028be:	0a1b      	lsrs	r3, r3, #8
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028cc:	6a39      	ldr	r1, [r7, #32]
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 f9dc 	bl	8002c8c <I2C_WaitOnTXEFlagUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00d      	beq.n	80028f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d107      	bne.n	80028f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e005      	b.n	8002902 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028f6:	893b      	ldrh	r3, [r7, #8]
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	00010002 	.word	0x00010002

08002910 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af02      	add	r7, sp, #8
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	4608      	mov	r0, r1
 800291a:	4611      	mov	r1, r2
 800291c:	461a      	mov	r2, r3
 800291e:	4603      	mov	r3, r0
 8002920:	817b      	strh	r3, [r7, #10]
 8002922:	460b      	mov	r3, r1
 8002924:	813b      	strh	r3, [r7, #8]
 8002926:	4613      	mov	r3, r2
 8002928:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002938:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002948:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	2200      	movs	r2, #0
 8002952:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 f8c2 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00d      	beq.n	800297e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002970:	d103      	bne.n	800297a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002978:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e0aa      	b.n	8002ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800297e:	897b      	ldrh	r3, [r7, #10]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	461a      	mov	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800298c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	6a3a      	ldr	r2, [r7, #32]
 8002992:	4952      	ldr	r1, [pc, #328]	; (8002adc <I2C_RequestMemoryRead+0x1cc>)
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 f8fa 	bl	8002b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e097      	b.n	8002ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029bc:	6a39      	ldr	r1, [r7, #32]
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 f964 	bl	8002c8c <I2C_WaitOnTXEFlagUntilTimeout>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00d      	beq.n	80029e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d107      	bne.n	80029e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e076      	b.n	8002ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d105      	bne.n	80029f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029ec:	893b      	ldrh	r3, [r7, #8]
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	611a      	str	r2, [r3, #16]
 80029f6:	e021      	b.n	8002a3c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029f8:	893b      	ldrh	r3, [r7, #8]
 80029fa:	0a1b      	lsrs	r3, r3, #8
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a08:	6a39      	ldr	r1, [r7, #32]
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f93e 	bl	8002c8c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00d      	beq.n	8002a32 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d107      	bne.n	8002a2e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e050      	b.n	8002ad4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a32:	893b      	ldrh	r3, [r7, #8]
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3e:	6a39      	ldr	r1, [r7, #32]
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 f923 	bl	8002c8c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00d      	beq.n	8002a68 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d107      	bne.n	8002a64 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a62:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e035      	b.n	8002ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a76:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f82b 	bl	8002ae0 <I2C_WaitOnFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00d      	beq.n	8002aac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a9e:	d103      	bne.n	8002aa8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aa6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e013      	b.n	8002ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002aac:	897b      	ldrh	r3, [r7, #10]
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	6a3a      	ldr	r2, [r7, #32]
 8002ac0:	4906      	ldr	r1, [pc, #24]	; (8002adc <I2C_RequestMemoryRead+0x1cc>)
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 f863 	bl	8002b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	00010002 	.word	0x00010002

08002ae0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	4613      	mov	r3, r2
 8002aee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002af0:	e025      	b.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002af8:	d021      	beq.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002afa:	f7fe ff09 	bl	8001910 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d302      	bcc.n	8002b10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d116      	bne.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f043 0220 	orr.w	r2, r3, #32
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e023      	b.n	8002b86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	0c1b      	lsrs	r3, r3, #16
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d10d      	bne.n	8002b64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	43da      	mvns	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4013      	ands	r3, r2
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	bf0c      	ite	eq
 8002b5a:	2301      	moveq	r3, #1
 8002b5c:	2300      	movne	r3, #0
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	e00c      	b.n	8002b7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	43da      	mvns	r2, r3
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	bf0c      	ite	eq
 8002b76:	2301      	moveq	r3, #1
 8002b78:	2300      	movne	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d0b6      	beq.n	8002af2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b084      	sub	sp, #16
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
 8002b9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b9c:	e051      	b.n	8002c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bac:	d123      	bne.n	8002bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bbc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bc6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f043 0204 	orr.w	r2, r3, #4
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e046      	b.n	8002c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bfc:	d021      	beq.n	8002c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bfe:	f7fe fe87 	bl	8001910 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d302      	bcc.n	8002c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d116      	bne.n	8002c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f043 0220 	orr.w	r2, r3, #32
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e020      	b.n	8002c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	0c1b      	lsrs	r3, r3, #16
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d10c      	bne.n	8002c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	43da      	mvns	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	4013      	ands	r3, r2
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	bf14      	ite	ne
 8002c5e:	2301      	movne	r3, #1
 8002c60:	2300      	moveq	r3, #0
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	e00b      	b.n	8002c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	43da      	mvns	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	4013      	ands	r3, r2
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	bf14      	ite	ne
 8002c78:	2301      	movne	r3, #1
 8002c7a:	2300      	moveq	r3, #0
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d18d      	bne.n	8002b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c98:	e02d      	b.n	8002cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 f8ce 	bl	8002e3c <I2C_IsAcknowledgeFailed>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e02d      	b.n	8002d06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cb0:	d021      	beq.n	8002cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb2:	f7fe fe2d 	bl	8001910 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d302      	bcc.n	8002cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d116      	bne.n	8002cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	f043 0220 	orr.w	r2, r3, #32
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e007      	b.n	8002d06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d00:	2b80      	cmp	r3, #128	; 0x80
 8002d02:	d1ca      	bne.n	8002c9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d1a:	e02d      	b.n	8002d78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 f88d 	bl	8002e3c <I2C_IsAcknowledgeFailed>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e02d      	b.n	8002d88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d32:	d021      	beq.n	8002d78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d34:	f7fe fdec 	bl	8001910 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d302      	bcc.n	8002d4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d116      	bne.n	8002d78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2220      	movs	r2, #32
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	f043 0220 	orr.w	r2, r3, #32
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e007      	b.n	8002d88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d1ca      	bne.n	8002d1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d9c:	e042      	b.n	8002e24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	f003 0310 	and.w	r3, r3, #16
 8002da8:	2b10      	cmp	r3, #16
 8002daa:	d119      	bne.n	8002de0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f06f 0210 	mvn.w	r2, #16
 8002db4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e029      	b.n	8002e34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de0:	f7fe fd96 	bl	8001910 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d302      	bcc.n	8002df6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d116      	bne.n	8002e24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	f043 0220 	orr.w	r2, r3, #32
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e007      	b.n	8002e34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2e:	2b40      	cmp	r3, #64	; 0x40
 8002e30:	d1b5      	bne.n	8002d9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e52:	d11b      	bne.n	8002e8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	f043 0204 	orr.w	r2, r3, #4
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
 8002ea2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b20      	cmp	r3, #32
 8002eae:	d129      	bne.n	8002f04 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2224      	movs	r2, #36	; 0x24
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0201 	bic.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0210 	bic.w	r2, r2, #16
 8002ed6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	e000      	b.n	8002f06 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002f04:	2302      	movs	r3, #2
  }
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b085      	sub	sp, #20
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d12a      	bne.n	8002f82 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2224      	movs	r2, #36	; 0x24
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0201 	bic.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002f4c:	89fb      	ldrh	r3, [r7, #14]
 8002f4e:	f023 030f 	bic.w	r3, r3, #15
 8002f52:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	89fb      	ldrh	r3, [r7, #14]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	89fa      	ldrh	r2, [r7, #14]
 8002f64:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0201 	orr.w	r2, r2, #1
 8002f74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e000      	b.n	8002f84 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002f82:	2302      	movs	r3, #2
  }
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e267      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d075      	beq.n	800309a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fae:	4b88      	ldr	r3, [pc, #544]	; (80031d0 <HAL_RCC_OscConfig+0x240>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d00c      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fba:	4b85      	ldr	r3, [pc, #532]	; (80031d0 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d112      	bne.n	8002fec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fc6:	4b82      	ldr	r3, [pc, #520]	; (80031d0 <HAL_RCC_OscConfig+0x240>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fd2:	d10b      	bne.n	8002fec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd4:	4b7e      	ldr	r3, [pc, #504]	; (80031d0 <HAL_RCC_OscConfig+0x240>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d05b      	beq.n	8003098 <HAL_RCC_OscConfig+0x108>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d157      	bne.n	8003098 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e242      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff4:	d106      	bne.n	8003004 <HAL_RCC_OscConfig+0x74>
 8002ff6:	4b76      	ldr	r3, [pc, #472]	; (80031d0 <HAL_RCC_OscConfig+0x240>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a75      	ldr	r2, [pc, #468]	; (80031d0 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	e01d      	b.n	8003040 <HAL_RCC_OscConfig+0xb0>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800300c:	d10c      	bne.n	8003028 <HAL_RCC_OscConfig+0x98>
 800300e:	4b70      	ldr	r3, [pc, #448]	; (80031d0 <HAL_RCC_OscConfig+0x240>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a6f      	ldr	r2, [pc, #444]	; (80031d0 <HAL_RCC_OscConfig+0x240>)
 8003014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	4b6d      	ldr	r3, [pc, #436]	; (80031d0 <HAL_RCC_OscConfig+0x240>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a6c      	ldr	r2, [pc, #432]	; (80031d0 <HAL_RCC_OscConfig+0x240>)
 8003020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	e00b      	b.n	8003040 <HAL_RCC_OscConfig+0xb0>
 8003028:	4b69      	ldr	r3, [pc, #420]	; (80031d0 <HAL_RCC_OscConfig+0x240>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a68      	ldr	r2, [pc, #416]	; (80031d0 <HAL_RCC_OscConfig+0x240>)
 800302e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	4b66      	ldr	r3, [pc, #408]	; (80031d0 <HAL_RCC_OscConfig+0x240>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a65      	ldr	r2, [pc, #404]	; (80031d0 <HAL_RCC_OscConfig+0x240>)
 800303a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800303e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d013      	beq.n	8003070 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003048:	f7fe fc62 	bl	8001910 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003050:	f7fe fc5e 	bl	8001910 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b64      	cmp	r3, #100	; 0x64
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e207      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003062:	4b5b      	ldr	r3, [pc, #364]	; (80031d0 <HAL_RCC_OscConfig+0x240>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0f0      	beq.n	8003050 <HAL_RCC_OscConfig+0xc0>
 800306e:	e014      	b.n	800309a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003070:	f7fe fc4e 	bl	8001910 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003078:	f7fe fc4a 	bl	8001910 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b64      	cmp	r3, #100	; 0x64
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e1f3      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800308a:	4b51      	ldr	r3, [pc, #324]	; (80031d0 <HAL_RCC_OscConfig+0x240>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0xe8>
 8003096:	e000      	b.n	800309a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d063      	beq.n	800316e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030a6:	4b4a      	ldr	r3, [pc, #296]	; (80031d0 <HAL_RCC_OscConfig+0x240>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00b      	beq.n	80030ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030b2:	4b47      	ldr	r3, [pc, #284]	; (80031d0 <HAL_RCC_OscConfig+0x240>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030ba:	2b08      	cmp	r3, #8
 80030bc:	d11c      	bne.n	80030f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030be:	4b44      	ldr	r3, [pc, #272]	; (80031d0 <HAL_RCC_OscConfig+0x240>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d116      	bne.n	80030f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ca:	4b41      	ldr	r3, [pc, #260]	; (80031d0 <HAL_RCC_OscConfig+0x240>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d005      	beq.n	80030e2 <HAL_RCC_OscConfig+0x152>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d001      	beq.n	80030e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e1c7      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e2:	4b3b      	ldr	r3, [pc, #236]	; (80031d0 <HAL_RCC_OscConfig+0x240>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4937      	ldr	r1, [pc, #220]	; (80031d0 <HAL_RCC_OscConfig+0x240>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f6:	e03a      	b.n	800316e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d020      	beq.n	8003142 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003100:	4b34      	ldr	r3, [pc, #208]	; (80031d4 <HAL_RCC_OscConfig+0x244>)
 8003102:	2201      	movs	r2, #1
 8003104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003106:	f7fe fc03 	bl	8001910 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800310e:	f7fe fbff 	bl	8001910 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e1a8      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003120:	4b2b      	ldr	r3, [pc, #172]	; (80031d0 <HAL_RCC_OscConfig+0x240>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0f0      	beq.n	800310e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312c:	4b28      	ldr	r3, [pc, #160]	; (80031d0 <HAL_RCC_OscConfig+0x240>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	4925      	ldr	r1, [pc, #148]	; (80031d0 <HAL_RCC_OscConfig+0x240>)
 800313c:	4313      	orrs	r3, r2
 800313e:	600b      	str	r3, [r1, #0]
 8003140:	e015      	b.n	800316e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003142:	4b24      	ldr	r3, [pc, #144]	; (80031d4 <HAL_RCC_OscConfig+0x244>)
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003148:	f7fe fbe2 	bl	8001910 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003150:	f7fe fbde 	bl	8001910 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e187      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003162:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <HAL_RCC_OscConfig+0x240>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f0      	bne.n	8003150 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d036      	beq.n	80031e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d016      	beq.n	80031b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003182:	4b15      	ldr	r3, [pc, #84]	; (80031d8 <HAL_RCC_OscConfig+0x248>)
 8003184:	2201      	movs	r2, #1
 8003186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003188:	f7fe fbc2 	bl	8001910 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003190:	f7fe fbbe 	bl	8001910 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e167      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a2:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <HAL_RCC_OscConfig+0x240>)
 80031a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0f0      	beq.n	8003190 <HAL_RCC_OscConfig+0x200>
 80031ae:	e01b      	b.n	80031e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031b0:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <HAL_RCC_OscConfig+0x248>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b6:	f7fe fbab 	bl	8001910 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031bc:	e00e      	b.n	80031dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031be:	f7fe fba7 	bl	8001910 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d907      	bls.n	80031dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e150      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
 80031d0:	40023800 	.word	0x40023800
 80031d4:	42470000 	.word	0x42470000
 80031d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031dc:	4b88      	ldr	r3, [pc, #544]	; (8003400 <HAL_RCC_OscConfig+0x470>)
 80031de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1ea      	bne.n	80031be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 8097 	beq.w	8003324 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031f6:	2300      	movs	r3, #0
 80031f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031fa:	4b81      	ldr	r3, [pc, #516]	; (8003400 <HAL_RCC_OscConfig+0x470>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10f      	bne.n	8003226 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	4b7d      	ldr	r3, [pc, #500]	; (8003400 <HAL_RCC_OscConfig+0x470>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	4a7c      	ldr	r2, [pc, #496]	; (8003400 <HAL_RCC_OscConfig+0x470>)
 8003210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003214:	6413      	str	r3, [r2, #64]	; 0x40
 8003216:	4b7a      	ldr	r3, [pc, #488]	; (8003400 <HAL_RCC_OscConfig+0x470>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003222:	2301      	movs	r3, #1
 8003224:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003226:	4b77      	ldr	r3, [pc, #476]	; (8003404 <HAL_RCC_OscConfig+0x474>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322e:	2b00      	cmp	r3, #0
 8003230:	d118      	bne.n	8003264 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003232:	4b74      	ldr	r3, [pc, #464]	; (8003404 <HAL_RCC_OscConfig+0x474>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a73      	ldr	r2, [pc, #460]	; (8003404 <HAL_RCC_OscConfig+0x474>)
 8003238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800323c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800323e:	f7fe fb67 	bl	8001910 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003246:	f7fe fb63 	bl	8001910 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e10c      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003258:	4b6a      	ldr	r3, [pc, #424]	; (8003404 <HAL_RCC_OscConfig+0x474>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0f0      	beq.n	8003246 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d106      	bne.n	800327a <HAL_RCC_OscConfig+0x2ea>
 800326c:	4b64      	ldr	r3, [pc, #400]	; (8003400 <HAL_RCC_OscConfig+0x470>)
 800326e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003270:	4a63      	ldr	r2, [pc, #396]	; (8003400 <HAL_RCC_OscConfig+0x470>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	6713      	str	r3, [r2, #112]	; 0x70
 8003278:	e01c      	b.n	80032b4 <HAL_RCC_OscConfig+0x324>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	2b05      	cmp	r3, #5
 8003280:	d10c      	bne.n	800329c <HAL_RCC_OscConfig+0x30c>
 8003282:	4b5f      	ldr	r3, [pc, #380]	; (8003400 <HAL_RCC_OscConfig+0x470>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	4a5e      	ldr	r2, [pc, #376]	; (8003400 <HAL_RCC_OscConfig+0x470>)
 8003288:	f043 0304 	orr.w	r3, r3, #4
 800328c:	6713      	str	r3, [r2, #112]	; 0x70
 800328e:	4b5c      	ldr	r3, [pc, #368]	; (8003400 <HAL_RCC_OscConfig+0x470>)
 8003290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003292:	4a5b      	ldr	r2, [pc, #364]	; (8003400 <HAL_RCC_OscConfig+0x470>)
 8003294:	f043 0301 	orr.w	r3, r3, #1
 8003298:	6713      	str	r3, [r2, #112]	; 0x70
 800329a:	e00b      	b.n	80032b4 <HAL_RCC_OscConfig+0x324>
 800329c:	4b58      	ldr	r3, [pc, #352]	; (8003400 <HAL_RCC_OscConfig+0x470>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a0:	4a57      	ldr	r2, [pc, #348]	; (8003400 <HAL_RCC_OscConfig+0x470>)
 80032a2:	f023 0301 	bic.w	r3, r3, #1
 80032a6:	6713      	str	r3, [r2, #112]	; 0x70
 80032a8:	4b55      	ldr	r3, [pc, #340]	; (8003400 <HAL_RCC_OscConfig+0x470>)
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	4a54      	ldr	r2, [pc, #336]	; (8003400 <HAL_RCC_OscConfig+0x470>)
 80032ae:	f023 0304 	bic.w	r3, r3, #4
 80032b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d015      	beq.n	80032e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032bc:	f7fe fb28 	bl	8001910 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c2:	e00a      	b.n	80032da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c4:	f7fe fb24 	bl	8001910 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e0cb      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032da:	4b49      	ldr	r3, [pc, #292]	; (8003400 <HAL_RCC_OscConfig+0x470>)
 80032dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0ee      	beq.n	80032c4 <HAL_RCC_OscConfig+0x334>
 80032e6:	e014      	b.n	8003312 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e8:	f7fe fb12 	bl	8001910 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ee:	e00a      	b.n	8003306 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f0:	f7fe fb0e 	bl	8001910 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e0b5      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003306:	4b3e      	ldr	r3, [pc, #248]	; (8003400 <HAL_RCC_OscConfig+0x470>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1ee      	bne.n	80032f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003312:	7dfb      	ldrb	r3, [r7, #23]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d105      	bne.n	8003324 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003318:	4b39      	ldr	r3, [pc, #228]	; (8003400 <HAL_RCC_OscConfig+0x470>)
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	4a38      	ldr	r2, [pc, #224]	; (8003400 <HAL_RCC_OscConfig+0x470>)
 800331e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003322:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80a1 	beq.w	8003470 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800332e:	4b34      	ldr	r3, [pc, #208]	; (8003400 <HAL_RCC_OscConfig+0x470>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	2b08      	cmp	r3, #8
 8003338:	d05c      	beq.n	80033f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d141      	bne.n	80033c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003342:	4b31      	ldr	r3, [pc, #196]	; (8003408 <HAL_RCC_OscConfig+0x478>)
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003348:	f7fe fae2 	bl	8001910 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003350:	f7fe fade 	bl	8001910 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e087      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003362:	4b27      	ldr	r3, [pc, #156]	; (8003400 <HAL_RCC_OscConfig+0x470>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69da      	ldr	r2, [r3, #28]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	019b      	lsls	r3, r3, #6
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003384:	085b      	lsrs	r3, r3, #1
 8003386:	3b01      	subs	r3, #1
 8003388:	041b      	lsls	r3, r3, #16
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	061b      	lsls	r3, r3, #24
 8003392:	491b      	ldr	r1, [pc, #108]	; (8003400 <HAL_RCC_OscConfig+0x470>)
 8003394:	4313      	orrs	r3, r2
 8003396:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003398:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <HAL_RCC_OscConfig+0x478>)
 800339a:	2201      	movs	r2, #1
 800339c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339e:	f7fe fab7 	bl	8001910 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a6:	f7fe fab3 	bl	8001910 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e05c      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b8:	4b11      	ldr	r3, [pc, #68]	; (8003400 <HAL_RCC_OscConfig+0x470>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0f0      	beq.n	80033a6 <HAL_RCC_OscConfig+0x416>
 80033c4:	e054      	b.n	8003470 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c6:	4b10      	ldr	r3, [pc, #64]	; (8003408 <HAL_RCC_OscConfig+0x478>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033cc:	f7fe faa0 	bl	8001910 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d4:	f7fe fa9c 	bl	8001910 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e045      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e6:	4b06      	ldr	r3, [pc, #24]	; (8003400 <HAL_RCC_OscConfig+0x470>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f0      	bne.n	80033d4 <HAL_RCC_OscConfig+0x444>
 80033f2:	e03d      	b.n	8003470 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d107      	bne.n	800340c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e038      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
 8003400:	40023800 	.word	0x40023800
 8003404:	40007000 	.word	0x40007000
 8003408:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800340c:	4b1b      	ldr	r3, [pc, #108]	; (800347c <HAL_RCC_OscConfig+0x4ec>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d028      	beq.n	800346c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003424:	429a      	cmp	r2, r3
 8003426:	d121      	bne.n	800346c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003432:	429a      	cmp	r2, r3
 8003434:	d11a      	bne.n	800346c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800343c:	4013      	ands	r3, r2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003442:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003444:	4293      	cmp	r3, r2
 8003446:	d111      	bne.n	800346c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003452:	085b      	lsrs	r3, r3, #1
 8003454:	3b01      	subs	r3, #1
 8003456:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003458:	429a      	cmp	r2, r3
 800345a:	d107      	bne.n	800346c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003468:	429a      	cmp	r2, r3
 800346a:	d001      	beq.n	8003470 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40023800 	.word	0x40023800

08003480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e0cc      	b.n	800362e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003494:	4b68      	ldr	r3, [pc, #416]	; (8003638 <HAL_RCC_ClockConfig+0x1b8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 030f 	and.w	r3, r3, #15
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d90c      	bls.n	80034bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a2:	4b65      	ldr	r3, [pc, #404]	; (8003638 <HAL_RCC_ClockConfig+0x1b8>)
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034aa:	4b63      	ldr	r3, [pc, #396]	; (8003638 <HAL_RCC_ClockConfig+0x1b8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d001      	beq.n	80034bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e0b8      	b.n	800362e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d020      	beq.n	800350a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d005      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034d4:	4b59      	ldr	r3, [pc, #356]	; (800363c <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	4a58      	ldr	r2, [pc, #352]	; (800363c <HAL_RCC_ClockConfig+0x1bc>)
 80034da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d005      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034ec:	4b53      	ldr	r3, [pc, #332]	; (800363c <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	4a52      	ldr	r2, [pc, #328]	; (800363c <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f8:	4b50      	ldr	r3, [pc, #320]	; (800363c <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	494d      	ldr	r1, [pc, #308]	; (800363c <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d044      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d107      	bne.n	800352e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351e:	4b47      	ldr	r3, [pc, #284]	; (800363c <HAL_RCC_ClockConfig+0x1bc>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d119      	bne.n	800355e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e07f      	b.n	800362e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b02      	cmp	r3, #2
 8003534:	d003      	beq.n	800353e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800353a:	2b03      	cmp	r3, #3
 800353c:	d107      	bne.n	800354e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800353e:	4b3f      	ldr	r3, [pc, #252]	; (800363c <HAL_RCC_ClockConfig+0x1bc>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d109      	bne.n	800355e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e06f      	b.n	800362e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354e:	4b3b      	ldr	r3, [pc, #236]	; (800363c <HAL_RCC_ClockConfig+0x1bc>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e067      	b.n	800362e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800355e:	4b37      	ldr	r3, [pc, #220]	; (800363c <HAL_RCC_ClockConfig+0x1bc>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f023 0203 	bic.w	r2, r3, #3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	4934      	ldr	r1, [pc, #208]	; (800363c <HAL_RCC_ClockConfig+0x1bc>)
 800356c:	4313      	orrs	r3, r2
 800356e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003570:	f7fe f9ce 	bl	8001910 <HAL_GetTick>
 8003574:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003576:	e00a      	b.n	800358e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003578:	f7fe f9ca 	bl	8001910 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	f241 3288 	movw	r2, #5000	; 0x1388
 8003586:	4293      	cmp	r3, r2
 8003588:	d901      	bls.n	800358e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e04f      	b.n	800362e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358e:	4b2b      	ldr	r3, [pc, #172]	; (800363c <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 020c 	and.w	r2, r3, #12
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	429a      	cmp	r2, r3
 800359e:	d1eb      	bne.n	8003578 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035a0:	4b25      	ldr	r3, [pc, #148]	; (8003638 <HAL_RCC_ClockConfig+0x1b8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 030f 	and.w	r3, r3, #15
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d20c      	bcs.n	80035c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ae:	4b22      	ldr	r3, [pc, #136]	; (8003638 <HAL_RCC_ClockConfig+0x1b8>)
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b6:	4b20      	ldr	r3, [pc, #128]	; (8003638 <HAL_RCC_ClockConfig+0x1b8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d001      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e032      	b.n	800362e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d008      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d4:	4b19      	ldr	r3, [pc, #100]	; (800363c <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	4916      	ldr	r1, [pc, #88]	; (800363c <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d009      	beq.n	8003606 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035f2:	4b12      	ldr	r3, [pc, #72]	; (800363c <HAL_RCC_ClockConfig+0x1bc>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	490e      	ldr	r1, [pc, #56]	; (800363c <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	4313      	orrs	r3, r2
 8003604:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003606:	f000 f821 	bl	800364c <HAL_RCC_GetSysClockFreq>
 800360a:	4602      	mov	r2, r0
 800360c:	4b0b      	ldr	r3, [pc, #44]	; (800363c <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	091b      	lsrs	r3, r3, #4
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	490a      	ldr	r1, [pc, #40]	; (8003640 <HAL_RCC_ClockConfig+0x1c0>)
 8003618:	5ccb      	ldrb	r3, [r1, r3]
 800361a:	fa22 f303 	lsr.w	r3, r2, r3
 800361e:	4a09      	ldr	r2, [pc, #36]	; (8003644 <HAL_RCC_ClockConfig+0x1c4>)
 8003620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003622:	4b09      	ldr	r3, [pc, #36]	; (8003648 <HAL_RCC_ClockConfig+0x1c8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f7fe f92e 	bl	8001888 <HAL_InitTick>

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40023c00 	.word	0x40023c00
 800363c:	40023800 	.word	0x40023800
 8003640:	080061c8 	.word	0x080061c8
 8003644:	20000200 	.word	0x20000200
 8003648:	20000204 	.word	0x20000204

0800364c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800364c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003650:	b090      	sub	sp, #64	; 0x40
 8003652:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	637b      	str	r3, [r7, #52]	; 0x34
 8003658:	2300      	movs	r3, #0
 800365a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800365c:	2300      	movs	r3, #0
 800365e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003664:	4b59      	ldr	r3, [pc, #356]	; (80037cc <HAL_RCC_GetSysClockFreq+0x180>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 030c 	and.w	r3, r3, #12
 800366c:	2b08      	cmp	r3, #8
 800366e:	d00d      	beq.n	800368c <HAL_RCC_GetSysClockFreq+0x40>
 8003670:	2b08      	cmp	r3, #8
 8003672:	f200 80a1 	bhi.w	80037b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <HAL_RCC_GetSysClockFreq+0x34>
 800367a:	2b04      	cmp	r3, #4
 800367c:	d003      	beq.n	8003686 <HAL_RCC_GetSysClockFreq+0x3a>
 800367e:	e09b      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003680:	4b53      	ldr	r3, [pc, #332]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003682:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003684:	e09b      	b.n	80037be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003686:	4b53      	ldr	r3, [pc, #332]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003688:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800368a:	e098      	b.n	80037be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800368c:	4b4f      	ldr	r3, [pc, #316]	; (80037cc <HAL_RCC_GetSysClockFreq+0x180>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003694:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003696:	4b4d      	ldr	r3, [pc, #308]	; (80037cc <HAL_RCC_GetSysClockFreq+0x180>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d028      	beq.n	80036f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a2:	4b4a      	ldr	r3, [pc, #296]	; (80037cc <HAL_RCC_GetSysClockFreq+0x180>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	099b      	lsrs	r3, r3, #6
 80036a8:	2200      	movs	r2, #0
 80036aa:	623b      	str	r3, [r7, #32]
 80036ac:	627a      	str	r2, [r7, #36]	; 0x24
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80036b4:	2100      	movs	r1, #0
 80036b6:	4b47      	ldr	r3, [pc, #284]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80036b8:	fb03 f201 	mul.w	r2, r3, r1
 80036bc:	2300      	movs	r3, #0
 80036be:	fb00 f303 	mul.w	r3, r0, r3
 80036c2:	4413      	add	r3, r2
 80036c4:	4a43      	ldr	r2, [pc, #268]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80036c6:	fba0 1202 	umull	r1, r2, r0, r2
 80036ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036cc:	460a      	mov	r2, r1
 80036ce:	62ba      	str	r2, [r7, #40]	; 0x28
 80036d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036d2:	4413      	add	r3, r2
 80036d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d8:	2200      	movs	r2, #0
 80036da:	61bb      	str	r3, [r7, #24]
 80036dc:	61fa      	str	r2, [r7, #28]
 80036de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80036e6:	f7fc fddb 	bl	80002a0 <__aeabi_uldivmod>
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	4613      	mov	r3, r2
 80036f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036f2:	e053      	b.n	800379c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036f4:	4b35      	ldr	r3, [pc, #212]	; (80037cc <HAL_RCC_GetSysClockFreq+0x180>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	099b      	lsrs	r3, r3, #6
 80036fa:	2200      	movs	r2, #0
 80036fc:	613b      	str	r3, [r7, #16]
 80036fe:	617a      	str	r2, [r7, #20]
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003706:	f04f 0b00 	mov.w	fp, #0
 800370a:	4652      	mov	r2, sl
 800370c:	465b      	mov	r3, fp
 800370e:	f04f 0000 	mov.w	r0, #0
 8003712:	f04f 0100 	mov.w	r1, #0
 8003716:	0159      	lsls	r1, r3, #5
 8003718:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800371c:	0150      	lsls	r0, r2, #5
 800371e:	4602      	mov	r2, r0
 8003720:	460b      	mov	r3, r1
 8003722:	ebb2 080a 	subs.w	r8, r2, sl
 8003726:	eb63 090b 	sbc.w	r9, r3, fp
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	f04f 0300 	mov.w	r3, #0
 8003732:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003736:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800373a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800373e:	ebb2 0408 	subs.w	r4, r2, r8
 8003742:	eb63 0509 	sbc.w	r5, r3, r9
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	f04f 0300 	mov.w	r3, #0
 800374e:	00eb      	lsls	r3, r5, #3
 8003750:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003754:	00e2      	lsls	r2, r4, #3
 8003756:	4614      	mov	r4, r2
 8003758:	461d      	mov	r5, r3
 800375a:	eb14 030a 	adds.w	r3, r4, sl
 800375e:	603b      	str	r3, [r7, #0]
 8003760:	eb45 030b 	adc.w	r3, r5, fp
 8003764:	607b      	str	r3, [r7, #4]
 8003766:	f04f 0200 	mov.w	r2, #0
 800376a:	f04f 0300 	mov.w	r3, #0
 800376e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003772:	4629      	mov	r1, r5
 8003774:	028b      	lsls	r3, r1, #10
 8003776:	4621      	mov	r1, r4
 8003778:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800377c:	4621      	mov	r1, r4
 800377e:	028a      	lsls	r2, r1, #10
 8003780:	4610      	mov	r0, r2
 8003782:	4619      	mov	r1, r3
 8003784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003786:	2200      	movs	r2, #0
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	60fa      	str	r2, [r7, #12]
 800378c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003790:	f7fc fd86 	bl	80002a0 <__aeabi_uldivmod>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4613      	mov	r3, r2
 800379a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800379c:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <HAL_RCC_GetSysClockFreq+0x180>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	0c1b      	lsrs	r3, r3, #16
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	3301      	adds	r3, #1
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80037ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037b6:	e002      	b.n	80037be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80037ba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3740      	adds	r7, #64	; 0x40
 80037c4:	46bd      	mov	sp, r7
 80037c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ca:	bf00      	nop
 80037cc:	40023800 	.word	0x40023800
 80037d0:	00f42400 	.word	0x00f42400
 80037d4:	017d7840 	.word	0x017d7840

080037d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037dc:	4b03      	ldr	r3, [pc, #12]	; (80037ec <HAL_RCC_GetHCLKFreq+0x14>)
 80037de:	681b      	ldr	r3, [r3, #0]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	20000200 	.word	0x20000200

080037f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037f4:	f7ff fff0 	bl	80037d8 <HAL_RCC_GetHCLKFreq>
 80037f8:	4602      	mov	r2, r0
 80037fa:	4b05      	ldr	r3, [pc, #20]	; (8003810 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	0a9b      	lsrs	r3, r3, #10
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	4903      	ldr	r1, [pc, #12]	; (8003814 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003806:	5ccb      	ldrb	r3, [r1, r3]
 8003808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800380c:	4618      	mov	r0, r3
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40023800 	.word	0x40023800
 8003814:	080061d8 	.word	0x080061d8

08003818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800381c:	f7ff ffdc 	bl	80037d8 <HAL_RCC_GetHCLKFreq>
 8003820:	4602      	mov	r2, r0
 8003822:	4b05      	ldr	r3, [pc, #20]	; (8003838 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	0b5b      	lsrs	r3, r3, #13
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	4903      	ldr	r1, [pc, #12]	; (800383c <HAL_RCC_GetPCLK2Freq+0x24>)
 800382e:	5ccb      	ldrb	r3, [r1, r3]
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003834:	4618      	mov	r0, r3
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40023800 	.word	0x40023800
 800383c:	080061d8 	.word	0x080061d8

08003840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e041      	b.n	80038d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fd fec4 	bl	80015f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3304      	adds	r3, #4
 800387c:	4619      	mov	r1, r3
 800387e:	4610      	mov	r0, r2
 8003880:	f000 fbd6 	bl	8004030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d001      	beq.n	80038f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e04e      	b.n	8003996 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0201 	orr.w	r2, r2, #1
 800390e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a23      	ldr	r2, [pc, #140]	; (80039a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d022      	beq.n	8003960 <HAL_TIM_Base_Start_IT+0x80>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003922:	d01d      	beq.n	8003960 <HAL_TIM_Base_Start_IT+0x80>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a1f      	ldr	r2, [pc, #124]	; (80039a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d018      	beq.n	8003960 <HAL_TIM_Base_Start_IT+0x80>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a1e      	ldr	r2, [pc, #120]	; (80039ac <HAL_TIM_Base_Start_IT+0xcc>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d013      	beq.n	8003960 <HAL_TIM_Base_Start_IT+0x80>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1c      	ldr	r2, [pc, #112]	; (80039b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00e      	beq.n	8003960 <HAL_TIM_Base_Start_IT+0x80>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1b      	ldr	r2, [pc, #108]	; (80039b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d009      	beq.n	8003960 <HAL_TIM_Base_Start_IT+0x80>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a19      	ldr	r2, [pc, #100]	; (80039b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d004      	beq.n	8003960 <HAL_TIM_Base_Start_IT+0x80>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a18      	ldr	r2, [pc, #96]	; (80039bc <HAL_TIM_Base_Start_IT+0xdc>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d111      	bne.n	8003984 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2b06      	cmp	r3, #6
 8003970:	d010      	beq.n	8003994 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f042 0201 	orr.w	r2, r2, #1
 8003980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003982:	e007      	b.n	8003994 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0201 	orr.w	r2, r2, #1
 8003992:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40010000 	.word	0x40010000
 80039a8:	40000400 	.word	0x40000400
 80039ac:	40000800 	.word	0x40000800
 80039b0:	40000c00 	.word	0x40000c00
 80039b4:	40010400 	.word	0x40010400
 80039b8:	40014000 	.word	0x40014000
 80039bc:	40001800 	.word	0x40001800

080039c0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0201 	bic.w	r2, r2, #1
 80039d6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6a1a      	ldr	r2, [r3, #32]
 80039de:	f241 1311 	movw	r3, #4369	; 0x1111
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10f      	bne.n	8003a08 <HAL_TIM_Base_Stop_IT+0x48>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6a1a      	ldr	r2, [r3, #32]
 80039ee:	f240 4344 	movw	r3, #1092	; 0x444
 80039f2:	4013      	ands	r3, r2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d107      	bne.n	8003a08 <HAL_TIM_Base_Stop_IT+0x48>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0201 	bic.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b082      	sub	sp, #8
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e041      	b.n	8003ab4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d106      	bne.n	8003a4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7fd fd9d 	bl	8001584 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3304      	adds	r3, #4
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	f000 fae7 	bl	8004030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d109      	bne.n	8003ae0 <HAL_TIM_PWM_Start+0x24>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	bf14      	ite	ne
 8003ad8:	2301      	movne	r3, #1
 8003ada:	2300      	moveq	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	e022      	b.n	8003b26 <HAL_TIM_PWM_Start+0x6a>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d109      	bne.n	8003afa <HAL_TIM_PWM_Start+0x3e>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	bf14      	ite	ne
 8003af2:	2301      	movne	r3, #1
 8003af4:	2300      	moveq	r3, #0
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	e015      	b.n	8003b26 <HAL_TIM_PWM_Start+0x6a>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	d109      	bne.n	8003b14 <HAL_TIM_PWM_Start+0x58>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	bf14      	ite	ne
 8003b0c:	2301      	movne	r3, #1
 8003b0e:	2300      	moveq	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	e008      	b.n	8003b26 <HAL_TIM_PWM_Start+0x6a>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	bf14      	ite	ne
 8003b20:	2301      	movne	r3, #1
 8003b22:	2300      	moveq	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e07c      	b.n	8003c28 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d104      	bne.n	8003b3e <HAL_TIM_PWM_Start+0x82>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b3c:	e013      	b.n	8003b66 <HAL_TIM_PWM_Start+0xaa>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b04      	cmp	r3, #4
 8003b42:	d104      	bne.n	8003b4e <HAL_TIM_PWM_Start+0x92>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b4c:	e00b      	b.n	8003b66 <HAL_TIM_PWM_Start+0xaa>
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d104      	bne.n	8003b5e <HAL_TIM_PWM_Start+0xa2>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b5c:	e003      	b.n	8003b66 <HAL_TIM_PWM_Start+0xaa>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2202      	movs	r2, #2
 8003b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	6839      	ldr	r1, [r7, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 fcae 	bl	80044d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a2d      	ldr	r2, [pc, #180]	; (8003c30 <HAL_TIM_PWM_Start+0x174>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d004      	beq.n	8003b88 <HAL_TIM_PWM_Start+0xcc>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a2c      	ldr	r2, [pc, #176]	; (8003c34 <HAL_TIM_PWM_Start+0x178>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d101      	bne.n	8003b8c <HAL_TIM_PWM_Start+0xd0>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e000      	b.n	8003b8e <HAL_TIM_PWM_Start+0xd2>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d007      	beq.n	8003ba2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ba0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a22      	ldr	r2, [pc, #136]	; (8003c30 <HAL_TIM_PWM_Start+0x174>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d022      	beq.n	8003bf2 <HAL_TIM_PWM_Start+0x136>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb4:	d01d      	beq.n	8003bf2 <HAL_TIM_PWM_Start+0x136>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a1f      	ldr	r2, [pc, #124]	; (8003c38 <HAL_TIM_PWM_Start+0x17c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d018      	beq.n	8003bf2 <HAL_TIM_PWM_Start+0x136>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a1d      	ldr	r2, [pc, #116]	; (8003c3c <HAL_TIM_PWM_Start+0x180>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <HAL_TIM_PWM_Start+0x136>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a1c      	ldr	r2, [pc, #112]	; (8003c40 <HAL_TIM_PWM_Start+0x184>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00e      	beq.n	8003bf2 <HAL_TIM_PWM_Start+0x136>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a16      	ldr	r2, [pc, #88]	; (8003c34 <HAL_TIM_PWM_Start+0x178>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d009      	beq.n	8003bf2 <HAL_TIM_PWM_Start+0x136>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a18      	ldr	r2, [pc, #96]	; (8003c44 <HAL_TIM_PWM_Start+0x188>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d004      	beq.n	8003bf2 <HAL_TIM_PWM_Start+0x136>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a16      	ldr	r2, [pc, #88]	; (8003c48 <HAL_TIM_PWM_Start+0x18c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d111      	bne.n	8003c16 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2b06      	cmp	r3, #6
 8003c02:	d010      	beq.n	8003c26 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c14:	e007      	b.n	8003c26 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0201 	orr.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40010000 	.word	0x40010000
 8003c34:	40010400 	.word	0x40010400
 8003c38:	40000400 	.word	0x40000400
 8003c3c:	40000800 	.word	0x40000800
 8003c40:	40000c00 	.word	0x40000c00
 8003c44:	40014000 	.word	0x40014000
 8003c48:	40001800 	.word	0x40001800

08003c4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d122      	bne.n	8003ca8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d11b      	bne.n	8003ca8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f06f 0202 	mvn.w	r2, #2
 8003c78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f9b0 	bl	8003ff4 <HAL_TIM_IC_CaptureCallback>
 8003c94:	e005      	b.n	8003ca2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f9a2 	bl	8003fe0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f9b3 	bl	8004008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	d122      	bne.n	8003cfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d11b      	bne.n	8003cfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f06f 0204 	mvn.w	r2, #4
 8003ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f986 	bl	8003ff4 <HAL_TIM_IC_CaptureCallback>
 8003ce8:	e005      	b.n	8003cf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f978 	bl	8003fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f989 	bl	8004008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d122      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d11b      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f06f 0208 	mvn.w	r2, #8
 8003d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2204      	movs	r2, #4
 8003d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f95c 	bl	8003ff4 <HAL_TIM_IC_CaptureCallback>
 8003d3c:	e005      	b.n	8003d4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f94e 	bl	8003fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f95f 	bl	8004008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	2b10      	cmp	r3, #16
 8003d5c:	d122      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0310 	and.w	r3, r3, #16
 8003d68:	2b10      	cmp	r3, #16
 8003d6a:	d11b      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0210 	mvn.w	r2, #16
 8003d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2208      	movs	r2, #8
 8003d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f932 	bl	8003ff4 <HAL_TIM_IC_CaptureCallback>
 8003d90:	e005      	b.n	8003d9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f924 	bl	8003fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f935 	bl	8004008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d10e      	bne.n	8003dd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d107      	bne.n	8003dd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f06f 0201 	mvn.w	r2, #1
 8003dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fd f854 	bl	8000e78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dda:	2b80      	cmp	r3, #128	; 0x80
 8003ddc:	d10e      	bne.n	8003dfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de8:	2b80      	cmp	r3, #128	; 0x80
 8003dea:	d107      	bne.n	8003dfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fc68 	bl	80046cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e06:	2b40      	cmp	r3, #64	; 0x40
 8003e08:	d10e      	bne.n	8003e28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e14:	2b40      	cmp	r3, #64	; 0x40
 8003e16:	d107      	bne.n	8003e28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f8fa 	bl	800401c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	f003 0320 	and.w	r3, r3, #32
 8003e32:	2b20      	cmp	r3, #32
 8003e34:	d10e      	bne.n	8003e54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f003 0320 	and.w	r3, r3, #32
 8003e40:	2b20      	cmp	r3, #32
 8003e42:	d107      	bne.n	8003e54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f06f 0220 	mvn.w	r2, #32
 8003e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 fc32 	bl	80046b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e54:	bf00      	nop
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d101      	bne.n	8003e7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e0ae      	b.n	8003fd8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b0c      	cmp	r3, #12
 8003e86:	f200 809f 	bhi.w	8003fc8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e8a:	a201      	add	r2, pc, #4	; (adr r2, 8003e90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e90:	08003ec5 	.word	0x08003ec5
 8003e94:	08003fc9 	.word	0x08003fc9
 8003e98:	08003fc9 	.word	0x08003fc9
 8003e9c:	08003fc9 	.word	0x08003fc9
 8003ea0:	08003f05 	.word	0x08003f05
 8003ea4:	08003fc9 	.word	0x08003fc9
 8003ea8:	08003fc9 	.word	0x08003fc9
 8003eac:	08003fc9 	.word	0x08003fc9
 8003eb0:	08003f47 	.word	0x08003f47
 8003eb4:	08003fc9 	.word	0x08003fc9
 8003eb8:	08003fc9 	.word	0x08003fc9
 8003ebc:	08003fc9 	.word	0x08003fc9
 8003ec0:	08003f87 	.word	0x08003f87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68b9      	ldr	r1, [r7, #8]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 f950 	bl	8004170 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699a      	ldr	r2, [r3, #24]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0208 	orr.w	r2, r2, #8
 8003ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	699a      	ldr	r2, [r3, #24]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0204 	bic.w	r2, r2, #4
 8003eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6999      	ldr	r1, [r3, #24]
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	691a      	ldr	r2, [r3, #16]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	619a      	str	r2, [r3, #24]
      break;
 8003f02:	e064      	b.n	8003fce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68b9      	ldr	r1, [r7, #8]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 f9a0 	bl	8004250 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699a      	ldr	r2, [r3, #24]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699a      	ldr	r2, [r3, #24]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6999      	ldr	r1, [r3, #24]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	021a      	lsls	r2, r3, #8
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	619a      	str	r2, [r3, #24]
      break;
 8003f44:	e043      	b.n	8003fce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68b9      	ldr	r1, [r7, #8]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 f9f5 	bl	800433c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69da      	ldr	r2, [r3, #28]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f042 0208 	orr.w	r2, r2, #8
 8003f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69da      	ldr	r2, [r3, #28]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0204 	bic.w	r2, r2, #4
 8003f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	69d9      	ldr	r1, [r3, #28]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	691a      	ldr	r2, [r3, #16]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	61da      	str	r2, [r3, #28]
      break;
 8003f84:	e023      	b.n	8003fce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68b9      	ldr	r1, [r7, #8]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 fa49 	bl	8004424 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	69da      	ldr	r2, [r3, #28]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69da      	ldr	r2, [r3, #28]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	69d9      	ldr	r1, [r3, #28]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	021a      	lsls	r2, r3, #8
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	61da      	str	r2, [r3, #28]
      break;
 8003fc6:	e002      	b.n	8003fce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	75fb      	strb	r3, [r7, #23]
      break;
 8003fcc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a40      	ldr	r2, [pc, #256]	; (8004144 <TIM_Base_SetConfig+0x114>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d013      	beq.n	8004070 <TIM_Base_SetConfig+0x40>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800404e:	d00f      	beq.n	8004070 <TIM_Base_SetConfig+0x40>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a3d      	ldr	r2, [pc, #244]	; (8004148 <TIM_Base_SetConfig+0x118>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d00b      	beq.n	8004070 <TIM_Base_SetConfig+0x40>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a3c      	ldr	r2, [pc, #240]	; (800414c <TIM_Base_SetConfig+0x11c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d007      	beq.n	8004070 <TIM_Base_SetConfig+0x40>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a3b      	ldr	r2, [pc, #236]	; (8004150 <TIM_Base_SetConfig+0x120>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d003      	beq.n	8004070 <TIM_Base_SetConfig+0x40>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a3a      	ldr	r2, [pc, #232]	; (8004154 <TIM_Base_SetConfig+0x124>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d108      	bne.n	8004082 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	4313      	orrs	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a2f      	ldr	r2, [pc, #188]	; (8004144 <TIM_Base_SetConfig+0x114>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d02b      	beq.n	80040e2 <TIM_Base_SetConfig+0xb2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004090:	d027      	beq.n	80040e2 <TIM_Base_SetConfig+0xb2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a2c      	ldr	r2, [pc, #176]	; (8004148 <TIM_Base_SetConfig+0x118>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d023      	beq.n	80040e2 <TIM_Base_SetConfig+0xb2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a2b      	ldr	r2, [pc, #172]	; (800414c <TIM_Base_SetConfig+0x11c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d01f      	beq.n	80040e2 <TIM_Base_SetConfig+0xb2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a2a      	ldr	r2, [pc, #168]	; (8004150 <TIM_Base_SetConfig+0x120>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d01b      	beq.n	80040e2 <TIM_Base_SetConfig+0xb2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a29      	ldr	r2, [pc, #164]	; (8004154 <TIM_Base_SetConfig+0x124>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d017      	beq.n	80040e2 <TIM_Base_SetConfig+0xb2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a28      	ldr	r2, [pc, #160]	; (8004158 <TIM_Base_SetConfig+0x128>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d013      	beq.n	80040e2 <TIM_Base_SetConfig+0xb2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a27      	ldr	r2, [pc, #156]	; (800415c <TIM_Base_SetConfig+0x12c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d00f      	beq.n	80040e2 <TIM_Base_SetConfig+0xb2>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a26      	ldr	r2, [pc, #152]	; (8004160 <TIM_Base_SetConfig+0x130>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d00b      	beq.n	80040e2 <TIM_Base_SetConfig+0xb2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a25      	ldr	r2, [pc, #148]	; (8004164 <TIM_Base_SetConfig+0x134>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d007      	beq.n	80040e2 <TIM_Base_SetConfig+0xb2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a24      	ldr	r2, [pc, #144]	; (8004168 <TIM_Base_SetConfig+0x138>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d003      	beq.n	80040e2 <TIM_Base_SetConfig+0xb2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a23      	ldr	r2, [pc, #140]	; (800416c <TIM_Base_SetConfig+0x13c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d108      	bne.n	80040f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a0a      	ldr	r2, [pc, #40]	; (8004144 <TIM_Base_SetConfig+0x114>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d003      	beq.n	8004128 <TIM_Base_SetConfig+0xf8>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a0c      	ldr	r2, [pc, #48]	; (8004154 <TIM_Base_SetConfig+0x124>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d103      	bne.n	8004130 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	615a      	str	r2, [r3, #20]
}
 8004136:	bf00      	nop
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	40010000 	.word	0x40010000
 8004148:	40000400 	.word	0x40000400
 800414c:	40000800 	.word	0x40000800
 8004150:	40000c00 	.word	0x40000c00
 8004154:	40010400 	.word	0x40010400
 8004158:	40014000 	.word	0x40014000
 800415c:	40014400 	.word	0x40014400
 8004160:	40014800 	.word	0x40014800
 8004164:	40001800 	.word	0x40001800
 8004168:	40001c00 	.word	0x40001c00
 800416c:	40002000 	.word	0x40002000

08004170 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f023 0201 	bic.w	r2, r3, #1
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f023 0303 	bic.w	r3, r3, #3
 80041a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f023 0302 	bic.w	r3, r3, #2
 80041b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a20      	ldr	r2, [pc, #128]	; (8004248 <TIM_OC1_SetConfig+0xd8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d003      	beq.n	80041d4 <TIM_OC1_SetConfig+0x64>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a1f      	ldr	r2, [pc, #124]	; (800424c <TIM_OC1_SetConfig+0xdc>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d10c      	bne.n	80041ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f023 0308 	bic.w	r3, r3, #8
 80041da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f023 0304 	bic.w	r3, r3, #4
 80041ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a15      	ldr	r2, [pc, #84]	; (8004248 <TIM_OC1_SetConfig+0xd8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d003      	beq.n	80041fe <TIM_OC1_SetConfig+0x8e>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a14      	ldr	r2, [pc, #80]	; (800424c <TIM_OC1_SetConfig+0xdc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d111      	bne.n	8004222 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800420c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4313      	orrs	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	4313      	orrs	r3, r2
 8004220:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	621a      	str	r2, [r3, #32]
}
 800423c:	bf00      	nop
 800423e:	371c      	adds	r7, #28
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	40010000 	.word	0x40010000
 800424c:	40010400 	.word	0x40010400

08004250 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	f023 0210 	bic.w	r2, r3, #16
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800427e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	021b      	lsls	r3, r3, #8
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4313      	orrs	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f023 0320 	bic.w	r3, r3, #32
 800429a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a22      	ldr	r2, [pc, #136]	; (8004334 <TIM_OC2_SetConfig+0xe4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d003      	beq.n	80042b8 <TIM_OC2_SetConfig+0x68>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a21      	ldr	r2, [pc, #132]	; (8004338 <TIM_OC2_SetConfig+0xe8>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d10d      	bne.n	80042d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a17      	ldr	r2, [pc, #92]	; (8004334 <TIM_OC2_SetConfig+0xe4>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d003      	beq.n	80042e4 <TIM_OC2_SetConfig+0x94>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a16      	ldr	r2, [pc, #88]	; (8004338 <TIM_OC2_SetConfig+0xe8>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d113      	bne.n	800430c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	4313      	orrs	r3, r2
 800430a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	621a      	str	r2, [r3, #32]
}
 8004326:	bf00      	nop
 8004328:	371c      	adds	r7, #28
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40010000 	.word	0x40010000
 8004338:	40010400 	.word	0x40010400

0800433c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800436a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 0303 	bic.w	r3, r3, #3
 8004372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	021b      	lsls	r3, r3, #8
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	4313      	orrs	r3, r2
 8004390:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a21      	ldr	r2, [pc, #132]	; (800441c <TIM_OC3_SetConfig+0xe0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d003      	beq.n	80043a2 <TIM_OC3_SetConfig+0x66>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a20      	ldr	r2, [pc, #128]	; (8004420 <TIM_OC3_SetConfig+0xe4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d10d      	bne.n	80043be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	021b      	lsls	r3, r3, #8
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a16      	ldr	r2, [pc, #88]	; (800441c <TIM_OC3_SetConfig+0xe0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d003      	beq.n	80043ce <TIM_OC3_SetConfig+0x92>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a15      	ldr	r2, [pc, #84]	; (8004420 <TIM_OC3_SetConfig+0xe4>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d113      	bne.n	80043f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	621a      	str	r2, [r3, #32]
}
 8004410:	bf00      	nop
 8004412:	371c      	adds	r7, #28
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	40010000 	.word	0x40010000
 8004420:	40010400 	.word	0x40010400

08004424 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	021b      	lsls	r3, r3, #8
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4313      	orrs	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800446e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	031b      	lsls	r3, r3, #12
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	4313      	orrs	r3, r2
 800447a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a12      	ldr	r2, [pc, #72]	; (80044c8 <TIM_OC4_SetConfig+0xa4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d003      	beq.n	800448c <TIM_OC4_SetConfig+0x68>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a11      	ldr	r2, [pc, #68]	; (80044cc <TIM_OC4_SetConfig+0xa8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d109      	bne.n	80044a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004492:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	019b      	lsls	r3, r3, #6
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	621a      	str	r2, [r3, #32]
}
 80044ba:	bf00      	nop
 80044bc:	371c      	adds	r7, #28
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40010000 	.word	0x40010000
 80044cc:	40010400 	.word	0x40010400

080044d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f003 031f 	and.w	r3, r3, #31
 80044e2:	2201      	movs	r2, #1
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a1a      	ldr	r2, [r3, #32]
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	43db      	mvns	r3, r3
 80044f2:	401a      	ands	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a1a      	ldr	r2, [r3, #32]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f003 031f 	and.w	r3, r3, #31
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	fa01 f303 	lsl.w	r3, r1, r3
 8004508:	431a      	orrs	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	621a      	str	r2, [r3, #32]
}
 800450e:	bf00      	nop
 8004510:	371c      	adds	r7, #28
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
	...

0800451c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800452c:	2b01      	cmp	r3, #1
 800452e:	d101      	bne.n	8004534 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004530:	2302      	movs	r3, #2
 8004532:	e05a      	b.n	80045ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a21      	ldr	r2, [pc, #132]	; (80045f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d022      	beq.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004580:	d01d      	beq.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a1d      	ldr	r2, [pc, #116]	; (80045fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d018      	beq.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a1b      	ldr	r2, [pc, #108]	; (8004600 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d013      	beq.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a1a      	ldr	r2, [pc, #104]	; (8004604 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d00e      	beq.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a18      	ldr	r2, [pc, #96]	; (8004608 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d009      	beq.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a17      	ldr	r2, [pc, #92]	; (800460c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d004      	beq.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a15      	ldr	r2, [pc, #84]	; (8004610 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d10c      	bne.n	80045d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	40010000 	.word	0x40010000
 80045fc:	40000400 	.word	0x40000400
 8004600:	40000800 	.word	0x40000800
 8004604:	40000c00 	.word	0x40000c00
 8004608:	40010400 	.word	0x40010400
 800460c:	40014000 	.word	0x40014000
 8004610:	40001800 	.word	0x40001800

08004614 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004628:	2b01      	cmp	r3, #1
 800462a:	d101      	bne.n	8004630 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800462c:	2302      	movs	r3, #2
 800462e:	e03d      	b.n	80046ac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	4313      	orrs	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	4313      	orrs	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4313      	orrs	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	4313      	orrs	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	4313      	orrs	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e03f      	b.n	8004772 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7fd f82a 	bl	8001760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2224      	movs	r2, #36	; 0x24
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004722:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f929 	bl	800497c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	691a      	ldr	r2, [r3, #16]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004738:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	695a      	ldr	r2, [r3, #20]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004748:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004758:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2220      	movs	r2, #32
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b08a      	sub	sp, #40	; 0x28
 800477e:	af02      	add	r7, sp, #8
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	603b      	str	r3, [r7, #0]
 8004786:	4613      	mov	r3, r2
 8004788:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b20      	cmp	r3, #32
 8004798:	d17c      	bne.n	8004894 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <HAL_UART_Transmit+0x2c>
 80047a0:	88fb      	ldrh	r3, [r7, #6]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e075      	b.n	8004896 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_UART_Transmit+0x3e>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e06e      	b.n	8004896 <HAL_UART_Transmit+0x11c>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2221      	movs	r2, #33	; 0x21
 80047ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047ce:	f7fd f89f 	bl	8001910 <HAL_GetTick>
 80047d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	88fa      	ldrh	r2, [r7, #6]
 80047d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	88fa      	ldrh	r2, [r7, #6]
 80047de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e8:	d108      	bne.n	80047fc <HAL_UART_Transmit+0x82>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d104      	bne.n	80047fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	61bb      	str	r3, [r7, #24]
 80047fa:	e003      	b.n	8004804 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004800:	2300      	movs	r3, #0
 8004802:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800480c:	e02a      	b.n	8004864 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2200      	movs	r2, #0
 8004816:	2180      	movs	r1, #128	; 0x80
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 f840 	bl	800489e <UART_WaitOnFlagUntilTimeout>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e036      	b.n	8004896 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10b      	bne.n	8004846 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800483c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	3302      	adds	r3, #2
 8004842:	61bb      	str	r3, [r7, #24]
 8004844:	e007      	b.n	8004856 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	781a      	ldrb	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	3301      	adds	r3, #1
 8004854:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800485a:	b29b      	uxth	r3, r3
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004868:	b29b      	uxth	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1cf      	bne.n	800480e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2200      	movs	r2, #0
 8004876:	2140      	movs	r1, #64	; 0x40
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 f810 	bl	800489e <UART_WaitOnFlagUntilTimeout>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e006      	b.n	8004896 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2220      	movs	r2, #32
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	e000      	b.n	8004896 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004894:	2302      	movs	r3, #2
  }
}
 8004896:	4618      	mov	r0, r3
 8004898:	3720      	adds	r7, #32
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b090      	sub	sp, #64	; 0x40
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	60f8      	str	r0, [r7, #12]
 80048a6:	60b9      	str	r1, [r7, #8]
 80048a8:	603b      	str	r3, [r7, #0]
 80048aa:	4613      	mov	r3, r2
 80048ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ae:	e050      	b.n	8004952 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048b6:	d04c      	beq.n	8004952 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d007      	beq.n	80048ce <UART_WaitOnFlagUntilTimeout+0x30>
 80048be:	f7fd f827 	bl	8001910 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d241      	bcs.n	8004952 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	330c      	adds	r3, #12
 80048d4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d8:	e853 3f00 	ldrex	r3, [r3]
 80048dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	330c      	adds	r3, #12
 80048ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048ee:	637a      	str	r2, [r7, #52]	; 0x34
 80048f0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048f6:	e841 2300 	strex	r3, r2, [r1]
 80048fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1e5      	bne.n	80048ce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3314      	adds	r3, #20
 8004908:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	e853 3f00 	ldrex	r3, [r3]
 8004910:	613b      	str	r3, [r7, #16]
   return(result);
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f023 0301 	bic.w	r3, r3, #1
 8004918:	63bb      	str	r3, [r7, #56]	; 0x38
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	3314      	adds	r3, #20
 8004920:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004922:	623a      	str	r2, [r7, #32]
 8004924:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004926:	69f9      	ldr	r1, [r7, #28]
 8004928:	6a3a      	ldr	r2, [r7, #32]
 800492a:	e841 2300 	strex	r3, r2, [r1]
 800492e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1e5      	bne.n	8004902 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2220      	movs	r2, #32
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e00f      	b.n	8004972 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	4013      	ands	r3, r2
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	429a      	cmp	r2, r3
 8004960:	bf0c      	ite	eq
 8004962:	2301      	moveq	r3, #1
 8004964:	2300      	movne	r3, #0
 8004966:	b2db      	uxtb	r3, r3
 8004968:	461a      	mov	r2, r3
 800496a:	79fb      	ldrb	r3, [r7, #7]
 800496c:	429a      	cmp	r2, r3
 800496e:	d09f      	beq.n	80048b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3740      	adds	r7, #64	; 0x40
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
	...

0800497c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800497c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004980:	b0c0      	sub	sp, #256	; 0x100
 8004982:	af00      	add	r7, sp, #0
 8004984:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004998:	68d9      	ldr	r1, [r3, #12]
 800499a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	ea40 0301 	orr.w	r3, r0, r1
 80049a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	431a      	orrs	r2, r3
 80049b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	431a      	orrs	r2, r3
 80049bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049d4:	f021 010c 	bic.w	r1, r1, #12
 80049d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049e2:	430b      	orrs	r3, r1
 80049e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f6:	6999      	ldr	r1, [r3, #24]
 80049f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	ea40 0301 	orr.w	r3, r0, r1
 8004a02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	4b8f      	ldr	r3, [pc, #572]	; (8004c48 <UART_SetConfig+0x2cc>)
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d005      	beq.n	8004a1c <UART_SetConfig+0xa0>
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	4b8d      	ldr	r3, [pc, #564]	; (8004c4c <UART_SetConfig+0x2d0>)
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d104      	bne.n	8004a26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a1c:	f7fe fefc 	bl	8003818 <HAL_RCC_GetPCLK2Freq>
 8004a20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a24:	e003      	b.n	8004a2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a26:	f7fe fee3 	bl	80037f0 <HAL_RCC_GetPCLK1Freq>
 8004a2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a38:	f040 810c 	bne.w	8004c54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a40:	2200      	movs	r2, #0
 8004a42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a46:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a4e:	4622      	mov	r2, r4
 8004a50:	462b      	mov	r3, r5
 8004a52:	1891      	adds	r1, r2, r2
 8004a54:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a56:	415b      	adcs	r3, r3
 8004a58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a5e:	4621      	mov	r1, r4
 8004a60:	eb12 0801 	adds.w	r8, r2, r1
 8004a64:	4629      	mov	r1, r5
 8004a66:	eb43 0901 	adc.w	r9, r3, r1
 8004a6a:	f04f 0200 	mov.w	r2, #0
 8004a6e:	f04f 0300 	mov.w	r3, #0
 8004a72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a7e:	4690      	mov	r8, r2
 8004a80:	4699      	mov	r9, r3
 8004a82:	4623      	mov	r3, r4
 8004a84:	eb18 0303 	adds.w	r3, r8, r3
 8004a88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a8c:	462b      	mov	r3, r5
 8004a8e:	eb49 0303 	adc.w	r3, r9, r3
 8004a92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004aa2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004aa6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004aaa:	460b      	mov	r3, r1
 8004aac:	18db      	adds	r3, r3, r3
 8004aae:	653b      	str	r3, [r7, #80]	; 0x50
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	eb42 0303 	adc.w	r3, r2, r3
 8004ab6:	657b      	str	r3, [r7, #84]	; 0x54
 8004ab8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004abc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ac0:	f7fb fbee 	bl	80002a0 <__aeabi_uldivmod>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4b61      	ldr	r3, [pc, #388]	; (8004c50 <UART_SetConfig+0x2d4>)
 8004aca:	fba3 2302 	umull	r2, r3, r3, r2
 8004ace:	095b      	lsrs	r3, r3, #5
 8004ad0:	011c      	lsls	r4, r3, #4
 8004ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004adc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ae0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ae4:	4642      	mov	r2, r8
 8004ae6:	464b      	mov	r3, r9
 8004ae8:	1891      	adds	r1, r2, r2
 8004aea:	64b9      	str	r1, [r7, #72]	; 0x48
 8004aec:	415b      	adcs	r3, r3
 8004aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004af0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004af4:	4641      	mov	r1, r8
 8004af6:	eb12 0a01 	adds.w	sl, r2, r1
 8004afa:	4649      	mov	r1, r9
 8004afc:	eb43 0b01 	adc.w	fp, r3, r1
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b14:	4692      	mov	sl, r2
 8004b16:	469b      	mov	fp, r3
 8004b18:	4643      	mov	r3, r8
 8004b1a:	eb1a 0303 	adds.w	r3, sl, r3
 8004b1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b22:	464b      	mov	r3, r9
 8004b24:	eb4b 0303 	adc.w	r3, fp, r3
 8004b28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b40:	460b      	mov	r3, r1
 8004b42:	18db      	adds	r3, r3, r3
 8004b44:	643b      	str	r3, [r7, #64]	; 0x40
 8004b46:	4613      	mov	r3, r2
 8004b48:	eb42 0303 	adc.w	r3, r2, r3
 8004b4c:	647b      	str	r3, [r7, #68]	; 0x44
 8004b4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b56:	f7fb fba3 	bl	80002a0 <__aeabi_uldivmod>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4611      	mov	r1, r2
 8004b60:	4b3b      	ldr	r3, [pc, #236]	; (8004c50 <UART_SetConfig+0x2d4>)
 8004b62:	fba3 2301 	umull	r2, r3, r3, r1
 8004b66:	095b      	lsrs	r3, r3, #5
 8004b68:	2264      	movs	r2, #100	; 0x64
 8004b6a:	fb02 f303 	mul.w	r3, r2, r3
 8004b6e:	1acb      	subs	r3, r1, r3
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b76:	4b36      	ldr	r3, [pc, #216]	; (8004c50 <UART_SetConfig+0x2d4>)
 8004b78:	fba3 2302 	umull	r2, r3, r3, r2
 8004b7c:	095b      	lsrs	r3, r3, #5
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b84:	441c      	add	r4, r3
 8004b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b98:	4642      	mov	r2, r8
 8004b9a:	464b      	mov	r3, r9
 8004b9c:	1891      	adds	r1, r2, r2
 8004b9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ba0:	415b      	adcs	r3, r3
 8004ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ba4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ba8:	4641      	mov	r1, r8
 8004baa:	1851      	adds	r1, r2, r1
 8004bac:	6339      	str	r1, [r7, #48]	; 0x30
 8004bae:	4649      	mov	r1, r9
 8004bb0:	414b      	adcs	r3, r1
 8004bb2:	637b      	str	r3, [r7, #52]	; 0x34
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004bc0:	4659      	mov	r1, fp
 8004bc2:	00cb      	lsls	r3, r1, #3
 8004bc4:	4651      	mov	r1, sl
 8004bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bca:	4651      	mov	r1, sl
 8004bcc:	00ca      	lsls	r2, r1, #3
 8004bce:	4610      	mov	r0, r2
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	4642      	mov	r2, r8
 8004bd6:	189b      	adds	r3, r3, r2
 8004bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bdc:	464b      	mov	r3, r9
 8004bde:	460a      	mov	r2, r1
 8004be0:	eb42 0303 	adc.w	r3, r2, r3
 8004be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bf4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004bf8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	18db      	adds	r3, r3, r3
 8004c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c02:	4613      	mov	r3, r2
 8004c04:	eb42 0303 	adc.w	r3, r2, r3
 8004c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c12:	f7fb fb45 	bl	80002a0 <__aeabi_uldivmod>
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4b0d      	ldr	r3, [pc, #52]	; (8004c50 <UART_SetConfig+0x2d4>)
 8004c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c20:	095b      	lsrs	r3, r3, #5
 8004c22:	2164      	movs	r1, #100	; 0x64
 8004c24:	fb01 f303 	mul.w	r3, r1, r3
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	3332      	adds	r3, #50	; 0x32
 8004c2e:	4a08      	ldr	r2, [pc, #32]	; (8004c50 <UART_SetConfig+0x2d4>)
 8004c30:	fba2 2303 	umull	r2, r3, r2, r3
 8004c34:	095b      	lsrs	r3, r3, #5
 8004c36:	f003 0207 	and.w	r2, r3, #7
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4422      	add	r2, r4
 8004c42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c44:	e105      	b.n	8004e52 <UART_SetConfig+0x4d6>
 8004c46:	bf00      	nop
 8004c48:	40011000 	.word	0x40011000
 8004c4c:	40011400 	.word	0x40011400
 8004c50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c66:	4642      	mov	r2, r8
 8004c68:	464b      	mov	r3, r9
 8004c6a:	1891      	adds	r1, r2, r2
 8004c6c:	6239      	str	r1, [r7, #32]
 8004c6e:	415b      	adcs	r3, r3
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
 8004c72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c76:	4641      	mov	r1, r8
 8004c78:	1854      	adds	r4, r2, r1
 8004c7a:	4649      	mov	r1, r9
 8004c7c:	eb43 0501 	adc.w	r5, r3, r1
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	00eb      	lsls	r3, r5, #3
 8004c8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c8e:	00e2      	lsls	r2, r4, #3
 8004c90:	4614      	mov	r4, r2
 8004c92:	461d      	mov	r5, r3
 8004c94:	4643      	mov	r3, r8
 8004c96:	18e3      	adds	r3, r4, r3
 8004c98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c9c:	464b      	mov	r3, r9
 8004c9e:	eb45 0303 	adc.w	r3, r5, r3
 8004ca2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004cb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	008b      	lsls	r3, r1, #2
 8004cc6:	4621      	mov	r1, r4
 8004cc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ccc:	4621      	mov	r1, r4
 8004cce:	008a      	lsls	r2, r1, #2
 8004cd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004cd4:	f7fb fae4 	bl	80002a0 <__aeabi_uldivmod>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4b60      	ldr	r3, [pc, #384]	; (8004e60 <UART_SetConfig+0x4e4>)
 8004cde:	fba3 2302 	umull	r2, r3, r3, r2
 8004ce2:	095b      	lsrs	r3, r3, #5
 8004ce4:	011c      	lsls	r4, r3, #4
 8004ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cea:	2200      	movs	r2, #0
 8004cec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cf0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004cf4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004cf8:	4642      	mov	r2, r8
 8004cfa:	464b      	mov	r3, r9
 8004cfc:	1891      	adds	r1, r2, r2
 8004cfe:	61b9      	str	r1, [r7, #24]
 8004d00:	415b      	adcs	r3, r3
 8004d02:	61fb      	str	r3, [r7, #28]
 8004d04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d08:	4641      	mov	r1, r8
 8004d0a:	1851      	adds	r1, r2, r1
 8004d0c:	6139      	str	r1, [r7, #16]
 8004d0e:	4649      	mov	r1, r9
 8004d10:	414b      	adcs	r3, r1
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d20:	4659      	mov	r1, fp
 8004d22:	00cb      	lsls	r3, r1, #3
 8004d24:	4651      	mov	r1, sl
 8004d26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d2a:	4651      	mov	r1, sl
 8004d2c:	00ca      	lsls	r2, r1, #3
 8004d2e:	4610      	mov	r0, r2
 8004d30:	4619      	mov	r1, r3
 8004d32:	4603      	mov	r3, r0
 8004d34:	4642      	mov	r2, r8
 8004d36:	189b      	adds	r3, r3, r2
 8004d38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d3c:	464b      	mov	r3, r9
 8004d3e:	460a      	mov	r2, r1
 8004d40:	eb42 0303 	adc.w	r3, r2, r3
 8004d44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d52:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d60:	4649      	mov	r1, r9
 8004d62:	008b      	lsls	r3, r1, #2
 8004d64:	4641      	mov	r1, r8
 8004d66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d6a:	4641      	mov	r1, r8
 8004d6c:	008a      	lsls	r2, r1, #2
 8004d6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d72:	f7fb fa95 	bl	80002a0 <__aeabi_uldivmod>
 8004d76:	4602      	mov	r2, r0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4b39      	ldr	r3, [pc, #228]	; (8004e60 <UART_SetConfig+0x4e4>)
 8004d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	2164      	movs	r1, #100	; 0x64
 8004d84:	fb01 f303 	mul.w	r3, r1, r3
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	3332      	adds	r3, #50	; 0x32
 8004d8e:	4a34      	ldr	r2, [pc, #208]	; (8004e60 <UART_SetConfig+0x4e4>)
 8004d90:	fba2 2303 	umull	r2, r3, r2, r3
 8004d94:	095b      	lsrs	r3, r3, #5
 8004d96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d9a:	441c      	add	r4, r3
 8004d9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004da0:	2200      	movs	r2, #0
 8004da2:	673b      	str	r3, [r7, #112]	; 0x70
 8004da4:	677a      	str	r2, [r7, #116]	; 0x74
 8004da6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004daa:	4642      	mov	r2, r8
 8004dac:	464b      	mov	r3, r9
 8004dae:	1891      	adds	r1, r2, r2
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	415b      	adcs	r3, r3
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dba:	4641      	mov	r1, r8
 8004dbc:	1851      	adds	r1, r2, r1
 8004dbe:	6039      	str	r1, [r7, #0]
 8004dc0:	4649      	mov	r1, r9
 8004dc2:	414b      	adcs	r3, r1
 8004dc4:	607b      	str	r3, [r7, #4]
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004dd2:	4659      	mov	r1, fp
 8004dd4:	00cb      	lsls	r3, r1, #3
 8004dd6:	4651      	mov	r1, sl
 8004dd8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ddc:	4651      	mov	r1, sl
 8004dde:	00ca      	lsls	r2, r1, #3
 8004de0:	4610      	mov	r0, r2
 8004de2:	4619      	mov	r1, r3
 8004de4:	4603      	mov	r3, r0
 8004de6:	4642      	mov	r2, r8
 8004de8:	189b      	adds	r3, r3, r2
 8004dea:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dec:	464b      	mov	r3, r9
 8004dee:	460a      	mov	r2, r1
 8004df0:	eb42 0303 	adc.w	r3, r2, r3
 8004df4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	663b      	str	r3, [r7, #96]	; 0x60
 8004e00:	667a      	str	r2, [r7, #100]	; 0x64
 8004e02:	f04f 0200 	mov.w	r2, #0
 8004e06:	f04f 0300 	mov.w	r3, #0
 8004e0a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e0e:	4649      	mov	r1, r9
 8004e10:	008b      	lsls	r3, r1, #2
 8004e12:	4641      	mov	r1, r8
 8004e14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e18:	4641      	mov	r1, r8
 8004e1a:	008a      	lsls	r2, r1, #2
 8004e1c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e20:	f7fb fa3e 	bl	80002a0 <__aeabi_uldivmod>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4b0d      	ldr	r3, [pc, #52]	; (8004e60 <UART_SetConfig+0x4e4>)
 8004e2a:	fba3 1302 	umull	r1, r3, r3, r2
 8004e2e:	095b      	lsrs	r3, r3, #5
 8004e30:	2164      	movs	r1, #100	; 0x64
 8004e32:	fb01 f303 	mul.w	r3, r1, r3
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	3332      	adds	r3, #50	; 0x32
 8004e3c:	4a08      	ldr	r2, [pc, #32]	; (8004e60 <UART_SetConfig+0x4e4>)
 8004e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e42:	095b      	lsrs	r3, r3, #5
 8004e44:	f003 020f 	and.w	r2, r3, #15
 8004e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4422      	add	r2, r4
 8004e50:	609a      	str	r2, [r3, #8]
}
 8004e52:	bf00      	nop
 8004e54:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e5e:	bf00      	nop
 8004e60:	51eb851f 	.word	0x51eb851f

08004e64 <findslot>:
 8004e64:	4b0a      	ldr	r3, [pc, #40]	; (8004e90 <findslot+0x2c>)
 8004e66:	b510      	push	{r4, lr}
 8004e68:	4604      	mov	r4, r0
 8004e6a:	6818      	ldr	r0, [r3, #0]
 8004e6c:	b118      	cbz	r0, 8004e76 <findslot+0x12>
 8004e6e:	6983      	ldr	r3, [r0, #24]
 8004e70:	b90b      	cbnz	r3, 8004e76 <findslot+0x12>
 8004e72:	f000 facd 	bl	8005410 <__sinit>
 8004e76:	2c13      	cmp	r4, #19
 8004e78:	d807      	bhi.n	8004e8a <findslot+0x26>
 8004e7a:	4806      	ldr	r0, [pc, #24]	; (8004e94 <findslot+0x30>)
 8004e7c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8004e80:	3201      	adds	r2, #1
 8004e82:	d002      	beq.n	8004e8a <findslot+0x26>
 8004e84:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8004e88:	bd10      	pop	{r4, pc}
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	e7fc      	b.n	8004e88 <findslot+0x24>
 8004e8e:	bf00      	nop
 8004e90:	20000214 	.word	0x20000214
 8004e94:	20000438 	.word	0x20000438

08004e98 <error>:
 8004e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9a:	4604      	mov	r4, r0
 8004e9c:	f000 fa5a 	bl	8005354 <__errno>
 8004ea0:	2613      	movs	r6, #19
 8004ea2:	4605      	mov	r5, r0
 8004ea4:	2700      	movs	r7, #0
 8004ea6:	4630      	mov	r0, r6
 8004ea8:	4639      	mov	r1, r7
 8004eaa:	beab      	bkpt	0x00ab
 8004eac:	4606      	mov	r6, r0
 8004eae:	602e      	str	r6, [r5, #0]
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004eb4 <checkerror>:
 8004eb4:	1c43      	adds	r3, r0, #1
 8004eb6:	d101      	bne.n	8004ebc <checkerror+0x8>
 8004eb8:	f7ff bfee 	b.w	8004e98 <error>
 8004ebc:	4770      	bx	lr

08004ebe <_swiread>:
 8004ebe:	b530      	push	{r4, r5, lr}
 8004ec0:	b085      	sub	sp, #20
 8004ec2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004ec6:	9203      	str	r2, [sp, #12]
 8004ec8:	2406      	movs	r4, #6
 8004eca:	ad01      	add	r5, sp, #4
 8004ecc:	4620      	mov	r0, r4
 8004ece:	4629      	mov	r1, r5
 8004ed0:	beab      	bkpt	0x00ab
 8004ed2:	4604      	mov	r4, r0
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	f7ff ffed 	bl	8004eb4 <checkerror>
 8004eda:	b005      	add	sp, #20
 8004edc:	bd30      	pop	{r4, r5, pc}

08004ede <_read>:
 8004ede:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ee0:	4615      	mov	r5, r2
 8004ee2:	9101      	str	r1, [sp, #4]
 8004ee4:	f7ff ffbe 	bl	8004e64 <findslot>
 8004ee8:	9901      	ldr	r1, [sp, #4]
 8004eea:	4604      	mov	r4, r0
 8004eec:	b938      	cbnz	r0, 8004efe <_read+0x20>
 8004eee:	f000 fa31 	bl	8005354 <__errno>
 8004ef2:	2309      	movs	r3, #9
 8004ef4:	6003      	str	r3, [r0, #0]
 8004ef6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004efa:	b003      	add	sp, #12
 8004efc:	bd30      	pop	{r4, r5, pc}
 8004efe:	6800      	ldr	r0, [r0, #0]
 8004f00:	462a      	mov	r2, r5
 8004f02:	f7ff ffdc 	bl	8004ebe <_swiread>
 8004f06:	1c43      	adds	r3, r0, #1
 8004f08:	d0f7      	beq.n	8004efa <_read+0x1c>
 8004f0a:	6863      	ldr	r3, [r4, #4]
 8004f0c:	1a2a      	subs	r2, r5, r0
 8004f0e:	4413      	add	r3, r2
 8004f10:	6063      	str	r3, [r4, #4]
 8004f12:	4610      	mov	r0, r2
 8004f14:	e7f1      	b.n	8004efa <_read+0x1c>

08004f16 <_swilseek>:
 8004f16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f18:	460c      	mov	r4, r1
 8004f1a:	4616      	mov	r6, r2
 8004f1c:	f7ff ffa2 	bl	8004e64 <findslot>
 8004f20:	4605      	mov	r5, r0
 8004f22:	b940      	cbnz	r0, 8004f36 <_swilseek+0x20>
 8004f24:	f000 fa16 	bl	8005354 <__errno>
 8004f28:	2309      	movs	r3, #9
 8004f2a:	6003      	str	r3, [r0, #0]
 8004f2c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004f30:	4620      	mov	r0, r4
 8004f32:	b003      	add	sp, #12
 8004f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f36:	2e02      	cmp	r6, #2
 8004f38:	d903      	bls.n	8004f42 <_swilseek+0x2c>
 8004f3a:	f000 fa0b 	bl	8005354 <__errno>
 8004f3e:	2316      	movs	r3, #22
 8004f40:	e7f3      	b.n	8004f2a <_swilseek+0x14>
 8004f42:	2e01      	cmp	r6, #1
 8004f44:	d112      	bne.n	8004f6c <_swilseek+0x56>
 8004f46:	6843      	ldr	r3, [r0, #4]
 8004f48:	18e4      	adds	r4, r4, r3
 8004f4a:	d4f6      	bmi.n	8004f3a <_swilseek+0x24>
 8004f4c:	682b      	ldr	r3, [r5, #0]
 8004f4e:	260a      	movs	r6, #10
 8004f50:	e9cd 3400 	strd	r3, r4, [sp]
 8004f54:	466f      	mov	r7, sp
 8004f56:	4630      	mov	r0, r6
 8004f58:	4639      	mov	r1, r7
 8004f5a:	beab      	bkpt	0x00ab
 8004f5c:	4606      	mov	r6, r0
 8004f5e:	4630      	mov	r0, r6
 8004f60:	f7ff ffa8 	bl	8004eb4 <checkerror>
 8004f64:	2800      	cmp	r0, #0
 8004f66:	dbe1      	blt.n	8004f2c <_swilseek+0x16>
 8004f68:	606c      	str	r4, [r5, #4]
 8004f6a:	e7e1      	b.n	8004f30 <_swilseek+0x1a>
 8004f6c:	2e02      	cmp	r6, #2
 8004f6e:	d1ed      	bne.n	8004f4c <_swilseek+0x36>
 8004f70:	6803      	ldr	r3, [r0, #0]
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	260c      	movs	r6, #12
 8004f76:	466f      	mov	r7, sp
 8004f78:	4630      	mov	r0, r6
 8004f7a:	4639      	mov	r1, r7
 8004f7c:	beab      	bkpt	0x00ab
 8004f7e:	4606      	mov	r6, r0
 8004f80:	4630      	mov	r0, r6
 8004f82:	f7ff ff97 	bl	8004eb4 <checkerror>
 8004f86:	1c43      	adds	r3, r0, #1
 8004f88:	d0d0      	beq.n	8004f2c <_swilseek+0x16>
 8004f8a:	4404      	add	r4, r0
 8004f8c:	e7de      	b.n	8004f4c <_swilseek+0x36>

08004f8e <_lseek>:
 8004f8e:	f7ff bfc2 	b.w	8004f16 <_swilseek>

08004f92 <_swiwrite>:
 8004f92:	b530      	push	{r4, r5, lr}
 8004f94:	b085      	sub	sp, #20
 8004f96:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004f9a:	9203      	str	r2, [sp, #12]
 8004f9c:	2405      	movs	r4, #5
 8004f9e:	ad01      	add	r5, sp, #4
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	4629      	mov	r1, r5
 8004fa4:	beab      	bkpt	0x00ab
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	4620      	mov	r0, r4
 8004faa:	f7ff ff83 	bl	8004eb4 <checkerror>
 8004fae:	b005      	add	sp, #20
 8004fb0:	bd30      	pop	{r4, r5, pc}

08004fb2 <_write>:
 8004fb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fb4:	4615      	mov	r5, r2
 8004fb6:	9101      	str	r1, [sp, #4]
 8004fb8:	f7ff ff54 	bl	8004e64 <findslot>
 8004fbc:	9901      	ldr	r1, [sp, #4]
 8004fbe:	4604      	mov	r4, r0
 8004fc0:	b930      	cbnz	r0, 8004fd0 <_write+0x1e>
 8004fc2:	f000 f9c7 	bl	8005354 <__errno>
 8004fc6:	2309      	movs	r3, #9
 8004fc8:	6003      	str	r3, [r0, #0]
 8004fca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fce:	e012      	b.n	8004ff6 <_write+0x44>
 8004fd0:	6800      	ldr	r0, [r0, #0]
 8004fd2:	462a      	mov	r2, r5
 8004fd4:	f7ff ffdd 	bl	8004f92 <_swiwrite>
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	dbf6      	blt.n	8004fca <_write+0x18>
 8004fdc:	6862      	ldr	r2, [r4, #4]
 8004fde:	1a2b      	subs	r3, r5, r0
 8004fe0:	441a      	add	r2, r3
 8004fe2:	42a8      	cmp	r0, r5
 8004fe4:	6062      	str	r2, [r4, #4]
 8004fe6:	d105      	bne.n	8004ff4 <_write+0x42>
 8004fe8:	2000      	movs	r0, #0
 8004fea:	b003      	add	sp, #12
 8004fec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ff0:	f7ff bf52 	b.w	8004e98 <error>
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	b003      	add	sp, #12
 8004ff8:	bd30      	pop	{r4, r5, pc}

08004ffa <_swiclose>:
 8004ffa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ffc:	2402      	movs	r4, #2
 8004ffe:	9001      	str	r0, [sp, #4]
 8005000:	ad01      	add	r5, sp, #4
 8005002:	4620      	mov	r0, r4
 8005004:	4629      	mov	r1, r5
 8005006:	beab      	bkpt	0x00ab
 8005008:	4604      	mov	r4, r0
 800500a:	4620      	mov	r0, r4
 800500c:	f7ff ff52 	bl	8004eb4 <checkerror>
 8005010:	b003      	add	sp, #12
 8005012:	bd30      	pop	{r4, r5, pc}

08005014 <_close>:
 8005014:	b538      	push	{r3, r4, r5, lr}
 8005016:	4605      	mov	r5, r0
 8005018:	f7ff ff24 	bl	8004e64 <findslot>
 800501c:	4604      	mov	r4, r0
 800501e:	b930      	cbnz	r0, 800502e <_close+0x1a>
 8005020:	f000 f998 	bl	8005354 <__errno>
 8005024:	2309      	movs	r3, #9
 8005026:	6003      	str	r3, [r0, #0]
 8005028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800502c:	bd38      	pop	{r3, r4, r5, pc}
 800502e:	3d01      	subs	r5, #1
 8005030:	2d01      	cmp	r5, #1
 8005032:	d809      	bhi.n	8005048 <_close+0x34>
 8005034:	4b09      	ldr	r3, [pc, #36]	; (800505c <_close+0x48>)
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	429a      	cmp	r2, r3
 800503c:	d104      	bne.n	8005048 <_close+0x34>
 800503e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005042:	6003      	str	r3, [r0, #0]
 8005044:	2000      	movs	r0, #0
 8005046:	e7f1      	b.n	800502c <_close+0x18>
 8005048:	6820      	ldr	r0, [r4, #0]
 800504a:	f7ff ffd6 	bl	8004ffa <_swiclose>
 800504e:	2800      	cmp	r0, #0
 8005050:	d1ec      	bne.n	800502c <_close+0x18>
 8005052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005056:	6023      	str	r3, [r4, #0]
 8005058:	e7e8      	b.n	800502c <_close+0x18>
 800505a:	bf00      	nop
 800505c:	20000438 	.word	0x20000438

08005060 <_swistat>:
 8005060:	b570      	push	{r4, r5, r6, lr}
 8005062:	460c      	mov	r4, r1
 8005064:	f7ff fefe 	bl	8004e64 <findslot>
 8005068:	4605      	mov	r5, r0
 800506a:	b930      	cbnz	r0, 800507a <_swistat+0x1a>
 800506c:	f000 f972 	bl	8005354 <__errno>
 8005070:	2309      	movs	r3, #9
 8005072:	6003      	str	r3, [r0, #0]
 8005074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005078:	bd70      	pop	{r4, r5, r6, pc}
 800507a:	6863      	ldr	r3, [r4, #4]
 800507c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005080:	6063      	str	r3, [r4, #4]
 8005082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005086:	64a3      	str	r3, [r4, #72]	; 0x48
 8005088:	260c      	movs	r6, #12
 800508a:	4630      	mov	r0, r6
 800508c:	4629      	mov	r1, r5
 800508e:	beab      	bkpt	0x00ab
 8005090:	4605      	mov	r5, r0
 8005092:	4628      	mov	r0, r5
 8005094:	f7ff ff0e 	bl	8004eb4 <checkerror>
 8005098:	1c43      	adds	r3, r0, #1
 800509a:	bf1c      	itt	ne
 800509c:	6120      	strne	r0, [r4, #16]
 800509e:	2000      	movne	r0, #0
 80050a0:	e7ea      	b.n	8005078 <_swistat+0x18>

080050a2 <_stat>:
 80050a2:	b538      	push	{r3, r4, r5, lr}
 80050a4:	460d      	mov	r5, r1
 80050a6:	4604      	mov	r4, r0
 80050a8:	2258      	movs	r2, #88	; 0x58
 80050aa:	2100      	movs	r1, #0
 80050ac:	4628      	mov	r0, r5
 80050ae:	f000 fa74 	bl	800559a <memset>
 80050b2:	4620      	mov	r0, r4
 80050b4:	2100      	movs	r1, #0
 80050b6:	f000 f811 	bl	80050dc <_swiopen>
 80050ba:	1c43      	adds	r3, r0, #1
 80050bc:	4604      	mov	r4, r0
 80050be:	d00b      	beq.n	80050d8 <_stat+0x36>
 80050c0:	686b      	ldr	r3, [r5, #4]
 80050c2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80050c6:	606b      	str	r3, [r5, #4]
 80050c8:	4629      	mov	r1, r5
 80050ca:	f7ff ffc9 	bl	8005060 <_swistat>
 80050ce:	4605      	mov	r5, r0
 80050d0:	4620      	mov	r0, r4
 80050d2:	f7ff ff9f 	bl	8005014 <_close>
 80050d6:	462c      	mov	r4, r5
 80050d8:	4620      	mov	r0, r4
 80050da:	bd38      	pop	{r3, r4, r5, pc}

080050dc <_swiopen>:
 80050dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80050e0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800518c <_swiopen+0xb0>
 80050e4:	b097      	sub	sp, #92	; 0x5c
 80050e6:	4607      	mov	r7, r0
 80050e8:	460e      	mov	r6, r1
 80050ea:	2500      	movs	r5, #0
 80050ec:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80050f0:	1c61      	adds	r1, r4, #1
 80050f2:	d037      	beq.n	8005164 <_swiopen+0x88>
 80050f4:	3501      	adds	r5, #1
 80050f6:	2d14      	cmp	r5, #20
 80050f8:	d1f8      	bne.n	80050ec <_swiopen+0x10>
 80050fa:	f000 f92b 	bl	8005354 <__errno>
 80050fe:	2318      	movs	r3, #24
 8005100:	6003      	str	r3, [r0, #0]
 8005102:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005106:	e03d      	b.n	8005184 <_swiopen+0xa8>
 8005108:	f3c6 4400 	ubfx	r4, r6, #16, #1
 800510c:	f240 6301 	movw	r3, #1537	; 0x601
 8005110:	07b2      	lsls	r2, r6, #30
 8005112:	bf48      	it	mi
 8005114:	f044 0402 	orrmi.w	r4, r4, #2
 8005118:	421e      	tst	r6, r3
 800511a:	bf18      	it	ne
 800511c:	f044 0404 	orrne.w	r4, r4, #4
 8005120:	0733      	lsls	r3, r6, #28
 8005122:	bf48      	it	mi
 8005124:	f024 0404 	bicmi.w	r4, r4, #4
 8005128:	4638      	mov	r0, r7
 800512a:	bf48      	it	mi
 800512c:	f044 0408 	orrmi.w	r4, r4, #8
 8005130:	9700      	str	r7, [sp, #0]
 8005132:	f7fb f85d 	bl	80001f0 <strlen>
 8005136:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800513a:	2401      	movs	r4, #1
 800513c:	4620      	mov	r0, r4
 800513e:	4649      	mov	r1, r9
 8005140:	beab      	bkpt	0x00ab
 8005142:	4604      	mov	r4, r0
 8005144:	2c00      	cmp	r4, #0
 8005146:	db08      	blt.n	800515a <_swiopen+0x7e>
 8005148:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800514c:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8005150:	2300      	movs	r3, #0
 8005152:	f8c8 3004 	str.w	r3, [r8, #4]
 8005156:	462c      	mov	r4, r5
 8005158:	e014      	b.n	8005184 <_swiopen+0xa8>
 800515a:	4620      	mov	r0, r4
 800515c:	f7ff fe9c 	bl	8004e98 <error>
 8005160:	4604      	mov	r4, r0
 8005162:	e00f      	b.n	8005184 <_swiopen+0xa8>
 8005164:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8005168:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800516c:	46e9      	mov	r9, sp
 800516e:	d1cb      	bne.n	8005108 <_swiopen+0x2c>
 8005170:	4649      	mov	r1, r9
 8005172:	4638      	mov	r0, r7
 8005174:	f7ff ff95 	bl	80050a2 <_stat>
 8005178:	3001      	adds	r0, #1
 800517a:	d0c5      	beq.n	8005108 <_swiopen+0x2c>
 800517c:	f000 f8ea 	bl	8005354 <__errno>
 8005180:	2311      	movs	r3, #17
 8005182:	6003      	str	r3, [r0, #0]
 8005184:	4620      	mov	r0, r4
 8005186:	b017      	add	sp, #92	; 0x5c
 8005188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800518c:	20000438 	.word	0x20000438

08005190 <_get_semihosting_exts>:
 8005190:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005194:	4606      	mov	r6, r0
 8005196:	460f      	mov	r7, r1
 8005198:	482a      	ldr	r0, [pc, #168]	; (8005244 <_get_semihosting_exts+0xb4>)
 800519a:	2100      	movs	r1, #0
 800519c:	4615      	mov	r5, r2
 800519e:	f7ff ff9d 	bl	80050dc <_swiopen>
 80051a2:	462a      	mov	r2, r5
 80051a4:	4604      	mov	r4, r0
 80051a6:	2100      	movs	r1, #0
 80051a8:	4630      	mov	r0, r6
 80051aa:	f000 f9f6 	bl	800559a <memset>
 80051ae:	1c63      	adds	r3, r4, #1
 80051b0:	d016      	beq.n	80051e0 <_get_semihosting_exts+0x50>
 80051b2:	4620      	mov	r0, r4
 80051b4:	f7ff fe56 	bl	8004e64 <findslot>
 80051b8:	f04f 090c 	mov.w	r9, #12
 80051bc:	4680      	mov	r8, r0
 80051be:	4648      	mov	r0, r9
 80051c0:	4641      	mov	r1, r8
 80051c2:	beab      	bkpt	0x00ab
 80051c4:	4680      	mov	r8, r0
 80051c6:	4640      	mov	r0, r8
 80051c8:	f7ff fe74 	bl	8004eb4 <checkerror>
 80051cc:	2803      	cmp	r0, #3
 80051ce:	dd02      	ble.n	80051d6 <_get_semihosting_exts+0x46>
 80051d0:	1ec3      	subs	r3, r0, #3
 80051d2:	42ab      	cmp	r3, r5
 80051d4:	dc08      	bgt.n	80051e8 <_get_semihosting_exts+0x58>
 80051d6:	4620      	mov	r0, r4
 80051d8:	f7ff ff1c 	bl	8005014 <_close>
 80051dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80051e0:	4620      	mov	r0, r4
 80051e2:	b003      	add	sp, #12
 80051e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051e8:	2204      	movs	r2, #4
 80051ea:	eb0d 0102 	add.w	r1, sp, r2
 80051ee:	4620      	mov	r0, r4
 80051f0:	f7ff fe75 	bl	8004ede <_read>
 80051f4:	2803      	cmp	r0, #3
 80051f6:	ddee      	ble.n	80051d6 <_get_semihosting_exts+0x46>
 80051f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80051fc:	2b53      	cmp	r3, #83	; 0x53
 80051fe:	d1ea      	bne.n	80051d6 <_get_semihosting_exts+0x46>
 8005200:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005204:	2b48      	cmp	r3, #72	; 0x48
 8005206:	d1e6      	bne.n	80051d6 <_get_semihosting_exts+0x46>
 8005208:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800520c:	2b46      	cmp	r3, #70	; 0x46
 800520e:	d1e2      	bne.n	80051d6 <_get_semihosting_exts+0x46>
 8005210:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005214:	2b42      	cmp	r3, #66	; 0x42
 8005216:	d1de      	bne.n	80051d6 <_get_semihosting_exts+0x46>
 8005218:	2201      	movs	r2, #1
 800521a:	4639      	mov	r1, r7
 800521c:	4620      	mov	r0, r4
 800521e:	f7ff fe7a 	bl	8004f16 <_swilseek>
 8005222:	2800      	cmp	r0, #0
 8005224:	dbd7      	blt.n	80051d6 <_get_semihosting_exts+0x46>
 8005226:	462a      	mov	r2, r5
 8005228:	4631      	mov	r1, r6
 800522a:	4620      	mov	r0, r4
 800522c:	f7ff fe57 	bl	8004ede <_read>
 8005230:	4605      	mov	r5, r0
 8005232:	4620      	mov	r0, r4
 8005234:	f7ff feee 	bl	8005014 <_close>
 8005238:	4628      	mov	r0, r5
 800523a:	f7ff fe3b 	bl	8004eb4 <checkerror>
 800523e:	4604      	mov	r4, r0
 8005240:	e7ce      	b.n	80051e0 <_get_semihosting_exts+0x50>
 8005242:	bf00      	nop
 8005244:	080061e0 	.word	0x080061e0

08005248 <initialise_semihosting_exts>:
 8005248:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800524a:	4d0a      	ldr	r5, [pc, #40]	; (8005274 <initialise_semihosting_exts+0x2c>)
 800524c:	4c0a      	ldr	r4, [pc, #40]	; (8005278 <initialise_semihosting_exts+0x30>)
 800524e:	2100      	movs	r1, #0
 8005250:	2201      	movs	r2, #1
 8005252:	a801      	add	r0, sp, #4
 8005254:	6029      	str	r1, [r5, #0]
 8005256:	6022      	str	r2, [r4, #0]
 8005258:	f7ff ff9a 	bl	8005190 <_get_semihosting_exts>
 800525c:	2800      	cmp	r0, #0
 800525e:	dd07      	ble.n	8005270 <initialise_semihosting_exts+0x28>
 8005260:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005264:	f003 0201 	and.w	r2, r3, #1
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	602a      	str	r2, [r5, #0]
 800526e:	6023      	str	r3, [r4, #0]
 8005270:	b003      	add	sp, #12
 8005272:	bd30      	pop	{r4, r5, pc}
 8005274:	2000020c 	.word	0x2000020c
 8005278:	20000210 	.word	0x20000210

0800527c <_has_ext_stdout_stderr>:
 800527c:	b510      	push	{r4, lr}
 800527e:	4c04      	ldr	r4, [pc, #16]	; (8005290 <_has_ext_stdout_stderr+0x14>)
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	da01      	bge.n	800528a <_has_ext_stdout_stderr+0xe>
 8005286:	f7ff ffdf 	bl	8005248 <initialise_semihosting_exts>
 800528a:	6820      	ldr	r0, [r4, #0]
 800528c:	bd10      	pop	{r4, pc}
 800528e:	bf00      	nop
 8005290:	20000210 	.word	0x20000210

08005294 <initialise_monitor_handles>:
 8005294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005298:	b085      	sub	sp, #20
 800529a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800534c <initialise_monitor_handles+0xb8>
 800529e:	f8cd 9004 	str.w	r9, [sp, #4]
 80052a2:	2303      	movs	r3, #3
 80052a4:	2400      	movs	r4, #0
 80052a6:	9303      	str	r3, [sp, #12]
 80052a8:	af01      	add	r7, sp, #4
 80052aa:	9402      	str	r4, [sp, #8]
 80052ac:	2501      	movs	r5, #1
 80052ae:	4628      	mov	r0, r5
 80052b0:	4639      	mov	r1, r7
 80052b2:	beab      	bkpt	0x00ab
 80052b4:	4605      	mov	r5, r0
 80052b6:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8005350 <initialise_monitor_handles+0xbc>
 80052ba:	4623      	mov	r3, r4
 80052bc:	4c20      	ldr	r4, [pc, #128]	; (8005340 <initialise_monitor_handles+0xac>)
 80052be:	f8c8 5000 	str.w	r5, [r8]
 80052c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052c6:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80052ca:	3301      	adds	r3, #1
 80052cc:	2b14      	cmp	r3, #20
 80052ce:	d1fa      	bne.n	80052c6 <initialise_monitor_handles+0x32>
 80052d0:	f7ff ffd4 	bl	800527c <_has_ext_stdout_stderr>
 80052d4:	4d1b      	ldr	r5, [pc, #108]	; (8005344 <initialise_monitor_handles+0xb0>)
 80052d6:	b1d0      	cbz	r0, 800530e <initialise_monitor_handles+0x7a>
 80052d8:	f04f 0a03 	mov.w	sl, #3
 80052dc:	2304      	movs	r3, #4
 80052de:	f8cd 9004 	str.w	r9, [sp, #4]
 80052e2:	2601      	movs	r6, #1
 80052e4:	f8cd a00c 	str.w	sl, [sp, #12]
 80052e8:	9302      	str	r3, [sp, #8]
 80052ea:	4630      	mov	r0, r6
 80052ec:	4639      	mov	r1, r7
 80052ee:	beab      	bkpt	0x00ab
 80052f0:	4683      	mov	fp, r0
 80052f2:	4b15      	ldr	r3, [pc, #84]	; (8005348 <initialise_monitor_handles+0xb4>)
 80052f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80052f8:	f8c3 b000 	str.w	fp, [r3]
 80052fc:	2308      	movs	r3, #8
 80052fe:	f8cd a00c 	str.w	sl, [sp, #12]
 8005302:	9302      	str	r3, [sp, #8]
 8005304:	4630      	mov	r0, r6
 8005306:	4639      	mov	r1, r7
 8005308:	beab      	bkpt	0x00ab
 800530a:	4606      	mov	r6, r0
 800530c:	602e      	str	r6, [r5, #0]
 800530e:	682b      	ldr	r3, [r5, #0]
 8005310:	3301      	adds	r3, #1
 8005312:	bf02      	ittt	eq
 8005314:	4b0c      	ldreq	r3, [pc, #48]	; (8005348 <initialise_monitor_handles+0xb4>)
 8005316:	681b      	ldreq	r3, [r3, #0]
 8005318:	602b      	streq	r3, [r5, #0]
 800531a:	2600      	movs	r6, #0
 800531c:	f8d8 3000 	ldr.w	r3, [r8]
 8005320:	6023      	str	r3, [r4, #0]
 8005322:	6066      	str	r6, [r4, #4]
 8005324:	f7ff ffaa 	bl	800527c <_has_ext_stdout_stderr>
 8005328:	b130      	cbz	r0, 8005338 <initialise_monitor_handles+0xa4>
 800532a:	4b07      	ldr	r3, [pc, #28]	; (8005348 <initialise_monitor_handles+0xb4>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8005332:	682b      	ldr	r3, [r5, #0]
 8005334:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8005338:	b005      	add	sp, #20
 800533a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800533e:	bf00      	nop
 8005340:	20000438 	.word	0x20000438
 8005344:	2000042c 	.word	0x2000042c
 8005348:	20000434 	.word	0x20000434
 800534c:	080061f6 	.word	0x080061f6
 8005350:	20000430 	.word	0x20000430

08005354 <__errno>:
 8005354:	4b01      	ldr	r3, [pc, #4]	; (800535c <__errno+0x8>)
 8005356:	6818      	ldr	r0, [r3, #0]
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	20000214 	.word	0x20000214

08005360 <std>:
 8005360:	2300      	movs	r3, #0
 8005362:	b510      	push	{r4, lr}
 8005364:	4604      	mov	r4, r0
 8005366:	e9c0 3300 	strd	r3, r3, [r0]
 800536a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800536e:	6083      	str	r3, [r0, #8]
 8005370:	8181      	strh	r1, [r0, #12]
 8005372:	6643      	str	r3, [r0, #100]	; 0x64
 8005374:	81c2      	strh	r2, [r0, #14]
 8005376:	6183      	str	r3, [r0, #24]
 8005378:	4619      	mov	r1, r3
 800537a:	2208      	movs	r2, #8
 800537c:	305c      	adds	r0, #92	; 0x5c
 800537e:	f000 f90c 	bl	800559a <memset>
 8005382:	4b05      	ldr	r3, [pc, #20]	; (8005398 <std+0x38>)
 8005384:	6263      	str	r3, [r4, #36]	; 0x24
 8005386:	4b05      	ldr	r3, [pc, #20]	; (800539c <std+0x3c>)
 8005388:	62a3      	str	r3, [r4, #40]	; 0x28
 800538a:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <std+0x40>)
 800538c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800538e:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <std+0x44>)
 8005390:	6224      	str	r4, [r4, #32]
 8005392:	6323      	str	r3, [r4, #48]	; 0x30
 8005394:	bd10      	pop	{r4, pc}
 8005396:	bf00      	nop
 8005398:	08005735 	.word	0x08005735
 800539c:	08005757 	.word	0x08005757
 80053a0:	0800578f 	.word	0x0800578f
 80053a4:	080057b3 	.word	0x080057b3

080053a8 <_cleanup_r>:
 80053a8:	4901      	ldr	r1, [pc, #4]	; (80053b0 <_cleanup_r+0x8>)
 80053aa:	f000 b8af 	b.w	800550c <_fwalk_reent>
 80053ae:	bf00      	nop
 80053b0:	0800590d 	.word	0x0800590d

080053b4 <__sfmoreglue>:
 80053b4:	b570      	push	{r4, r5, r6, lr}
 80053b6:	2268      	movs	r2, #104	; 0x68
 80053b8:	1e4d      	subs	r5, r1, #1
 80053ba:	4355      	muls	r5, r2
 80053bc:	460e      	mov	r6, r1
 80053be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80053c2:	f000 f913 	bl	80055ec <_malloc_r>
 80053c6:	4604      	mov	r4, r0
 80053c8:	b140      	cbz	r0, 80053dc <__sfmoreglue+0x28>
 80053ca:	2100      	movs	r1, #0
 80053cc:	e9c0 1600 	strd	r1, r6, [r0]
 80053d0:	300c      	adds	r0, #12
 80053d2:	60a0      	str	r0, [r4, #8]
 80053d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80053d8:	f000 f8df 	bl	800559a <memset>
 80053dc:	4620      	mov	r0, r4
 80053de:	bd70      	pop	{r4, r5, r6, pc}

080053e0 <__sfp_lock_acquire>:
 80053e0:	4801      	ldr	r0, [pc, #4]	; (80053e8 <__sfp_lock_acquire+0x8>)
 80053e2:	f000 b8d8 	b.w	8005596 <__retarget_lock_acquire_recursive>
 80053e6:	bf00      	nop
 80053e8:	200004d9 	.word	0x200004d9

080053ec <__sfp_lock_release>:
 80053ec:	4801      	ldr	r0, [pc, #4]	; (80053f4 <__sfp_lock_release+0x8>)
 80053ee:	f000 b8d3 	b.w	8005598 <__retarget_lock_release_recursive>
 80053f2:	bf00      	nop
 80053f4:	200004d9 	.word	0x200004d9

080053f8 <__sinit_lock_acquire>:
 80053f8:	4801      	ldr	r0, [pc, #4]	; (8005400 <__sinit_lock_acquire+0x8>)
 80053fa:	f000 b8cc 	b.w	8005596 <__retarget_lock_acquire_recursive>
 80053fe:	bf00      	nop
 8005400:	200004da 	.word	0x200004da

08005404 <__sinit_lock_release>:
 8005404:	4801      	ldr	r0, [pc, #4]	; (800540c <__sinit_lock_release+0x8>)
 8005406:	f000 b8c7 	b.w	8005598 <__retarget_lock_release_recursive>
 800540a:	bf00      	nop
 800540c:	200004da 	.word	0x200004da

08005410 <__sinit>:
 8005410:	b510      	push	{r4, lr}
 8005412:	4604      	mov	r4, r0
 8005414:	f7ff fff0 	bl	80053f8 <__sinit_lock_acquire>
 8005418:	69a3      	ldr	r3, [r4, #24]
 800541a:	b11b      	cbz	r3, 8005424 <__sinit+0x14>
 800541c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005420:	f7ff bff0 	b.w	8005404 <__sinit_lock_release>
 8005424:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005428:	6523      	str	r3, [r4, #80]	; 0x50
 800542a:	4b13      	ldr	r3, [pc, #76]	; (8005478 <__sinit+0x68>)
 800542c:	4a13      	ldr	r2, [pc, #76]	; (800547c <__sinit+0x6c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	62a2      	str	r2, [r4, #40]	; 0x28
 8005432:	42a3      	cmp	r3, r4
 8005434:	bf04      	itt	eq
 8005436:	2301      	moveq	r3, #1
 8005438:	61a3      	streq	r3, [r4, #24]
 800543a:	4620      	mov	r0, r4
 800543c:	f000 f820 	bl	8005480 <__sfp>
 8005440:	6060      	str	r0, [r4, #4]
 8005442:	4620      	mov	r0, r4
 8005444:	f000 f81c 	bl	8005480 <__sfp>
 8005448:	60a0      	str	r0, [r4, #8]
 800544a:	4620      	mov	r0, r4
 800544c:	f000 f818 	bl	8005480 <__sfp>
 8005450:	2200      	movs	r2, #0
 8005452:	60e0      	str	r0, [r4, #12]
 8005454:	2104      	movs	r1, #4
 8005456:	6860      	ldr	r0, [r4, #4]
 8005458:	f7ff ff82 	bl	8005360 <std>
 800545c:	68a0      	ldr	r0, [r4, #8]
 800545e:	2201      	movs	r2, #1
 8005460:	2109      	movs	r1, #9
 8005462:	f7ff ff7d 	bl	8005360 <std>
 8005466:	68e0      	ldr	r0, [r4, #12]
 8005468:	2202      	movs	r2, #2
 800546a:	2112      	movs	r1, #18
 800546c:	f7ff ff78 	bl	8005360 <std>
 8005470:	2301      	movs	r3, #1
 8005472:	61a3      	str	r3, [r4, #24]
 8005474:	e7d2      	b.n	800541c <__sinit+0xc>
 8005476:	bf00      	nop
 8005478:	0800625c 	.word	0x0800625c
 800547c:	080053a9 	.word	0x080053a9

08005480 <__sfp>:
 8005480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005482:	4607      	mov	r7, r0
 8005484:	f7ff ffac 	bl	80053e0 <__sfp_lock_acquire>
 8005488:	4b1e      	ldr	r3, [pc, #120]	; (8005504 <__sfp+0x84>)
 800548a:	681e      	ldr	r6, [r3, #0]
 800548c:	69b3      	ldr	r3, [r6, #24]
 800548e:	b913      	cbnz	r3, 8005496 <__sfp+0x16>
 8005490:	4630      	mov	r0, r6
 8005492:	f7ff ffbd 	bl	8005410 <__sinit>
 8005496:	3648      	adds	r6, #72	; 0x48
 8005498:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800549c:	3b01      	subs	r3, #1
 800549e:	d503      	bpl.n	80054a8 <__sfp+0x28>
 80054a0:	6833      	ldr	r3, [r6, #0]
 80054a2:	b30b      	cbz	r3, 80054e8 <__sfp+0x68>
 80054a4:	6836      	ldr	r6, [r6, #0]
 80054a6:	e7f7      	b.n	8005498 <__sfp+0x18>
 80054a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80054ac:	b9d5      	cbnz	r5, 80054e4 <__sfp+0x64>
 80054ae:	4b16      	ldr	r3, [pc, #88]	; (8005508 <__sfp+0x88>)
 80054b0:	60e3      	str	r3, [r4, #12]
 80054b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80054b6:	6665      	str	r5, [r4, #100]	; 0x64
 80054b8:	f000 f86c 	bl	8005594 <__retarget_lock_init_recursive>
 80054bc:	f7ff ff96 	bl	80053ec <__sfp_lock_release>
 80054c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80054c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80054c8:	6025      	str	r5, [r4, #0]
 80054ca:	61a5      	str	r5, [r4, #24]
 80054cc:	2208      	movs	r2, #8
 80054ce:	4629      	mov	r1, r5
 80054d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80054d4:	f000 f861 	bl	800559a <memset>
 80054d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80054dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80054e0:	4620      	mov	r0, r4
 80054e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054e4:	3468      	adds	r4, #104	; 0x68
 80054e6:	e7d9      	b.n	800549c <__sfp+0x1c>
 80054e8:	2104      	movs	r1, #4
 80054ea:	4638      	mov	r0, r7
 80054ec:	f7ff ff62 	bl	80053b4 <__sfmoreglue>
 80054f0:	4604      	mov	r4, r0
 80054f2:	6030      	str	r0, [r6, #0]
 80054f4:	2800      	cmp	r0, #0
 80054f6:	d1d5      	bne.n	80054a4 <__sfp+0x24>
 80054f8:	f7ff ff78 	bl	80053ec <__sfp_lock_release>
 80054fc:	230c      	movs	r3, #12
 80054fe:	603b      	str	r3, [r7, #0]
 8005500:	e7ee      	b.n	80054e0 <__sfp+0x60>
 8005502:	bf00      	nop
 8005504:	0800625c 	.word	0x0800625c
 8005508:	ffff0001 	.word	0xffff0001

0800550c <_fwalk_reent>:
 800550c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005510:	4606      	mov	r6, r0
 8005512:	4688      	mov	r8, r1
 8005514:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005518:	2700      	movs	r7, #0
 800551a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800551e:	f1b9 0901 	subs.w	r9, r9, #1
 8005522:	d505      	bpl.n	8005530 <_fwalk_reent+0x24>
 8005524:	6824      	ldr	r4, [r4, #0]
 8005526:	2c00      	cmp	r4, #0
 8005528:	d1f7      	bne.n	800551a <_fwalk_reent+0xe>
 800552a:	4638      	mov	r0, r7
 800552c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005530:	89ab      	ldrh	r3, [r5, #12]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d907      	bls.n	8005546 <_fwalk_reent+0x3a>
 8005536:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800553a:	3301      	adds	r3, #1
 800553c:	d003      	beq.n	8005546 <_fwalk_reent+0x3a>
 800553e:	4629      	mov	r1, r5
 8005540:	4630      	mov	r0, r6
 8005542:	47c0      	blx	r8
 8005544:	4307      	orrs	r7, r0
 8005546:	3568      	adds	r5, #104	; 0x68
 8005548:	e7e9      	b.n	800551e <_fwalk_reent+0x12>
	...

0800554c <__libc_init_array>:
 800554c:	b570      	push	{r4, r5, r6, lr}
 800554e:	4d0d      	ldr	r5, [pc, #52]	; (8005584 <__libc_init_array+0x38>)
 8005550:	4c0d      	ldr	r4, [pc, #52]	; (8005588 <__libc_init_array+0x3c>)
 8005552:	1b64      	subs	r4, r4, r5
 8005554:	10a4      	asrs	r4, r4, #2
 8005556:	2600      	movs	r6, #0
 8005558:	42a6      	cmp	r6, r4
 800555a:	d109      	bne.n	8005570 <__libc_init_array+0x24>
 800555c:	4d0b      	ldr	r5, [pc, #44]	; (800558c <__libc_init_array+0x40>)
 800555e:	4c0c      	ldr	r4, [pc, #48]	; (8005590 <__libc_init_array+0x44>)
 8005560:	f000 fddc 	bl	800611c <_init>
 8005564:	1b64      	subs	r4, r4, r5
 8005566:	10a4      	asrs	r4, r4, #2
 8005568:	2600      	movs	r6, #0
 800556a:	42a6      	cmp	r6, r4
 800556c:	d105      	bne.n	800557a <__libc_init_array+0x2e>
 800556e:	bd70      	pop	{r4, r5, r6, pc}
 8005570:	f855 3b04 	ldr.w	r3, [r5], #4
 8005574:	4798      	blx	r3
 8005576:	3601      	adds	r6, #1
 8005578:	e7ee      	b.n	8005558 <__libc_init_array+0xc>
 800557a:	f855 3b04 	ldr.w	r3, [r5], #4
 800557e:	4798      	blx	r3
 8005580:	3601      	adds	r6, #1
 8005582:	e7f2      	b.n	800556a <__libc_init_array+0x1e>
 8005584:	0800629c 	.word	0x0800629c
 8005588:	0800629c 	.word	0x0800629c
 800558c:	0800629c 	.word	0x0800629c
 8005590:	080062a0 	.word	0x080062a0

08005594 <__retarget_lock_init_recursive>:
 8005594:	4770      	bx	lr

08005596 <__retarget_lock_acquire_recursive>:
 8005596:	4770      	bx	lr

08005598 <__retarget_lock_release_recursive>:
 8005598:	4770      	bx	lr

0800559a <memset>:
 800559a:	4402      	add	r2, r0
 800559c:	4603      	mov	r3, r0
 800559e:	4293      	cmp	r3, r2
 80055a0:	d100      	bne.n	80055a4 <memset+0xa>
 80055a2:	4770      	bx	lr
 80055a4:	f803 1b01 	strb.w	r1, [r3], #1
 80055a8:	e7f9      	b.n	800559e <memset+0x4>
	...

080055ac <sbrk_aligned>:
 80055ac:	b570      	push	{r4, r5, r6, lr}
 80055ae:	4e0e      	ldr	r6, [pc, #56]	; (80055e8 <sbrk_aligned+0x3c>)
 80055b0:	460c      	mov	r4, r1
 80055b2:	6831      	ldr	r1, [r6, #0]
 80055b4:	4605      	mov	r5, r0
 80055b6:	b911      	cbnz	r1, 80055be <sbrk_aligned+0x12>
 80055b8:	f000 f88c 	bl	80056d4 <_sbrk_r>
 80055bc:	6030      	str	r0, [r6, #0]
 80055be:	4621      	mov	r1, r4
 80055c0:	4628      	mov	r0, r5
 80055c2:	f000 f887 	bl	80056d4 <_sbrk_r>
 80055c6:	1c43      	adds	r3, r0, #1
 80055c8:	d00a      	beq.n	80055e0 <sbrk_aligned+0x34>
 80055ca:	1cc4      	adds	r4, r0, #3
 80055cc:	f024 0403 	bic.w	r4, r4, #3
 80055d0:	42a0      	cmp	r0, r4
 80055d2:	d007      	beq.n	80055e4 <sbrk_aligned+0x38>
 80055d4:	1a21      	subs	r1, r4, r0
 80055d6:	4628      	mov	r0, r5
 80055d8:	f000 f87c 	bl	80056d4 <_sbrk_r>
 80055dc:	3001      	adds	r0, #1
 80055de:	d101      	bne.n	80055e4 <sbrk_aligned+0x38>
 80055e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80055e4:	4620      	mov	r0, r4
 80055e6:	bd70      	pop	{r4, r5, r6, pc}
 80055e8:	200004e0 	.word	0x200004e0

080055ec <_malloc_r>:
 80055ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055f0:	1ccd      	adds	r5, r1, #3
 80055f2:	f025 0503 	bic.w	r5, r5, #3
 80055f6:	3508      	adds	r5, #8
 80055f8:	2d0c      	cmp	r5, #12
 80055fa:	bf38      	it	cc
 80055fc:	250c      	movcc	r5, #12
 80055fe:	2d00      	cmp	r5, #0
 8005600:	4607      	mov	r7, r0
 8005602:	db01      	blt.n	8005608 <_malloc_r+0x1c>
 8005604:	42a9      	cmp	r1, r5
 8005606:	d905      	bls.n	8005614 <_malloc_r+0x28>
 8005608:	230c      	movs	r3, #12
 800560a:	603b      	str	r3, [r7, #0]
 800560c:	2600      	movs	r6, #0
 800560e:	4630      	mov	r0, r6
 8005610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005614:	4e2e      	ldr	r6, [pc, #184]	; (80056d0 <_malloc_r+0xe4>)
 8005616:	f000 f9c7 	bl	80059a8 <__malloc_lock>
 800561a:	6833      	ldr	r3, [r6, #0]
 800561c:	461c      	mov	r4, r3
 800561e:	bb34      	cbnz	r4, 800566e <_malloc_r+0x82>
 8005620:	4629      	mov	r1, r5
 8005622:	4638      	mov	r0, r7
 8005624:	f7ff ffc2 	bl	80055ac <sbrk_aligned>
 8005628:	1c43      	adds	r3, r0, #1
 800562a:	4604      	mov	r4, r0
 800562c:	d14d      	bne.n	80056ca <_malloc_r+0xde>
 800562e:	6834      	ldr	r4, [r6, #0]
 8005630:	4626      	mov	r6, r4
 8005632:	2e00      	cmp	r6, #0
 8005634:	d140      	bne.n	80056b8 <_malloc_r+0xcc>
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	4631      	mov	r1, r6
 800563a:	4638      	mov	r0, r7
 800563c:	eb04 0803 	add.w	r8, r4, r3
 8005640:	f000 f848 	bl	80056d4 <_sbrk_r>
 8005644:	4580      	cmp	r8, r0
 8005646:	d13a      	bne.n	80056be <_malloc_r+0xd2>
 8005648:	6821      	ldr	r1, [r4, #0]
 800564a:	3503      	adds	r5, #3
 800564c:	1a6d      	subs	r5, r5, r1
 800564e:	f025 0503 	bic.w	r5, r5, #3
 8005652:	3508      	adds	r5, #8
 8005654:	2d0c      	cmp	r5, #12
 8005656:	bf38      	it	cc
 8005658:	250c      	movcc	r5, #12
 800565a:	4629      	mov	r1, r5
 800565c:	4638      	mov	r0, r7
 800565e:	f7ff ffa5 	bl	80055ac <sbrk_aligned>
 8005662:	3001      	adds	r0, #1
 8005664:	d02b      	beq.n	80056be <_malloc_r+0xd2>
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	442b      	add	r3, r5
 800566a:	6023      	str	r3, [r4, #0]
 800566c:	e00e      	b.n	800568c <_malloc_r+0xa0>
 800566e:	6822      	ldr	r2, [r4, #0]
 8005670:	1b52      	subs	r2, r2, r5
 8005672:	d41e      	bmi.n	80056b2 <_malloc_r+0xc6>
 8005674:	2a0b      	cmp	r2, #11
 8005676:	d916      	bls.n	80056a6 <_malloc_r+0xba>
 8005678:	1961      	adds	r1, r4, r5
 800567a:	42a3      	cmp	r3, r4
 800567c:	6025      	str	r5, [r4, #0]
 800567e:	bf18      	it	ne
 8005680:	6059      	strne	r1, [r3, #4]
 8005682:	6863      	ldr	r3, [r4, #4]
 8005684:	bf08      	it	eq
 8005686:	6031      	streq	r1, [r6, #0]
 8005688:	5162      	str	r2, [r4, r5]
 800568a:	604b      	str	r3, [r1, #4]
 800568c:	4638      	mov	r0, r7
 800568e:	f104 060b 	add.w	r6, r4, #11
 8005692:	f000 f98f 	bl	80059b4 <__malloc_unlock>
 8005696:	f026 0607 	bic.w	r6, r6, #7
 800569a:	1d23      	adds	r3, r4, #4
 800569c:	1af2      	subs	r2, r6, r3
 800569e:	d0b6      	beq.n	800560e <_malloc_r+0x22>
 80056a0:	1b9b      	subs	r3, r3, r6
 80056a2:	50a3      	str	r3, [r4, r2]
 80056a4:	e7b3      	b.n	800560e <_malloc_r+0x22>
 80056a6:	6862      	ldr	r2, [r4, #4]
 80056a8:	42a3      	cmp	r3, r4
 80056aa:	bf0c      	ite	eq
 80056ac:	6032      	streq	r2, [r6, #0]
 80056ae:	605a      	strne	r2, [r3, #4]
 80056b0:	e7ec      	b.n	800568c <_malloc_r+0xa0>
 80056b2:	4623      	mov	r3, r4
 80056b4:	6864      	ldr	r4, [r4, #4]
 80056b6:	e7b2      	b.n	800561e <_malloc_r+0x32>
 80056b8:	4634      	mov	r4, r6
 80056ba:	6876      	ldr	r6, [r6, #4]
 80056bc:	e7b9      	b.n	8005632 <_malloc_r+0x46>
 80056be:	230c      	movs	r3, #12
 80056c0:	603b      	str	r3, [r7, #0]
 80056c2:	4638      	mov	r0, r7
 80056c4:	f000 f976 	bl	80059b4 <__malloc_unlock>
 80056c8:	e7a1      	b.n	800560e <_malloc_r+0x22>
 80056ca:	6025      	str	r5, [r4, #0]
 80056cc:	e7de      	b.n	800568c <_malloc_r+0xa0>
 80056ce:	bf00      	nop
 80056d0:	200004dc 	.word	0x200004dc

080056d4 <_sbrk_r>:
 80056d4:	b538      	push	{r3, r4, r5, lr}
 80056d6:	4d06      	ldr	r5, [pc, #24]	; (80056f0 <_sbrk_r+0x1c>)
 80056d8:	2300      	movs	r3, #0
 80056da:	4604      	mov	r4, r0
 80056dc:	4608      	mov	r0, r1
 80056de:	602b      	str	r3, [r5, #0]
 80056e0:	f7fb fde0 	bl	80012a4 <_sbrk>
 80056e4:	1c43      	adds	r3, r0, #1
 80056e6:	d102      	bne.n	80056ee <_sbrk_r+0x1a>
 80056e8:	682b      	ldr	r3, [r5, #0]
 80056ea:	b103      	cbz	r3, 80056ee <_sbrk_r+0x1a>
 80056ec:	6023      	str	r3, [r4, #0]
 80056ee:	bd38      	pop	{r3, r4, r5, pc}
 80056f0:	200004e4 	.word	0x200004e4

080056f4 <siprintf>:
 80056f4:	b40e      	push	{r1, r2, r3}
 80056f6:	b500      	push	{lr}
 80056f8:	b09c      	sub	sp, #112	; 0x70
 80056fa:	ab1d      	add	r3, sp, #116	; 0x74
 80056fc:	9002      	str	r0, [sp, #8]
 80056fe:	9006      	str	r0, [sp, #24]
 8005700:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005704:	4809      	ldr	r0, [pc, #36]	; (800572c <siprintf+0x38>)
 8005706:	9107      	str	r1, [sp, #28]
 8005708:	9104      	str	r1, [sp, #16]
 800570a:	4909      	ldr	r1, [pc, #36]	; (8005730 <siprintf+0x3c>)
 800570c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005710:	9105      	str	r1, [sp, #20]
 8005712:	6800      	ldr	r0, [r0, #0]
 8005714:	9301      	str	r3, [sp, #4]
 8005716:	a902      	add	r1, sp, #8
 8005718:	f000 f9fa 	bl	8005b10 <_svfiprintf_r>
 800571c:	9b02      	ldr	r3, [sp, #8]
 800571e:	2200      	movs	r2, #0
 8005720:	701a      	strb	r2, [r3, #0]
 8005722:	b01c      	add	sp, #112	; 0x70
 8005724:	f85d eb04 	ldr.w	lr, [sp], #4
 8005728:	b003      	add	sp, #12
 800572a:	4770      	bx	lr
 800572c:	20000214 	.word	0x20000214
 8005730:	ffff0208 	.word	0xffff0208

08005734 <__sread>:
 8005734:	b510      	push	{r4, lr}
 8005736:	460c      	mov	r4, r1
 8005738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800573c:	f000 fc7c 	bl	8006038 <_read_r>
 8005740:	2800      	cmp	r0, #0
 8005742:	bfab      	itete	ge
 8005744:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005746:	89a3      	ldrhlt	r3, [r4, #12]
 8005748:	181b      	addge	r3, r3, r0
 800574a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800574e:	bfac      	ite	ge
 8005750:	6563      	strge	r3, [r4, #84]	; 0x54
 8005752:	81a3      	strhlt	r3, [r4, #12]
 8005754:	bd10      	pop	{r4, pc}

08005756 <__swrite>:
 8005756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800575a:	461f      	mov	r7, r3
 800575c:	898b      	ldrh	r3, [r1, #12]
 800575e:	05db      	lsls	r3, r3, #23
 8005760:	4605      	mov	r5, r0
 8005762:	460c      	mov	r4, r1
 8005764:	4616      	mov	r6, r2
 8005766:	d505      	bpl.n	8005774 <__swrite+0x1e>
 8005768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800576c:	2302      	movs	r3, #2
 800576e:	2200      	movs	r2, #0
 8005770:	f000 f908 	bl	8005984 <_lseek_r>
 8005774:	89a3      	ldrh	r3, [r4, #12]
 8005776:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800577a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800577e:	81a3      	strh	r3, [r4, #12]
 8005780:	4632      	mov	r2, r6
 8005782:	463b      	mov	r3, r7
 8005784:	4628      	mov	r0, r5
 8005786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800578a:	f000 b817 	b.w	80057bc <_write_r>

0800578e <__sseek>:
 800578e:	b510      	push	{r4, lr}
 8005790:	460c      	mov	r4, r1
 8005792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005796:	f000 f8f5 	bl	8005984 <_lseek_r>
 800579a:	1c43      	adds	r3, r0, #1
 800579c:	89a3      	ldrh	r3, [r4, #12]
 800579e:	bf15      	itete	ne
 80057a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80057a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80057aa:	81a3      	strheq	r3, [r4, #12]
 80057ac:	bf18      	it	ne
 80057ae:	81a3      	strhne	r3, [r4, #12]
 80057b0:	bd10      	pop	{r4, pc}

080057b2 <__sclose>:
 80057b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057b6:	f000 b813 	b.w	80057e0 <_close_r>
	...

080057bc <_write_r>:
 80057bc:	b538      	push	{r3, r4, r5, lr}
 80057be:	4d07      	ldr	r5, [pc, #28]	; (80057dc <_write_r+0x20>)
 80057c0:	4604      	mov	r4, r0
 80057c2:	4608      	mov	r0, r1
 80057c4:	4611      	mov	r1, r2
 80057c6:	2200      	movs	r2, #0
 80057c8:	602a      	str	r2, [r5, #0]
 80057ca:	461a      	mov	r2, r3
 80057cc:	f7ff fbf1 	bl	8004fb2 <_write>
 80057d0:	1c43      	adds	r3, r0, #1
 80057d2:	d102      	bne.n	80057da <_write_r+0x1e>
 80057d4:	682b      	ldr	r3, [r5, #0]
 80057d6:	b103      	cbz	r3, 80057da <_write_r+0x1e>
 80057d8:	6023      	str	r3, [r4, #0]
 80057da:	bd38      	pop	{r3, r4, r5, pc}
 80057dc:	200004e4 	.word	0x200004e4

080057e0 <_close_r>:
 80057e0:	b538      	push	{r3, r4, r5, lr}
 80057e2:	4d06      	ldr	r5, [pc, #24]	; (80057fc <_close_r+0x1c>)
 80057e4:	2300      	movs	r3, #0
 80057e6:	4604      	mov	r4, r0
 80057e8:	4608      	mov	r0, r1
 80057ea:	602b      	str	r3, [r5, #0]
 80057ec:	f7ff fc12 	bl	8005014 <_close>
 80057f0:	1c43      	adds	r3, r0, #1
 80057f2:	d102      	bne.n	80057fa <_close_r+0x1a>
 80057f4:	682b      	ldr	r3, [r5, #0]
 80057f6:	b103      	cbz	r3, 80057fa <_close_r+0x1a>
 80057f8:	6023      	str	r3, [r4, #0]
 80057fa:	bd38      	pop	{r3, r4, r5, pc}
 80057fc:	200004e4 	.word	0x200004e4

08005800 <__sflush_r>:
 8005800:	898a      	ldrh	r2, [r1, #12]
 8005802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005806:	4605      	mov	r5, r0
 8005808:	0710      	lsls	r0, r2, #28
 800580a:	460c      	mov	r4, r1
 800580c:	d458      	bmi.n	80058c0 <__sflush_r+0xc0>
 800580e:	684b      	ldr	r3, [r1, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	dc05      	bgt.n	8005820 <__sflush_r+0x20>
 8005814:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005816:	2b00      	cmp	r3, #0
 8005818:	dc02      	bgt.n	8005820 <__sflush_r+0x20>
 800581a:	2000      	movs	r0, #0
 800581c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005820:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005822:	2e00      	cmp	r6, #0
 8005824:	d0f9      	beq.n	800581a <__sflush_r+0x1a>
 8005826:	2300      	movs	r3, #0
 8005828:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800582c:	682f      	ldr	r7, [r5, #0]
 800582e:	602b      	str	r3, [r5, #0]
 8005830:	d032      	beq.n	8005898 <__sflush_r+0x98>
 8005832:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005834:	89a3      	ldrh	r3, [r4, #12]
 8005836:	075a      	lsls	r2, r3, #29
 8005838:	d505      	bpl.n	8005846 <__sflush_r+0x46>
 800583a:	6863      	ldr	r3, [r4, #4]
 800583c:	1ac0      	subs	r0, r0, r3
 800583e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005840:	b10b      	cbz	r3, 8005846 <__sflush_r+0x46>
 8005842:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005844:	1ac0      	subs	r0, r0, r3
 8005846:	2300      	movs	r3, #0
 8005848:	4602      	mov	r2, r0
 800584a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800584c:	6a21      	ldr	r1, [r4, #32]
 800584e:	4628      	mov	r0, r5
 8005850:	47b0      	blx	r6
 8005852:	1c43      	adds	r3, r0, #1
 8005854:	89a3      	ldrh	r3, [r4, #12]
 8005856:	d106      	bne.n	8005866 <__sflush_r+0x66>
 8005858:	6829      	ldr	r1, [r5, #0]
 800585a:	291d      	cmp	r1, #29
 800585c:	d82c      	bhi.n	80058b8 <__sflush_r+0xb8>
 800585e:	4a2a      	ldr	r2, [pc, #168]	; (8005908 <__sflush_r+0x108>)
 8005860:	40ca      	lsrs	r2, r1
 8005862:	07d6      	lsls	r6, r2, #31
 8005864:	d528      	bpl.n	80058b8 <__sflush_r+0xb8>
 8005866:	2200      	movs	r2, #0
 8005868:	6062      	str	r2, [r4, #4]
 800586a:	04d9      	lsls	r1, r3, #19
 800586c:	6922      	ldr	r2, [r4, #16]
 800586e:	6022      	str	r2, [r4, #0]
 8005870:	d504      	bpl.n	800587c <__sflush_r+0x7c>
 8005872:	1c42      	adds	r2, r0, #1
 8005874:	d101      	bne.n	800587a <__sflush_r+0x7a>
 8005876:	682b      	ldr	r3, [r5, #0]
 8005878:	b903      	cbnz	r3, 800587c <__sflush_r+0x7c>
 800587a:	6560      	str	r0, [r4, #84]	; 0x54
 800587c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800587e:	602f      	str	r7, [r5, #0]
 8005880:	2900      	cmp	r1, #0
 8005882:	d0ca      	beq.n	800581a <__sflush_r+0x1a>
 8005884:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005888:	4299      	cmp	r1, r3
 800588a:	d002      	beq.n	8005892 <__sflush_r+0x92>
 800588c:	4628      	mov	r0, r5
 800588e:	f000 f897 	bl	80059c0 <_free_r>
 8005892:	2000      	movs	r0, #0
 8005894:	6360      	str	r0, [r4, #52]	; 0x34
 8005896:	e7c1      	b.n	800581c <__sflush_r+0x1c>
 8005898:	6a21      	ldr	r1, [r4, #32]
 800589a:	2301      	movs	r3, #1
 800589c:	4628      	mov	r0, r5
 800589e:	47b0      	blx	r6
 80058a0:	1c41      	adds	r1, r0, #1
 80058a2:	d1c7      	bne.n	8005834 <__sflush_r+0x34>
 80058a4:	682b      	ldr	r3, [r5, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d0c4      	beq.n	8005834 <__sflush_r+0x34>
 80058aa:	2b1d      	cmp	r3, #29
 80058ac:	d001      	beq.n	80058b2 <__sflush_r+0xb2>
 80058ae:	2b16      	cmp	r3, #22
 80058b0:	d101      	bne.n	80058b6 <__sflush_r+0xb6>
 80058b2:	602f      	str	r7, [r5, #0]
 80058b4:	e7b1      	b.n	800581a <__sflush_r+0x1a>
 80058b6:	89a3      	ldrh	r3, [r4, #12]
 80058b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058bc:	81a3      	strh	r3, [r4, #12]
 80058be:	e7ad      	b.n	800581c <__sflush_r+0x1c>
 80058c0:	690f      	ldr	r7, [r1, #16]
 80058c2:	2f00      	cmp	r7, #0
 80058c4:	d0a9      	beq.n	800581a <__sflush_r+0x1a>
 80058c6:	0793      	lsls	r3, r2, #30
 80058c8:	680e      	ldr	r6, [r1, #0]
 80058ca:	bf08      	it	eq
 80058cc:	694b      	ldreq	r3, [r1, #20]
 80058ce:	600f      	str	r7, [r1, #0]
 80058d0:	bf18      	it	ne
 80058d2:	2300      	movne	r3, #0
 80058d4:	eba6 0807 	sub.w	r8, r6, r7
 80058d8:	608b      	str	r3, [r1, #8]
 80058da:	f1b8 0f00 	cmp.w	r8, #0
 80058de:	dd9c      	ble.n	800581a <__sflush_r+0x1a>
 80058e0:	6a21      	ldr	r1, [r4, #32]
 80058e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058e4:	4643      	mov	r3, r8
 80058e6:	463a      	mov	r2, r7
 80058e8:	4628      	mov	r0, r5
 80058ea:	47b0      	blx	r6
 80058ec:	2800      	cmp	r0, #0
 80058ee:	dc06      	bgt.n	80058fe <__sflush_r+0xfe>
 80058f0:	89a3      	ldrh	r3, [r4, #12]
 80058f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058f6:	81a3      	strh	r3, [r4, #12]
 80058f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058fc:	e78e      	b.n	800581c <__sflush_r+0x1c>
 80058fe:	4407      	add	r7, r0
 8005900:	eba8 0800 	sub.w	r8, r8, r0
 8005904:	e7e9      	b.n	80058da <__sflush_r+0xda>
 8005906:	bf00      	nop
 8005908:	20400001 	.word	0x20400001

0800590c <_fflush_r>:
 800590c:	b538      	push	{r3, r4, r5, lr}
 800590e:	690b      	ldr	r3, [r1, #16]
 8005910:	4605      	mov	r5, r0
 8005912:	460c      	mov	r4, r1
 8005914:	b913      	cbnz	r3, 800591c <_fflush_r+0x10>
 8005916:	2500      	movs	r5, #0
 8005918:	4628      	mov	r0, r5
 800591a:	bd38      	pop	{r3, r4, r5, pc}
 800591c:	b118      	cbz	r0, 8005926 <_fflush_r+0x1a>
 800591e:	6983      	ldr	r3, [r0, #24]
 8005920:	b90b      	cbnz	r3, 8005926 <_fflush_r+0x1a>
 8005922:	f7ff fd75 	bl	8005410 <__sinit>
 8005926:	4b14      	ldr	r3, [pc, #80]	; (8005978 <_fflush_r+0x6c>)
 8005928:	429c      	cmp	r4, r3
 800592a:	d11b      	bne.n	8005964 <_fflush_r+0x58>
 800592c:	686c      	ldr	r4, [r5, #4]
 800592e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d0ef      	beq.n	8005916 <_fflush_r+0xa>
 8005936:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005938:	07d0      	lsls	r0, r2, #31
 800593a:	d404      	bmi.n	8005946 <_fflush_r+0x3a>
 800593c:	0599      	lsls	r1, r3, #22
 800593e:	d402      	bmi.n	8005946 <_fflush_r+0x3a>
 8005940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005942:	f7ff fe28 	bl	8005596 <__retarget_lock_acquire_recursive>
 8005946:	4628      	mov	r0, r5
 8005948:	4621      	mov	r1, r4
 800594a:	f7ff ff59 	bl	8005800 <__sflush_r>
 800594e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005950:	07da      	lsls	r2, r3, #31
 8005952:	4605      	mov	r5, r0
 8005954:	d4e0      	bmi.n	8005918 <_fflush_r+0xc>
 8005956:	89a3      	ldrh	r3, [r4, #12]
 8005958:	059b      	lsls	r3, r3, #22
 800595a:	d4dd      	bmi.n	8005918 <_fflush_r+0xc>
 800595c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800595e:	f7ff fe1b 	bl	8005598 <__retarget_lock_release_recursive>
 8005962:	e7d9      	b.n	8005918 <_fflush_r+0xc>
 8005964:	4b05      	ldr	r3, [pc, #20]	; (800597c <_fflush_r+0x70>)
 8005966:	429c      	cmp	r4, r3
 8005968:	d101      	bne.n	800596e <_fflush_r+0x62>
 800596a:	68ac      	ldr	r4, [r5, #8]
 800596c:	e7df      	b.n	800592e <_fflush_r+0x22>
 800596e:	4b04      	ldr	r3, [pc, #16]	; (8005980 <_fflush_r+0x74>)
 8005970:	429c      	cmp	r4, r3
 8005972:	bf08      	it	eq
 8005974:	68ec      	ldreq	r4, [r5, #12]
 8005976:	e7da      	b.n	800592e <_fflush_r+0x22>
 8005978:	0800621c 	.word	0x0800621c
 800597c:	0800623c 	.word	0x0800623c
 8005980:	080061fc 	.word	0x080061fc

08005984 <_lseek_r>:
 8005984:	b538      	push	{r3, r4, r5, lr}
 8005986:	4d07      	ldr	r5, [pc, #28]	; (80059a4 <_lseek_r+0x20>)
 8005988:	4604      	mov	r4, r0
 800598a:	4608      	mov	r0, r1
 800598c:	4611      	mov	r1, r2
 800598e:	2200      	movs	r2, #0
 8005990:	602a      	str	r2, [r5, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	f7ff fafb 	bl	8004f8e <_lseek>
 8005998:	1c43      	adds	r3, r0, #1
 800599a:	d102      	bne.n	80059a2 <_lseek_r+0x1e>
 800599c:	682b      	ldr	r3, [r5, #0]
 800599e:	b103      	cbz	r3, 80059a2 <_lseek_r+0x1e>
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	bd38      	pop	{r3, r4, r5, pc}
 80059a4:	200004e4 	.word	0x200004e4

080059a8 <__malloc_lock>:
 80059a8:	4801      	ldr	r0, [pc, #4]	; (80059b0 <__malloc_lock+0x8>)
 80059aa:	f7ff bdf4 	b.w	8005596 <__retarget_lock_acquire_recursive>
 80059ae:	bf00      	nop
 80059b0:	200004d8 	.word	0x200004d8

080059b4 <__malloc_unlock>:
 80059b4:	4801      	ldr	r0, [pc, #4]	; (80059bc <__malloc_unlock+0x8>)
 80059b6:	f7ff bdef 	b.w	8005598 <__retarget_lock_release_recursive>
 80059ba:	bf00      	nop
 80059bc:	200004d8 	.word	0x200004d8

080059c0 <_free_r>:
 80059c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059c2:	2900      	cmp	r1, #0
 80059c4:	d044      	beq.n	8005a50 <_free_r+0x90>
 80059c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059ca:	9001      	str	r0, [sp, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f1a1 0404 	sub.w	r4, r1, #4
 80059d2:	bfb8      	it	lt
 80059d4:	18e4      	addlt	r4, r4, r3
 80059d6:	f7ff ffe7 	bl	80059a8 <__malloc_lock>
 80059da:	4a1e      	ldr	r2, [pc, #120]	; (8005a54 <_free_r+0x94>)
 80059dc:	9801      	ldr	r0, [sp, #4]
 80059de:	6813      	ldr	r3, [r2, #0]
 80059e0:	b933      	cbnz	r3, 80059f0 <_free_r+0x30>
 80059e2:	6063      	str	r3, [r4, #4]
 80059e4:	6014      	str	r4, [r2, #0]
 80059e6:	b003      	add	sp, #12
 80059e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059ec:	f7ff bfe2 	b.w	80059b4 <__malloc_unlock>
 80059f0:	42a3      	cmp	r3, r4
 80059f2:	d908      	bls.n	8005a06 <_free_r+0x46>
 80059f4:	6825      	ldr	r5, [r4, #0]
 80059f6:	1961      	adds	r1, r4, r5
 80059f8:	428b      	cmp	r3, r1
 80059fa:	bf01      	itttt	eq
 80059fc:	6819      	ldreq	r1, [r3, #0]
 80059fe:	685b      	ldreq	r3, [r3, #4]
 8005a00:	1949      	addeq	r1, r1, r5
 8005a02:	6021      	streq	r1, [r4, #0]
 8005a04:	e7ed      	b.n	80059e2 <_free_r+0x22>
 8005a06:	461a      	mov	r2, r3
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	b10b      	cbz	r3, 8005a10 <_free_r+0x50>
 8005a0c:	42a3      	cmp	r3, r4
 8005a0e:	d9fa      	bls.n	8005a06 <_free_r+0x46>
 8005a10:	6811      	ldr	r1, [r2, #0]
 8005a12:	1855      	adds	r5, r2, r1
 8005a14:	42a5      	cmp	r5, r4
 8005a16:	d10b      	bne.n	8005a30 <_free_r+0x70>
 8005a18:	6824      	ldr	r4, [r4, #0]
 8005a1a:	4421      	add	r1, r4
 8005a1c:	1854      	adds	r4, r2, r1
 8005a1e:	42a3      	cmp	r3, r4
 8005a20:	6011      	str	r1, [r2, #0]
 8005a22:	d1e0      	bne.n	80059e6 <_free_r+0x26>
 8005a24:	681c      	ldr	r4, [r3, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	6053      	str	r3, [r2, #4]
 8005a2a:	4421      	add	r1, r4
 8005a2c:	6011      	str	r1, [r2, #0]
 8005a2e:	e7da      	b.n	80059e6 <_free_r+0x26>
 8005a30:	d902      	bls.n	8005a38 <_free_r+0x78>
 8005a32:	230c      	movs	r3, #12
 8005a34:	6003      	str	r3, [r0, #0]
 8005a36:	e7d6      	b.n	80059e6 <_free_r+0x26>
 8005a38:	6825      	ldr	r5, [r4, #0]
 8005a3a:	1961      	adds	r1, r4, r5
 8005a3c:	428b      	cmp	r3, r1
 8005a3e:	bf04      	itt	eq
 8005a40:	6819      	ldreq	r1, [r3, #0]
 8005a42:	685b      	ldreq	r3, [r3, #4]
 8005a44:	6063      	str	r3, [r4, #4]
 8005a46:	bf04      	itt	eq
 8005a48:	1949      	addeq	r1, r1, r5
 8005a4a:	6021      	streq	r1, [r4, #0]
 8005a4c:	6054      	str	r4, [r2, #4]
 8005a4e:	e7ca      	b.n	80059e6 <_free_r+0x26>
 8005a50:	b003      	add	sp, #12
 8005a52:	bd30      	pop	{r4, r5, pc}
 8005a54:	200004dc 	.word	0x200004dc

08005a58 <__ssputs_r>:
 8005a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a5c:	688e      	ldr	r6, [r1, #8]
 8005a5e:	429e      	cmp	r6, r3
 8005a60:	4682      	mov	sl, r0
 8005a62:	460c      	mov	r4, r1
 8005a64:	4690      	mov	r8, r2
 8005a66:	461f      	mov	r7, r3
 8005a68:	d838      	bhi.n	8005adc <__ssputs_r+0x84>
 8005a6a:	898a      	ldrh	r2, [r1, #12]
 8005a6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a70:	d032      	beq.n	8005ad8 <__ssputs_r+0x80>
 8005a72:	6825      	ldr	r5, [r4, #0]
 8005a74:	6909      	ldr	r1, [r1, #16]
 8005a76:	eba5 0901 	sub.w	r9, r5, r1
 8005a7a:	6965      	ldr	r5, [r4, #20]
 8005a7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a84:	3301      	adds	r3, #1
 8005a86:	444b      	add	r3, r9
 8005a88:	106d      	asrs	r5, r5, #1
 8005a8a:	429d      	cmp	r5, r3
 8005a8c:	bf38      	it	cc
 8005a8e:	461d      	movcc	r5, r3
 8005a90:	0553      	lsls	r3, r2, #21
 8005a92:	d531      	bpl.n	8005af8 <__ssputs_r+0xa0>
 8005a94:	4629      	mov	r1, r5
 8005a96:	f7ff fda9 	bl	80055ec <_malloc_r>
 8005a9a:	4606      	mov	r6, r0
 8005a9c:	b950      	cbnz	r0, 8005ab4 <__ssputs_r+0x5c>
 8005a9e:	230c      	movs	r3, #12
 8005aa0:	f8ca 3000 	str.w	r3, [sl]
 8005aa4:	89a3      	ldrh	r3, [r4, #12]
 8005aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aaa:	81a3      	strh	r3, [r4, #12]
 8005aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab4:	6921      	ldr	r1, [r4, #16]
 8005ab6:	464a      	mov	r2, r9
 8005ab8:	f000 fad0 	bl	800605c <memcpy>
 8005abc:	89a3      	ldrh	r3, [r4, #12]
 8005abe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac6:	81a3      	strh	r3, [r4, #12]
 8005ac8:	6126      	str	r6, [r4, #16]
 8005aca:	6165      	str	r5, [r4, #20]
 8005acc:	444e      	add	r6, r9
 8005ace:	eba5 0509 	sub.w	r5, r5, r9
 8005ad2:	6026      	str	r6, [r4, #0]
 8005ad4:	60a5      	str	r5, [r4, #8]
 8005ad6:	463e      	mov	r6, r7
 8005ad8:	42be      	cmp	r6, r7
 8005ada:	d900      	bls.n	8005ade <__ssputs_r+0x86>
 8005adc:	463e      	mov	r6, r7
 8005ade:	6820      	ldr	r0, [r4, #0]
 8005ae0:	4632      	mov	r2, r6
 8005ae2:	4641      	mov	r1, r8
 8005ae4:	f000 fac8 	bl	8006078 <memmove>
 8005ae8:	68a3      	ldr	r3, [r4, #8]
 8005aea:	1b9b      	subs	r3, r3, r6
 8005aec:	60a3      	str	r3, [r4, #8]
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	4433      	add	r3, r6
 8005af2:	6023      	str	r3, [r4, #0]
 8005af4:	2000      	movs	r0, #0
 8005af6:	e7db      	b.n	8005ab0 <__ssputs_r+0x58>
 8005af8:	462a      	mov	r2, r5
 8005afa:	f000 fad7 	bl	80060ac <_realloc_r>
 8005afe:	4606      	mov	r6, r0
 8005b00:	2800      	cmp	r0, #0
 8005b02:	d1e1      	bne.n	8005ac8 <__ssputs_r+0x70>
 8005b04:	6921      	ldr	r1, [r4, #16]
 8005b06:	4650      	mov	r0, sl
 8005b08:	f7ff ff5a 	bl	80059c0 <_free_r>
 8005b0c:	e7c7      	b.n	8005a9e <__ssputs_r+0x46>
	...

08005b10 <_svfiprintf_r>:
 8005b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b14:	4698      	mov	r8, r3
 8005b16:	898b      	ldrh	r3, [r1, #12]
 8005b18:	061b      	lsls	r3, r3, #24
 8005b1a:	b09d      	sub	sp, #116	; 0x74
 8005b1c:	4607      	mov	r7, r0
 8005b1e:	460d      	mov	r5, r1
 8005b20:	4614      	mov	r4, r2
 8005b22:	d50e      	bpl.n	8005b42 <_svfiprintf_r+0x32>
 8005b24:	690b      	ldr	r3, [r1, #16]
 8005b26:	b963      	cbnz	r3, 8005b42 <_svfiprintf_r+0x32>
 8005b28:	2140      	movs	r1, #64	; 0x40
 8005b2a:	f7ff fd5f 	bl	80055ec <_malloc_r>
 8005b2e:	6028      	str	r0, [r5, #0]
 8005b30:	6128      	str	r0, [r5, #16]
 8005b32:	b920      	cbnz	r0, 8005b3e <_svfiprintf_r+0x2e>
 8005b34:	230c      	movs	r3, #12
 8005b36:	603b      	str	r3, [r7, #0]
 8005b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b3c:	e0d1      	b.n	8005ce2 <_svfiprintf_r+0x1d2>
 8005b3e:	2340      	movs	r3, #64	; 0x40
 8005b40:	616b      	str	r3, [r5, #20]
 8005b42:	2300      	movs	r3, #0
 8005b44:	9309      	str	r3, [sp, #36]	; 0x24
 8005b46:	2320      	movs	r3, #32
 8005b48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b50:	2330      	movs	r3, #48	; 0x30
 8005b52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005cfc <_svfiprintf_r+0x1ec>
 8005b56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b5a:	f04f 0901 	mov.w	r9, #1
 8005b5e:	4623      	mov	r3, r4
 8005b60:	469a      	mov	sl, r3
 8005b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b66:	b10a      	cbz	r2, 8005b6c <_svfiprintf_r+0x5c>
 8005b68:	2a25      	cmp	r2, #37	; 0x25
 8005b6a:	d1f9      	bne.n	8005b60 <_svfiprintf_r+0x50>
 8005b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8005b70:	d00b      	beq.n	8005b8a <_svfiprintf_r+0x7a>
 8005b72:	465b      	mov	r3, fp
 8005b74:	4622      	mov	r2, r4
 8005b76:	4629      	mov	r1, r5
 8005b78:	4638      	mov	r0, r7
 8005b7a:	f7ff ff6d 	bl	8005a58 <__ssputs_r>
 8005b7e:	3001      	adds	r0, #1
 8005b80:	f000 80aa 	beq.w	8005cd8 <_svfiprintf_r+0x1c8>
 8005b84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b86:	445a      	add	r2, fp
 8005b88:	9209      	str	r2, [sp, #36]	; 0x24
 8005b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 80a2 	beq.w	8005cd8 <_svfiprintf_r+0x1c8>
 8005b94:	2300      	movs	r3, #0
 8005b96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b9e:	f10a 0a01 	add.w	sl, sl, #1
 8005ba2:	9304      	str	r3, [sp, #16]
 8005ba4:	9307      	str	r3, [sp, #28]
 8005ba6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005baa:	931a      	str	r3, [sp, #104]	; 0x68
 8005bac:	4654      	mov	r4, sl
 8005bae:	2205      	movs	r2, #5
 8005bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bb4:	4851      	ldr	r0, [pc, #324]	; (8005cfc <_svfiprintf_r+0x1ec>)
 8005bb6:	f7fa fb23 	bl	8000200 <memchr>
 8005bba:	9a04      	ldr	r2, [sp, #16]
 8005bbc:	b9d8      	cbnz	r0, 8005bf6 <_svfiprintf_r+0xe6>
 8005bbe:	06d0      	lsls	r0, r2, #27
 8005bc0:	bf44      	itt	mi
 8005bc2:	2320      	movmi	r3, #32
 8005bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bc8:	0711      	lsls	r1, r2, #28
 8005bca:	bf44      	itt	mi
 8005bcc:	232b      	movmi	r3, #43	; 0x2b
 8005bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8005bd6:	2b2a      	cmp	r3, #42	; 0x2a
 8005bd8:	d015      	beq.n	8005c06 <_svfiprintf_r+0xf6>
 8005bda:	9a07      	ldr	r2, [sp, #28]
 8005bdc:	4654      	mov	r4, sl
 8005bde:	2000      	movs	r0, #0
 8005be0:	f04f 0c0a 	mov.w	ip, #10
 8005be4:	4621      	mov	r1, r4
 8005be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bea:	3b30      	subs	r3, #48	; 0x30
 8005bec:	2b09      	cmp	r3, #9
 8005bee:	d94e      	bls.n	8005c8e <_svfiprintf_r+0x17e>
 8005bf0:	b1b0      	cbz	r0, 8005c20 <_svfiprintf_r+0x110>
 8005bf2:	9207      	str	r2, [sp, #28]
 8005bf4:	e014      	b.n	8005c20 <_svfiprintf_r+0x110>
 8005bf6:	eba0 0308 	sub.w	r3, r0, r8
 8005bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	9304      	str	r3, [sp, #16]
 8005c02:	46a2      	mov	sl, r4
 8005c04:	e7d2      	b.n	8005bac <_svfiprintf_r+0x9c>
 8005c06:	9b03      	ldr	r3, [sp, #12]
 8005c08:	1d19      	adds	r1, r3, #4
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	9103      	str	r1, [sp, #12]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	bfbb      	ittet	lt
 8005c12:	425b      	neglt	r3, r3
 8005c14:	f042 0202 	orrlt.w	r2, r2, #2
 8005c18:	9307      	strge	r3, [sp, #28]
 8005c1a:	9307      	strlt	r3, [sp, #28]
 8005c1c:	bfb8      	it	lt
 8005c1e:	9204      	strlt	r2, [sp, #16]
 8005c20:	7823      	ldrb	r3, [r4, #0]
 8005c22:	2b2e      	cmp	r3, #46	; 0x2e
 8005c24:	d10c      	bne.n	8005c40 <_svfiprintf_r+0x130>
 8005c26:	7863      	ldrb	r3, [r4, #1]
 8005c28:	2b2a      	cmp	r3, #42	; 0x2a
 8005c2a:	d135      	bne.n	8005c98 <_svfiprintf_r+0x188>
 8005c2c:	9b03      	ldr	r3, [sp, #12]
 8005c2e:	1d1a      	adds	r2, r3, #4
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	9203      	str	r2, [sp, #12]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	bfb8      	it	lt
 8005c38:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005c3c:	3402      	adds	r4, #2
 8005c3e:	9305      	str	r3, [sp, #20]
 8005c40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005d0c <_svfiprintf_r+0x1fc>
 8005c44:	7821      	ldrb	r1, [r4, #0]
 8005c46:	2203      	movs	r2, #3
 8005c48:	4650      	mov	r0, sl
 8005c4a:	f7fa fad9 	bl	8000200 <memchr>
 8005c4e:	b140      	cbz	r0, 8005c62 <_svfiprintf_r+0x152>
 8005c50:	2340      	movs	r3, #64	; 0x40
 8005c52:	eba0 000a 	sub.w	r0, r0, sl
 8005c56:	fa03 f000 	lsl.w	r0, r3, r0
 8005c5a:	9b04      	ldr	r3, [sp, #16]
 8005c5c:	4303      	orrs	r3, r0
 8005c5e:	3401      	adds	r4, #1
 8005c60:	9304      	str	r3, [sp, #16]
 8005c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c66:	4826      	ldr	r0, [pc, #152]	; (8005d00 <_svfiprintf_r+0x1f0>)
 8005c68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c6c:	2206      	movs	r2, #6
 8005c6e:	f7fa fac7 	bl	8000200 <memchr>
 8005c72:	2800      	cmp	r0, #0
 8005c74:	d038      	beq.n	8005ce8 <_svfiprintf_r+0x1d8>
 8005c76:	4b23      	ldr	r3, [pc, #140]	; (8005d04 <_svfiprintf_r+0x1f4>)
 8005c78:	bb1b      	cbnz	r3, 8005cc2 <_svfiprintf_r+0x1b2>
 8005c7a:	9b03      	ldr	r3, [sp, #12]
 8005c7c:	3307      	adds	r3, #7
 8005c7e:	f023 0307 	bic.w	r3, r3, #7
 8005c82:	3308      	adds	r3, #8
 8005c84:	9303      	str	r3, [sp, #12]
 8005c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c88:	4433      	add	r3, r6
 8005c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c8c:	e767      	b.n	8005b5e <_svfiprintf_r+0x4e>
 8005c8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c92:	460c      	mov	r4, r1
 8005c94:	2001      	movs	r0, #1
 8005c96:	e7a5      	b.n	8005be4 <_svfiprintf_r+0xd4>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	3401      	adds	r4, #1
 8005c9c:	9305      	str	r3, [sp, #20]
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	f04f 0c0a 	mov.w	ip, #10
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005caa:	3a30      	subs	r2, #48	; 0x30
 8005cac:	2a09      	cmp	r2, #9
 8005cae:	d903      	bls.n	8005cb8 <_svfiprintf_r+0x1a8>
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d0c5      	beq.n	8005c40 <_svfiprintf_r+0x130>
 8005cb4:	9105      	str	r1, [sp, #20]
 8005cb6:	e7c3      	b.n	8005c40 <_svfiprintf_r+0x130>
 8005cb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cbc:	4604      	mov	r4, r0
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e7f0      	b.n	8005ca4 <_svfiprintf_r+0x194>
 8005cc2:	ab03      	add	r3, sp, #12
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	462a      	mov	r2, r5
 8005cc8:	4b0f      	ldr	r3, [pc, #60]	; (8005d08 <_svfiprintf_r+0x1f8>)
 8005cca:	a904      	add	r1, sp, #16
 8005ccc:	4638      	mov	r0, r7
 8005cce:	f3af 8000 	nop.w
 8005cd2:	1c42      	adds	r2, r0, #1
 8005cd4:	4606      	mov	r6, r0
 8005cd6:	d1d6      	bne.n	8005c86 <_svfiprintf_r+0x176>
 8005cd8:	89ab      	ldrh	r3, [r5, #12]
 8005cda:	065b      	lsls	r3, r3, #25
 8005cdc:	f53f af2c 	bmi.w	8005b38 <_svfiprintf_r+0x28>
 8005ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ce2:	b01d      	add	sp, #116	; 0x74
 8005ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce8:	ab03      	add	r3, sp, #12
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	462a      	mov	r2, r5
 8005cee:	4b06      	ldr	r3, [pc, #24]	; (8005d08 <_svfiprintf_r+0x1f8>)
 8005cf0:	a904      	add	r1, sp, #16
 8005cf2:	4638      	mov	r0, r7
 8005cf4:	f000 f87a 	bl	8005dec <_printf_i>
 8005cf8:	e7eb      	b.n	8005cd2 <_svfiprintf_r+0x1c2>
 8005cfa:	bf00      	nop
 8005cfc:	08006260 	.word	0x08006260
 8005d00:	0800626a 	.word	0x0800626a
 8005d04:	00000000 	.word	0x00000000
 8005d08:	08005a59 	.word	0x08005a59
 8005d0c:	08006266 	.word	0x08006266

08005d10 <_printf_common>:
 8005d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d14:	4616      	mov	r6, r2
 8005d16:	4699      	mov	r9, r3
 8005d18:	688a      	ldr	r2, [r1, #8]
 8005d1a:	690b      	ldr	r3, [r1, #16]
 8005d1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d20:	4293      	cmp	r3, r2
 8005d22:	bfb8      	it	lt
 8005d24:	4613      	movlt	r3, r2
 8005d26:	6033      	str	r3, [r6, #0]
 8005d28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d2c:	4607      	mov	r7, r0
 8005d2e:	460c      	mov	r4, r1
 8005d30:	b10a      	cbz	r2, 8005d36 <_printf_common+0x26>
 8005d32:	3301      	adds	r3, #1
 8005d34:	6033      	str	r3, [r6, #0]
 8005d36:	6823      	ldr	r3, [r4, #0]
 8005d38:	0699      	lsls	r1, r3, #26
 8005d3a:	bf42      	ittt	mi
 8005d3c:	6833      	ldrmi	r3, [r6, #0]
 8005d3e:	3302      	addmi	r3, #2
 8005d40:	6033      	strmi	r3, [r6, #0]
 8005d42:	6825      	ldr	r5, [r4, #0]
 8005d44:	f015 0506 	ands.w	r5, r5, #6
 8005d48:	d106      	bne.n	8005d58 <_printf_common+0x48>
 8005d4a:	f104 0a19 	add.w	sl, r4, #25
 8005d4e:	68e3      	ldr	r3, [r4, #12]
 8005d50:	6832      	ldr	r2, [r6, #0]
 8005d52:	1a9b      	subs	r3, r3, r2
 8005d54:	42ab      	cmp	r3, r5
 8005d56:	dc26      	bgt.n	8005da6 <_printf_common+0x96>
 8005d58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d5c:	1e13      	subs	r3, r2, #0
 8005d5e:	6822      	ldr	r2, [r4, #0]
 8005d60:	bf18      	it	ne
 8005d62:	2301      	movne	r3, #1
 8005d64:	0692      	lsls	r2, r2, #26
 8005d66:	d42b      	bmi.n	8005dc0 <_printf_common+0xb0>
 8005d68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d6c:	4649      	mov	r1, r9
 8005d6e:	4638      	mov	r0, r7
 8005d70:	47c0      	blx	r8
 8005d72:	3001      	adds	r0, #1
 8005d74:	d01e      	beq.n	8005db4 <_printf_common+0xa4>
 8005d76:	6823      	ldr	r3, [r4, #0]
 8005d78:	68e5      	ldr	r5, [r4, #12]
 8005d7a:	6832      	ldr	r2, [r6, #0]
 8005d7c:	f003 0306 	and.w	r3, r3, #6
 8005d80:	2b04      	cmp	r3, #4
 8005d82:	bf08      	it	eq
 8005d84:	1aad      	subeq	r5, r5, r2
 8005d86:	68a3      	ldr	r3, [r4, #8]
 8005d88:	6922      	ldr	r2, [r4, #16]
 8005d8a:	bf0c      	ite	eq
 8005d8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d90:	2500      	movne	r5, #0
 8005d92:	4293      	cmp	r3, r2
 8005d94:	bfc4      	itt	gt
 8005d96:	1a9b      	subgt	r3, r3, r2
 8005d98:	18ed      	addgt	r5, r5, r3
 8005d9a:	2600      	movs	r6, #0
 8005d9c:	341a      	adds	r4, #26
 8005d9e:	42b5      	cmp	r5, r6
 8005da0:	d11a      	bne.n	8005dd8 <_printf_common+0xc8>
 8005da2:	2000      	movs	r0, #0
 8005da4:	e008      	b.n	8005db8 <_printf_common+0xa8>
 8005da6:	2301      	movs	r3, #1
 8005da8:	4652      	mov	r2, sl
 8005daa:	4649      	mov	r1, r9
 8005dac:	4638      	mov	r0, r7
 8005dae:	47c0      	blx	r8
 8005db0:	3001      	adds	r0, #1
 8005db2:	d103      	bne.n	8005dbc <_printf_common+0xac>
 8005db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dbc:	3501      	adds	r5, #1
 8005dbe:	e7c6      	b.n	8005d4e <_printf_common+0x3e>
 8005dc0:	18e1      	adds	r1, r4, r3
 8005dc2:	1c5a      	adds	r2, r3, #1
 8005dc4:	2030      	movs	r0, #48	; 0x30
 8005dc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dca:	4422      	add	r2, r4
 8005dcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005dd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dd4:	3302      	adds	r3, #2
 8005dd6:	e7c7      	b.n	8005d68 <_printf_common+0x58>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	4622      	mov	r2, r4
 8005ddc:	4649      	mov	r1, r9
 8005dde:	4638      	mov	r0, r7
 8005de0:	47c0      	blx	r8
 8005de2:	3001      	adds	r0, #1
 8005de4:	d0e6      	beq.n	8005db4 <_printf_common+0xa4>
 8005de6:	3601      	adds	r6, #1
 8005de8:	e7d9      	b.n	8005d9e <_printf_common+0x8e>
	...

08005dec <_printf_i>:
 8005dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005df0:	7e0f      	ldrb	r7, [r1, #24]
 8005df2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005df4:	2f78      	cmp	r7, #120	; 0x78
 8005df6:	4691      	mov	r9, r2
 8005df8:	4680      	mov	r8, r0
 8005dfa:	460c      	mov	r4, r1
 8005dfc:	469a      	mov	sl, r3
 8005dfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e02:	d807      	bhi.n	8005e14 <_printf_i+0x28>
 8005e04:	2f62      	cmp	r7, #98	; 0x62
 8005e06:	d80a      	bhi.n	8005e1e <_printf_i+0x32>
 8005e08:	2f00      	cmp	r7, #0
 8005e0a:	f000 80d8 	beq.w	8005fbe <_printf_i+0x1d2>
 8005e0e:	2f58      	cmp	r7, #88	; 0x58
 8005e10:	f000 80a3 	beq.w	8005f5a <_printf_i+0x16e>
 8005e14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e1c:	e03a      	b.n	8005e94 <_printf_i+0xa8>
 8005e1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e22:	2b15      	cmp	r3, #21
 8005e24:	d8f6      	bhi.n	8005e14 <_printf_i+0x28>
 8005e26:	a101      	add	r1, pc, #4	; (adr r1, 8005e2c <_printf_i+0x40>)
 8005e28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e2c:	08005e85 	.word	0x08005e85
 8005e30:	08005e99 	.word	0x08005e99
 8005e34:	08005e15 	.word	0x08005e15
 8005e38:	08005e15 	.word	0x08005e15
 8005e3c:	08005e15 	.word	0x08005e15
 8005e40:	08005e15 	.word	0x08005e15
 8005e44:	08005e99 	.word	0x08005e99
 8005e48:	08005e15 	.word	0x08005e15
 8005e4c:	08005e15 	.word	0x08005e15
 8005e50:	08005e15 	.word	0x08005e15
 8005e54:	08005e15 	.word	0x08005e15
 8005e58:	08005fa5 	.word	0x08005fa5
 8005e5c:	08005ec9 	.word	0x08005ec9
 8005e60:	08005f87 	.word	0x08005f87
 8005e64:	08005e15 	.word	0x08005e15
 8005e68:	08005e15 	.word	0x08005e15
 8005e6c:	08005fc7 	.word	0x08005fc7
 8005e70:	08005e15 	.word	0x08005e15
 8005e74:	08005ec9 	.word	0x08005ec9
 8005e78:	08005e15 	.word	0x08005e15
 8005e7c:	08005e15 	.word	0x08005e15
 8005e80:	08005f8f 	.word	0x08005f8f
 8005e84:	682b      	ldr	r3, [r5, #0]
 8005e86:	1d1a      	adds	r2, r3, #4
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	602a      	str	r2, [r5, #0]
 8005e8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e94:	2301      	movs	r3, #1
 8005e96:	e0a3      	b.n	8005fe0 <_printf_i+0x1f4>
 8005e98:	6820      	ldr	r0, [r4, #0]
 8005e9a:	6829      	ldr	r1, [r5, #0]
 8005e9c:	0606      	lsls	r6, r0, #24
 8005e9e:	f101 0304 	add.w	r3, r1, #4
 8005ea2:	d50a      	bpl.n	8005eba <_printf_i+0xce>
 8005ea4:	680e      	ldr	r6, [r1, #0]
 8005ea6:	602b      	str	r3, [r5, #0]
 8005ea8:	2e00      	cmp	r6, #0
 8005eaa:	da03      	bge.n	8005eb4 <_printf_i+0xc8>
 8005eac:	232d      	movs	r3, #45	; 0x2d
 8005eae:	4276      	negs	r6, r6
 8005eb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eb4:	485e      	ldr	r0, [pc, #376]	; (8006030 <_printf_i+0x244>)
 8005eb6:	230a      	movs	r3, #10
 8005eb8:	e019      	b.n	8005eee <_printf_i+0x102>
 8005eba:	680e      	ldr	r6, [r1, #0]
 8005ebc:	602b      	str	r3, [r5, #0]
 8005ebe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ec2:	bf18      	it	ne
 8005ec4:	b236      	sxthne	r6, r6
 8005ec6:	e7ef      	b.n	8005ea8 <_printf_i+0xbc>
 8005ec8:	682b      	ldr	r3, [r5, #0]
 8005eca:	6820      	ldr	r0, [r4, #0]
 8005ecc:	1d19      	adds	r1, r3, #4
 8005ece:	6029      	str	r1, [r5, #0]
 8005ed0:	0601      	lsls	r1, r0, #24
 8005ed2:	d501      	bpl.n	8005ed8 <_printf_i+0xec>
 8005ed4:	681e      	ldr	r6, [r3, #0]
 8005ed6:	e002      	b.n	8005ede <_printf_i+0xf2>
 8005ed8:	0646      	lsls	r6, r0, #25
 8005eda:	d5fb      	bpl.n	8005ed4 <_printf_i+0xe8>
 8005edc:	881e      	ldrh	r6, [r3, #0]
 8005ede:	4854      	ldr	r0, [pc, #336]	; (8006030 <_printf_i+0x244>)
 8005ee0:	2f6f      	cmp	r7, #111	; 0x6f
 8005ee2:	bf0c      	ite	eq
 8005ee4:	2308      	moveq	r3, #8
 8005ee6:	230a      	movne	r3, #10
 8005ee8:	2100      	movs	r1, #0
 8005eea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005eee:	6865      	ldr	r5, [r4, #4]
 8005ef0:	60a5      	str	r5, [r4, #8]
 8005ef2:	2d00      	cmp	r5, #0
 8005ef4:	bfa2      	ittt	ge
 8005ef6:	6821      	ldrge	r1, [r4, #0]
 8005ef8:	f021 0104 	bicge.w	r1, r1, #4
 8005efc:	6021      	strge	r1, [r4, #0]
 8005efe:	b90e      	cbnz	r6, 8005f04 <_printf_i+0x118>
 8005f00:	2d00      	cmp	r5, #0
 8005f02:	d04d      	beq.n	8005fa0 <_printf_i+0x1b4>
 8005f04:	4615      	mov	r5, r2
 8005f06:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f0a:	fb03 6711 	mls	r7, r3, r1, r6
 8005f0e:	5dc7      	ldrb	r7, [r0, r7]
 8005f10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f14:	4637      	mov	r7, r6
 8005f16:	42bb      	cmp	r3, r7
 8005f18:	460e      	mov	r6, r1
 8005f1a:	d9f4      	bls.n	8005f06 <_printf_i+0x11a>
 8005f1c:	2b08      	cmp	r3, #8
 8005f1e:	d10b      	bne.n	8005f38 <_printf_i+0x14c>
 8005f20:	6823      	ldr	r3, [r4, #0]
 8005f22:	07de      	lsls	r6, r3, #31
 8005f24:	d508      	bpl.n	8005f38 <_printf_i+0x14c>
 8005f26:	6923      	ldr	r3, [r4, #16]
 8005f28:	6861      	ldr	r1, [r4, #4]
 8005f2a:	4299      	cmp	r1, r3
 8005f2c:	bfde      	ittt	le
 8005f2e:	2330      	movle	r3, #48	; 0x30
 8005f30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f34:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005f38:	1b52      	subs	r2, r2, r5
 8005f3a:	6122      	str	r2, [r4, #16]
 8005f3c:	f8cd a000 	str.w	sl, [sp]
 8005f40:	464b      	mov	r3, r9
 8005f42:	aa03      	add	r2, sp, #12
 8005f44:	4621      	mov	r1, r4
 8005f46:	4640      	mov	r0, r8
 8005f48:	f7ff fee2 	bl	8005d10 <_printf_common>
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	d14c      	bne.n	8005fea <_printf_i+0x1fe>
 8005f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f54:	b004      	add	sp, #16
 8005f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f5a:	4835      	ldr	r0, [pc, #212]	; (8006030 <_printf_i+0x244>)
 8005f5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005f60:	6829      	ldr	r1, [r5, #0]
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f68:	6029      	str	r1, [r5, #0]
 8005f6a:	061d      	lsls	r5, r3, #24
 8005f6c:	d514      	bpl.n	8005f98 <_printf_i+0x1ac>
 8005f6e:	07df      	lsls	r7, r3, #31
 8005f70:	bf44      	itt	mi
 8005f72:	f043 0320 	orrmi.w	r3, r3, #32
 8005f76:	6023      	strmi	r3, [r4, #0]
 8005f78:	b91e      	cbnz	r6, 8005f82 <_printf_i+0x196>
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	f023 0320 	bic.w	r3, r3, #32
 8005f80:	6023      	str	r3, [r4, #0]
 8005f82:	2310      	movs	r3, #16
 8005f84:	e7b0      	b.n	8005ee8 <_printf_i+0xfc>
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	f043 0320 	orr.w	r3, r3, #32
 8005f8c:	6023      	str	r3, [r4, #0]
 8005f8e:	2378      	movs	r3, #120	; 0x78
 8005f90:	4828      	ldr	r0, [pc, #160]	; (8006034 <_printf_i+0x248>)
 8005f92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f96:	e7e3      	b.n	8005f60 <_printf_i+0x174>
 8005f98:	0659      	lsls	r1, r3, #25
 8005f9a:	bf48      	it	mi
 8005f9c:	b2b6      	uxthmi	r6, r6
 8005f9e:	e7e6      	b.n	8005f6e <_printf_i+0x182>
 8005fa0:	4615      	mov	r5, r2
 8005fa2:	e7bb      	b.n	8005f1c <_printf_i+0x130>
 8005fa4:	682b      	ldr	r3, [r5, #0]
 8005fa6:	6826      	ldr	r6, [r4, #0]
 8005fa8:	6961      	ldr	r1, [r4, #20]
 8005faa:	1d18      	adds	r0, r3, #4
 8005fac:	6028      	str	r0, [r5, #0]
 8005fae:	0635      	lsls	r5, r6, #24
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	d501      	bpl.n	8005fb8 <_printf_i+0x1cc>
 8005fb4:	6019      	str	r1, [r3, #0]
 8005fb6:	e002      	b.n	8005fbe <_printf_i+0x1d2>
 8005fb8:	0670      	lsls	r0, r6, #25
 8005fba:	d5fb      	bpl.n	8005fb4 <_printf_i+0x1c8>
 8005fbc:	8019      	strh	r1, [r3, #0]
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	6123      	str	r3, [r4, #16]
 8005fc2:	4615      	mov	r5, r2
 8005fc4:	e7ba      	b.n	8005f3c <_printf_i+0x150>
 8005fc6:	682b      	ldr	r3, [r5, #0]
 8005fc8:	1d1a      	adds	r2, r3, #4
 8005fca:	602a      	str	r2, [r5, #0]
 8005fcc:	681d      	ldr	r5, [r3, #0]
 8005fce:	6862      	ldr	r2, [r4, #4]
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	f7fa f914 	bl	8000200 <memchr>
 8005fd8:	b108      	cbz	r0, 8005fde <_printf_i+0x1f2>
 8005fda:	1b40      	subs	r0, r0, r5
 8005fdc:	6060      	str	r0, [r4, #4]
 8005fde:	6863      	ldr	r3, [r4, #4]
 8005fe0:	6123      	str	r3, [r4, #16]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fe8:	e7a8      	b.n	8005f3c <_printf_i+0x150>
 8005fea:	6923      	ldr	r3, [r4, #16]
 8005fec:	462a      	mov	r2, r5
 8005fee:	4649      	mov	r1, r9
 8005ff0:	4640      	mov	r0, r8
 8005ff2:	47d0      	blx	sl
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	d0ab      	beq.n	8005f50 <_printf_i+0x164>
 8005ff8:	6823      	ldr	r3, [r4, #0]
 8005ffa:	079b      	lsls	r3, r3, #30
 8005ffc:	d413      	bmi.n	8006026 <_printf_i+0x23a>
 8005ffe:	68e0      	ldr	r0, [r4, #12]
 8006000:	9b03      	ldr	r3, [sp, #12]
 8006002:	4298      	cmp	r0, r3
 8006004:	bfb8      	it	lt
 8006006:	4618      	movlt	r0, r3
 8006008:	e7a4      	b.n	8005f54 <_printf_i+0x168>
 800600a:	2301      	movs	r3, #1
 800600c:	4632      	mov	r2, r6
 800600e:	4649      	mov	r1, r9
 8006010:	4640      	mov	r0, r8
 8006012:	47d0      	blx	sl
 8006014:	3001      	adds	r0, #1
 8006016:	d09b      	beq.n	8005f50 <_printf_i+0x164>
 8006018:	3501      	adds	r5, #1
 800601a:	68e3      	ldr	r3, [r4, #12]
 800601c:	9903      	ldr	r1, [sp, #12]
 800601e:	1a5b      	subs	r3, r3, r1
 8006020:	42ab      	cmp	r3, r5
 8006022:	dcf2      	bgt.n	800600a <_printf_i+0x21e>
 8006024:	e7eb      	b.n	8005ffe <_printf_i+0x212>
 8006026:	2500      	movs	r5, #0
 8006028:	f104 0619 	add.w	r6, r4, #25
 800602c:	e7f5      	b.n	800601a <_printf_i+0x22e>
 800602e:	bf00      	nop
 8006030:	08006271 	.word	0x08006271
 8006034:	08006282 	.word	0x08006282

08006038 <_read_r>:
 8006038:	b538      	push	{r3, r4, r5, lr}
 800603a:	4d07      	ldr	r5, [pc, #28]	; (8006058 <_read_r+0x20>)
 800603c:	4604      	mov	r4, r0
 800603e:	4608      	mov	r0, r1
 8006040:	4611      	mov	r1, r2
 8006042:	2200      	movs	r2, #0
 8006044:	602a      	str	r2, [r5, #0]
 8006046:	461a      	mov	r2, r3
 8006048:	f7fe ff49 	bl	8004ede <_read>
 800604c:	1c43      	adds	r3, r0, #1
 800604e:	d102      	bne.n	8006056 <_read_r+0x1e>
 8006050:	682b      	ldr	r3, [r5, #0]
 8006052:	b103      	cbz	r3, 8006056 <_read_r+0x1e>
 8006054:	6023      	str	r3, [r4, #0]
 8006056:	bd38      	pop	{r3, r4, r5, pc}
 8006058:	200004e4 	.word	0x200004e4

0800605c <memcpy>:
 800605c:	440a      	add	r2, r1
 800605e:	4291      	cmp	r1, r2
 8006060:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006064:	d100      	bne.n	8006068 <memcpy+0xc>
 8006066:	4770      	bx	lr
 8006068:	b510      	push	{r4, lr}
 800606a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800606e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006072:	4291      	cmp	r1, r2
 8006074:	d1f9      	bne.n	800606a <memcpy+0xe>
 8006076:	bd10      	pop	{r4, pc}

08006078 <memmove>:
 8006078:	4288      	cmp	r0, r1
 800607a:	b510      	push	{r4, lr}
 800607c:	eb01 0402 	add.w	r4, r1, r2
 8006080:	d902      	bls.n	8006088 <memmove+0x10>
 8006082:	4284      	cmp	r4, r0
 8006084:	4623      	mov	r3, r4
 8006086:	d807      	bhi.n	8006098 <memmove+0x20>
 8006088:	1e43      	subs	r3, r0, #1
 800608a:	42a1      	cmp	r1, r4
 800608c:	d008      	beq.n	80060a0 <memmove+0x28>
 800608e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006092:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006096:	e7f8      	b.n	800608a <memmove+0x12>
 8006098:	4402      	add	r2, r0
 800609a:	4601      	mov	r1, r0
 800609c:	428a      	cmp	r2, r1
 800609e:	d100      	bne.n	80060a2 <memmove+0x2a>
 80060a0:	bd10      	pop	{r4, pc}
 80060a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060aa:	e7f7      	b.n	800609c <memmove+0x24>

080060ac <_realloc_r>:
 80060ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060b0:	4680      	mov	r8, r0
 80060b2:	4614      	mov	r4, r2
 80060b4:	460e      	mov	r6, r1
 80060b6:	b921      	cbnz	r1, 80060c2 <_realloc_r+0x16>
 80060b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060bc:	4611      	mov	r1, r2
 80060be:	f7ff ba95 	b.w	80055ec <_malloc_r>
 80060c2:	b92a      	cbnz	r2, 80060d0 <_realloc_r+0x24>
 80060c4:	f7ff fc7c 	bl	80059c0 <_free_r>
 80060c8:	4625      	mov	r5, r4
 80060ca:	4628      	mov	r0, r5
 80060cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060d0:	f000 f81b 	bl	800610a <_malloc_usable_size_r>
 80060d4:	4284      	cmp	r4, r0
 80060d6:	4607      	mov	r7, r0
 80060d8:	d802      	bhi.n	80060e0 <_realloc_r+0x34>
 80060da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80060de:	d812      	bhi.n	8006106 <_realloc_r+0x5a>
 80060e0:	4621      	mov	r1, r4
 80060e2:	4640      	mov	r0, r8
 80060e4:	f7ff fa82 	bl	80055ec <_malloc_r>
 80060e8:	4605      	mov	r5, r0
 80060ea:	2800      	cmp	r0, #0
 80060ec:	d0ed      	beq.n	80060ca <_realloc_r+0x1e>
 80060ee:	42bc      	cmp	r4, r7
 80060f0:	4622      	mov	r2, r4
 80060f2:	4631      	mov	r1, r6
 80060f4:	bf28      	it	cs
 80060f6:	463a      	movcs	r2, r7
 80060f8:	f7ff ffb0 	bl	800605c <memcpy>
 80060fc:	4631      	mov	r1, r6
 80060fe:	4640      	mov	r0, r8
 8006100:	f7ff fc5e 	bl	80059c0 <_free_r>
 8006104:	e7e1      	b.n	80060ca <_realloc_r+0x1e>
 8006106:	4635      	mov	r5, r6
 8006108:	e7df      	b.n	80060ca <_realloc_r+0x1e>

0800610a <_malloc_usable_size_r>:
 800610a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800610e:	1f18      	subs	r0, r3, #4
 8006110:	2b00      	cmp	r3, #0
 8006112:	bfbc      	itt	lt
 8006114:	580b      	ldrlt	r3, [r1, r0]
 8006116:	18c0      	addlt	r0, r0, r3
 8006118:	4770      	bx	lr
	...

0800611c <_init>:
 800611c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800611e:	bf00      	nop
 8006120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006122:	bc08      	pop	{r3}
 8006124:	469e      	mov	lr, r3
 8006126:	4770      	bx	lr

08006128 <_fini>:
 8006128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612a:	bf00      	nop
 800612c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800612e:	bc08      	pop	{r3}
 8006130:	469e      	mov	lr, r3
 8006132:	4770      	bx	lr
