
lab-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ce8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08004e98  08004e98  00014e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ff0  08004ff0  00020234  2**0
                  CONTENTS
  4 .ARM          00000008  08004ff0  08004ff0  00014ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ff8  08004ff8  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ff8  08004ff8  00014ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ffc  08004ffc  00014ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  08005000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020234  2**0
                  CONTENTS
 10 .bss          00000170  20000234  20000234  00020234  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003a4  200003a4  00020234  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e753  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002017  00000000  00000000  0002e9b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d50  00000000  00000000  000309d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c78  00000000  00000000  00031720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023fad  00000000  00000000  00032398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ee7f  00000000  00000000  00056345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9005  00000000  00000000  000651c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013e1c9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003fa0  00000000  00000000  0013e21c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000234 	.word	0x20000234
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004e80 	.word	0x08004e80

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000238 	.word	0x20000238
 80001ec:	08004e80 	.word	0x08004e80

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b087      	sub	sp, #28
 80005a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
 80005ae:	4b2c      	ldr	r3, [pc, #176]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a2b      	ldr	r2, [pc, #172]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b29      	ldr	r3, [pc, #164]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c2:	617b      	str	r3, [r7, #20]
 80005c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	4b25      	ldr	r3, [pc, #148]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a24      	ldr	r2, [pc, #144]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005d0:	f043 0310 	orr.w	r3, r3, #16
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b22      	ldr	r3, [pc, #136]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0310 	and.w	r3, r3, #16
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a1d      	ldr	r2, [pc, #116]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0308 	and.w	r3, r3, #8
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b17      	ldr	r3, [pc, #92]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a16      	ldr	r2, [pc, #88]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a0f      	ldr	r2, [pc, #60]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <MX_GPIO_Init+0xbc>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_GPIO_Init+0xbc>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a08      	ldr	r2, [pc, #32]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]

}
 8000652:	bf00      	nop
 8000654:	371c      	adds	r7, #28
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800

08000664 <init_led_pwm>:
bool guess_status[] = {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false};
uint8_t cur_note_ptr = 0;
uint8_t cur_guess = 0;


void init_led_pwm(void) {
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
	htim4.Instance->ARR = led_arr_value;
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <init_led_pwm+0x18>)
 800066a:	881a      	ldrh	r2, [r3, #0]
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <init_led_pwm+0x1c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	20000000 	.word	0x20000000
 8000680:	200002bc 	.word	0x200002bc

08000684 <is_digit>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern void initialise_monitor_handles(void);

bool is_digit(char *c) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	return '1' <= *c && *c <= '9';
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b30      	cmp	r3, #48	; 0x30
 8000692:	d905      	bls.n	80006a0 <is_digit+0x1c>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b39      	cmp	r3, #57	; 0x39
 800069a:	d801      	bhi.n	80006a0 <is_digit+0x1c>
 800069c:	2301      	movs	r3, #1
 800069e:	e000      	b.n	80006a2 <is_digit+0x1e>
 80006a0:	2300      	movs	r3, #0
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <uart_write>:

void uart_write(char *data) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	uint16_t size = strlen(data);
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff fd97 	bl	80001f0 <strlen>
 80006c2:	4603      	mov	r3, r0
 80006c4:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart6, (uint8_t *) data, size, 100);
 80006c6:	89fa      	ldrh	r2, [r7, #14]
 80006c8:	2364      	movs	r3, #100	; 0x64
 80006ca:	6879      	ldr	r1, [r7, #4]
 80006cc:	4803      	ldr	r0, [pc, #12]	; (80006dc <uart_write+0x28>)
 80006ce:	f002 ff20 	bl	8003512 <HAL_UART_Transmit>
}
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	2000034c 	.word	0x2000034c

080006e0 <uart_write_newline>:

void uart_write_newline(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	uart_write(newline);
 80006e4:	4802      	ldr	r0, [pc, #8]	; (80006f0 <uart_write_newline+0x10>)
 80006e6:	f7ff ffe5 	bl	80006b4 <uart_write>
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000004 	.word	0x20000004

080006f4 <process_char>:

bool process_char(char *c) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	if (is_digit(&c[0]) || ENTER_ASCII == c[0])
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f7ff ffc1 	bl	8000684 <is_digit>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d103      	bne.n	8000710 <process_char+0x1c>
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b0d      	cmp	r3, #13
 800070e:	d101      	bne.n	8000714 <process_char+0x20>
		return true;
 8000710:	2301      	movs	r3, #1
 8000712:	e011      	b.n	8000738 <process_char+0x44>
	if (('a' == c[0] || '+' == c[0]) && game_mode == INFO)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b61      	cmp	r3, #97	; 0x61
 800071a:	d003      	beq.n	8000724 <process_char+0x30>
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b2b      	cmp	r3, #43	; 0x2b
 8000722:	d105      	bne.n	8000730 <process_char+0x3c>
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <process_char+0x4c>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d101      	bne.n	8000730 <process_char+0x3c>
		return true;
 800072c:	2301      	movs	r3, #1
 800072e:	e003      	b.n	8000738 <process_char+0x44>
	c[0] = '\0';
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
	return false;
 8000736:	2300      	movs	r3, #0
}
 8000738:	4618      	mov	r0, r3
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000256 	.word	0x20000256

08000744 <uart_read_char>:

void uart_read_char(void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_UART_Receive(&huart6, (uint8_t *) buf_char, sizeof(char), 100);
 800074a:	2364      	movs	r3, #100	; 0x64
 800074c:	2201      	movs	r2, #1
 800074e:	490b      	ldr	r1, [pc, #44]	; (800077c <uart_read_char+0x38>)
 8000750:	480b      	ldr	r0, [pc, #44]	; (8000780 <uart_read_char+0x3c>)
 8000752:	f002 ff70 	bl	8003636 <HAL_UART_Receive>
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
	if (HAL_OK == status && process_char(buf_char))
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d108      	bne.n	8000772 <uart_read_char+0x2e>
 8000760:	4806      	ldr	r0, [pc, #24]	; (800077c <uart_read_char+0x38>)
 8000762:	f7ff ffc7 	bl	80006f4 <process_char>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d002      	beq.n	8000772 <uart_read_char+0x2e>
		uart_write(buf_char);
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <uart_read_char+0x38>)
 800076e:	f7ff ffa1 	bl	80006b4 <uart_write>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000254 	.word	0x20000254
 8000780:	2000034c 	.word	0x2000034c

08000784 <play_sound>:

void play_sound(uint32_t *frequency) {
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	htim1.Instance->ARR = (1000000 / (*frequency)) - 1; // Set The PWM Frequency
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a09      	ldr	r2, [pc, #36]	; (80007b8 <play_sound+0x34>)
 8000792:	fbb2 f2f3 	udiv	r2, r2, r3
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <play_sound+0x38>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	3a01      	subs	r2, #1
 800079c:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1.Instance->CCR1 = (htim1.Instance->ARR >> 1); // Set Duty Cycle 50%
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <play_sound+0x38>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <play_sound+0x38>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	0852      	lsrs	r2, r2, #1
 80007aa:	635a      	str	r2, [r3, #52]	; 0x34
//	printf("ARR = %lu | F = %lu\n", htim1.Instance->ARR, 60000000 / (htim1.Instance->PSC + 1) / (htim1.Instance->ARR + 1));
}
 80007ac:	bf00      	nop
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	000f4240 	.word	0x000f4240
 80007bc:	20000274 	.word	0x20000274

080007c0 <mute>:

void mute(void) {
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
	htim1.Instance->CCR1 = 0;
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <mute+0x18>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2200      	movs	r2, #0
 80007ca:	635a      	str	r2, [r3, #52]	; 0x34
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	20000274 	.word	0x20000274

080007dc <disable_all_leds>:

void disable_all_leds(void) {
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
	htim4.Instance->CCR2 = 0;
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <disable_all_leds+0x28>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2200      	movs	r2, #0
 80007e6:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance->CCR3 = 0;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <disable_all_leds+0x28>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2200      	movs	r2, #0
 80007ee:	63da      	str	r2, [r3, #60]	; 0x3c
	htim4.Instance->CCR4 = 0;
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <disable_all_leds+0x28>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2200      	movs	r2, #0
 80007f6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	200002bc 	.word	0x200002bc

08000808 <light_led>:

void light_led(LED *led, LEDBrightness *brightness) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
	disable_all_leds();
 8000812:	f7ff ffe3 	bl	80007dc <disable_all_leds>
	uint16_t ccr_value = CLOCK_SCALED_FREQUENCY / LED_PWM_FREQUENCY * (*brightness) / 100;
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	b29b      	uxth	r3, r3
 800081c:	461a      	mov	r2, r3
 800081e:	0092      	lsls	r2, r2, #2
 8000820:	4413      	add	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	81fb      	strh	r3, [r7, #14]
	switch (*led) {
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b02      	cmp	r3, #2
 800082c:	d010      	beq.n	8000850 <light_led+0x48>
 800082e:	2b02      	cmp	r3, #2
 8000830:	dc13      	bgt.n	800085a <light_led+0x52>
 8000832:	2b00      	cmp	r3, #0
 8000834:	d002      	beq.n	800083c <light_led+0x34>
 8000836:	2b01      	cmp	r3, #1
 8000838:	d005      	beq.n	8000846 <light_led+0x3e>
			break;
		case RED:
			htim4.Instance->CCR4 = ccr_value;
			break;
	}
}
 800083a:	e00e      	b.n	800085a <light_led+0x52>
			htim4.Instance->CCR2 = ccr_value;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <light_led+0x5c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	89fa      	ldrh	r2, [r7, #14]
 8000842:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8000844:	e009      	b.n	800085a <light_led+0x52>
			htim4.Instance->CCR3 = ccr_value;
 8000846:	4b07      	ldr	r3, [pc, #28]	; (8000864 <light_led+0x5c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	89fa      	ldrh	r2, [r7, #14]
 800084c:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800084e:	e004      	b.n	800085a <light_led+0x52>
			htim4.Instance->CCR4 = ccr_value;
 8000850:	4b04      	ldr	r3, [pc, #16]	; (8000864 <light_led+0x5c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	89fa      	ldrh	r2, [r7, #14]
 8000856:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000858:	bf00      	nop
}
 800085a:	bf00      	nop
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200002bc 	.word	0x200002bc

08000868 <play_note>:

void play_note(Note *note) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	switch (note_mode) {
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <play_note+0x5c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d01b      	beq.n	80008b0 <play_note+0x48>
 8000878:	2b02      	cmp	r3, #2
 800087a:	dc1f      	bgt.n	80008bc <play_note+0x54>
 800087c:	2b00      	cmp	r3, #0
 800087e:	d002      	beq.n	8000886 <play_note+0x1e>
 8000880:	2b01      	cmp	r3, #1
 8000882:	d00d      	beq.n	80008a0 <play_note+0x38>
			break;
		case SOUND_ONLY:
			play_sound(&note->frequency);
			break;
	}
}
 8000884:	e01a      	b.n	80008bc <play_note+0x54>
			play_sound(&note->frequency);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3304      	adds	r3, #4
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ff7a 	bl	8000784 <play_sound>
			light_led(&note->led, &note->brightness);
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	3301      	adds	r3, #1
 8000896:	4619      	mov	r1, r3
 8000898:	4610      	mov	r0, r2
 800089a:	f7ff ffb5 	bl	8000808 <light_led>
			break;
 800089e:	e00d      	b.n	80008bc <play_note+0x54>
			light_led(&note->led, &note->brightness);
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3301      	adds	r3, #1
 80008a6:	4619      	mov	r1, r3
 80008a8:	4610      	mov	r0, r2
 80008aa:	f7ff ffad 	bl	8000808 <light_led>
			break;
 80008ae:	e005      	b.n	80008bc <play_note+0x54>
			play_sound(&note->frequency);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3304      	adds	r3, #4
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff65 	bl	8000784 <play_sound>
			break;
 80008ba:	bf00      	nop
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000257 	.word	0x20000257

080008c8 <stop_note>:

void stop_note(void) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	mute();
 80008cc:	f7ff ff78 	bl	80007c0 <mute>
	disable_all_leds();
 80008d0:	f7ff ff84 	bl	80007dc <disable_all_leds>
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <uart_write_note_info>:

void uart_write_note_info(Note *note) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b0c6      	sub	sp, #280	; 0x118
 80008dc:	af02      	add	r7, sp, #8
 80008de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80008e6:	6018      	str	r0, [r3, #0]
	char buf[256];
	char *colour = note->led == GREEN ? "green" : (note->led == YELLOW ? "yellow" : "red");
 80008e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d00b      	beq.n	8000910 <uart_write_note_info+0x38>
 80008f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d101      	bne.n	800090c <uart_write_note_info+0x34>
 8000908:	4b1c      	ldr	r3, [pc, #112]	; (800097c <uart_write_note_info+0xa4>)
 800090a:	e002      	b.n	8000912 <uart_write_note_info+0x3a>
 800090c:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <uart_write_note_info+0xa8>)
 800090e:	e000      	b.n	8000912 <uart_write_note_info+0x3a>
 8000910:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <uart_write_note_info+0xac>)
 8000912:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t brightness = note->brightness == LOW ? 20 : (note->brightness == MEDIUM ? 50 : 100);
 8000916:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800091a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	785b      	ldrb	r3, [r3, #1]
 8000922:	2b14      	cmp	r3, #20
 8000924:	d00b      	beq.n	800093e <uart_write_note_info+0x66>
 8000926:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800092a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	785b      	ldrb	r3, [r3, #1]
 8000932:	2b32      	cmp	r3, #50	; 0x32
 8000934:	d101      	bne.n	800093a <uart_write_note_info+0x62>
 8000936:	2332      	movs	r3, #50	; 0x32
 8000938:	e002      	b.n	8000940 <uart_write_note_info+0x68>
 800093a:	2364      	movs	r3, #100	; 0x64
 800093c:	e000      	b.n	8000940 <uart_write_note_info+0x68>
 800093e:	2314      	movs	r3, #20
 8000940:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b

	sprintf(buf, "\n\rNote colour: %s\n\rNote brightness: %d\n\rNote frequency: %lu\n\r", colour, brightness, note->frequency);
 8000944:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 8000948:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800094c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	f107 0008 	add.w	r0, r7, #8
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	4613      	mov	r3, r2
 800095c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000960:	4909      	ldr	r1, [pc, #36]	; (8000988 <uart_write_note_info+0xb0>)
 8000962:	f003 fa95 	bl	8003e90 <siprintf>

	uart_write(buf);
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fea2 	bl	80006b4 <uart_write>
}
 8000970:	bf00      	nop
 8000972:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	08004e98 	.word	0x08004e98
 8000980:	08004ea0 	.word	0x08004ea0
 8000984:	08004ea4 	.word	0x08004ea4
 8000988:	08004eac 	.word	0x08004eac

0800098c <countdown_start_game>:

void countdown_start_game(void) {
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	uart_write(countdown_prepare_msg);
 8000990:	480c      	ldr	r0, [pc, #48]	; (80009c4 <countdown_start_game+0x38>)
 8000992:	f7ff fe8f 	bl	80006b4 <uart_write>
	uart_write(countdown_3_msg);
 8000996:	480c      	ldr	r0, [pc, #48]	; (80009c8 <countdown_start_game+0x3c>)
 8000998:	f7ff fe8c 	bl	80006b4 <uart_write>
	HAL_Delay(1000);
 800099c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009a0:	f000 fee0 	bl	8001764 <HAL_Delay>
	uart_write(countdown_2_msg);
 80009a4:	4809      	ldr	r0, [pc, #36]	; (80009cc <countdown_start_game+0x40>)
 80009a6:	f7ff fe85 	bl	80006b4 <uart_write>
	HAL_Delay(1000);
 80009aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ae:	f000 fed9 	bl	8001764 <HAL_Delay>
	uart_write(countdown_1_msg);
 80009b2:	4807      	ldr	r0, [pc, #28]	; (80009d0 <countdown_start_game+0x44>)
 80009b4:	f7ff fe7e 	bl	80006b4 <uart_write>
	HAL_Delay(1000);
 80009b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009bc:	f000 fed2 	bl	8001764 <HAL_Delay>
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200000f0 	.word	0x200000f0
 80009c8:	20000108 	.word	0x20000108
 80009cc:	20000120 	.word	0x20000120
 80009d0:	20000138 	.word	0x20000138

080009d4 <stop_timer>:

void stop_timer(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim6);
 80009d8:	4804      	ldr	r0, [pc, #16]	; (80009ec <stop_timer+0x18>)
 80009da:	f001 febd 	bl	8002758 <HAL_TIM_Base_Stop_IT>
	htim6.Instance->ARR = 0;
 80009de:	4b03      	ldr	r3, [pc, #12]	; (80009ec <stop_timer+0x18>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2200      	movs	r2, #0
 80009e4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000304 	.word	0x20000304

080009f0 <set_timer_ms>:

void set_timer_ms(uint32_t ms) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	htim6.Instance->ARR = ms - 1;
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <set_timer_ms+0x20>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	3a01      	subs	r2, #1
 8000a00:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_Base_Start_IT(&htim6);
 8000a02:	4803      	ldr	r0, [pc, #12]	; (8000a10 <set_timer_ms+0x20>)
 8000a04:	f001 fe38 	bl	8002678 <HAL_TIM_Base_Start_IT>
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000304 	.word	0x20000304

08000a14 <finish_game>:

void finish_game(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b0c2      	sub	sp, #264	; 0x108
 8000a18:	af00      	add	r7, sp, #0
	stop_timer();
 8000a1a:	f7ff ffdb 	bl	80009d4 <stop_timer>
	stop_note();
 8000a1e:	f7ff ff53 	bl	80008c8 <stop_note>

	uart_write_newline();
 8000a22:	f7ff fe5d 	bl	80006e0 <uart_write_newline>
	uart_write(game_finished_msg);
 8000a26:	482c      	ldr	r0, [pc, #176]	; (8000ad8 <finish_game+0xc4>)
 8000a28:	f7ff fe44 	bl	80006b4 <uart_write>

	char buf[256];
	uint8_t points = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	for (uint8_t i = 0; i < note_sequence_length; i++) {
 8000a32:	2300      	movs	r3, #0
 8000a34:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8000a38:	e02f      	b.n	8000a9a <finish_game+0x86>
		sprintf(buf, "Note %d: %s\n\r", i + 1, guess_status[i] ? "correct" : "wrong");
 8000a3a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000a3e:	1c5a      	adds	r2, r3, #1
 8000a40:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000a44:	4925      	ldr	r1, [pc, #148]	; (8000adc <finish_game+0xc8>)
 8000a46:	5ccb      	ldrb	r3, [r1, r3]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <finish_game+0x3c>
 8000a4c:	4b24      	ldr	r3, [pc, #144]	; (8000ae0 <finish_game+0xcc>)
 8000a4e:	e000      	b.n	8000a52 <finish_game+0x3e>
 8000a50:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <finish_game+0xd0>)
 8000a52:	1d38      	adds	r0, r7, #4
 8000a54:	4924      	ldr	r1, [pc, #144]	; (8000ae8 <finish_game+0xd4>)
 8000a56:	f003 fa1b 	bl	8003e90 <siprintf>
		uart_write(buf);
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fe29 	bl	80006b4 <uart_write>
		points += (guess_status[i] * (4 - difficulty));
 8000a62:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000a66:	4a1d      	ldr	r2, [pc, #116]	; (8000adc <finish_game+0xc8>)
 8000a68:	5cd3      	ldrb	r3, [r2, r3]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <finish_game+0xd8>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	f1c3 0304 	rsb	r3, r3, #4
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	fb12 f303 	smulbb	r3, r2, r3
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8000a80:	4413      	add	r3, r2
 8000a82:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

		guess_status[i] = false;
 8000a86:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000a8a:	4a14      	ldr	r2, [pc, #80]	; (8000adc <finish_game+0xc8>)
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < note_sequence_length; i++) {
 8000a90:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000a94:	3301      	adds	r3, #1
 8000a96:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <finish_game+0xdc>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d3c9      	bcc.n	8000a3a <finish_game+0x26>
	}

	sprintf(buf, "Your score: %d\n\r", points);
 8000aa6:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	4911      	ldr	r1, [pc, #68]	; (8000af4 <finish_game+0xe0>)
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f003 f9ee 	bl	8003e90 <siprintf>
	uart_write(buf);
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fdfc 	bl	80006b4 <uart_write>

	cur_note_ptr = 0;
 8000abc:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <finish_game+0xe4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
	cur_guess = 0;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <finish_game+0xe8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
	game_started = false;
 8000ac8:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <finish_game+0xec>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	2000001c 	.word	0x2000001c
 8000adc:	20000258 	.word	0x20000258
 8000ae0:	08004eec 	.word	0x08004eec
 8000ae4:	08004ef4 	.word	0x08004ef4
 8000ae8:	08004efc 	.word	0x08004efc
 8000aec:	20000161 	.word	0x20000161
 8000af0:	200001ac 	.word	0x200001ac
 8000af4:	08004f0c 	.word	0x08004f0c
 8000af8:	2000026c 	.word	0x2000026c
 8000afc:	2000026d 	.word	0x2000026d
 8000b00:	20000250 	.word	0x20000250

08000b04 <switch_game_mode>:

void switch_game_mode(void) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	switch (game_mode) {
 8000b08:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <switch_game_mode+0x90>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d002      	beq.n	8000b16 <switch_game_mode+0x12>
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d022      	beq.n	8000b5a <switch_game_mode+0x56>
			if (cur_note_ptr < note_sequence_length && cur_guess == note_sequence[cur_note_ptr])
				guess_status[cur_note_ptr] = true;
			finish_game();
			break;
	}
}
 8000b14:	e03c      	b.n	8000b90 <switch_game_mode+0x8c>
			game_mode = PLAY;
 8000b16:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <switch_game_mode+0x90>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	701a      	strb	r2, [r3, #0]
			countdown_start_game();
 8000b1c:	f7ff ff36 	bl	800098c <countdown_start_game>
			uart_write(game_started_msg);
 8000b20:	481d      	ldr	r0, [pc, #116]	; (8000b98 <switch_game_mode+0x94>)
 8000b22:	f7ff fdc7 	bl	80006b4 <uart_write>
			uart_write(guess_note_msg);
 8000b26:	481d      	ldr	r0, [pc, #116]	; (8000b9c <switch_game_mode+0x98>)
 8000b28:	f7ff fdc4 	bl	80006b4 <uart_write>
			play_note(&notes[note_sequence[cur_note_ptr] - 1]);
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <switch_game_mode+0x9c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <switch_game_mode+0xa0>)
 8000b34:	5c9b      	ldrb	r3, [r3, r2]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	4a1b      	ldr	r2, [pc, #108]	; (8000ba8 <switch_game_mode+0xa4>)
 8000b3c:	4413      	add	r3, r2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fe92 	bl	8000868 <play_note>
			set_timer_ms(difficulty * 1000);
 8000b44:	4b19      	ldr	r3, [pc, #100]	; (8000bac <switch_game_mode+0xa8>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4e:	fb02 f303 	mul.w	r3, r2, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff ff4c 	bl	80009f0 <set_timer_ms>
			break;
 8000b58:	e01a      	b.n	8000b90 <switch_game_mode+0x8c>
			game_mode = INFO;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <switch_game_mode+0x90>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
			if (cur_note_ptr < note_sequence_length && cur_guess == note_sequence[cur_note_ptr])
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <switch_game_mode+0x9c>)
 8000b62:	781a      	ldrb	r2, [r3, #0]
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <switch_game_mode+0xac>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d20e      	bcs.n	8000b8a <switch_game_mode+0x86>
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <switch_game_mode+0x9c>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <switch_game_mode+0xa0>)
 8000b74:	5c9a      	ldrb	r2, [r3, r2]
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <switch_game_mode+0xb0>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d105      	bne.n	8000b8a <switch_game_mode+0x86>
				guess_status[cur_note_ptr] = true;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <switch_game_mode+0x9c>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <switch_game_mode+0xb4>)
 8000b86:	2101      	movs	r1, #1
 8000b88:	5499      	strb	r1, [r3, r2]
			finish_game();
 8000b8a:	f7ff ff43 	bl	8000a14 <finish_game>
			break;
 8000b8e:	bf00      	nop
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000256 	.word	0x20000256
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	20000150 	.word	0x20000150
 8000ba0:	2000026c 	.word	0x2000026c
 8000ba4:	200001b0 	.word	0x200001b0
 8000ba8:	20000164 	.word	0x20000164
 8000bac:	20000161 	.word	0x20000161
 8000bb0:	200001ac 	.word	0x200001ac
 8000bb4:	2000026d 	.word	0x2000026d
 8000bb8:	20000258 	.word	0x20000258

08000bbc <switch_note_mode>:

void switch_note_mode(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	stop_note();
 8000bc0:	f7ff fe82 	bl	80008c8 <stop_note>
	switch (note_mode) {
 8000bc4:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <switch_note_mode+0x4c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d014      	beq.n	8000bf6 <switch_note_mode+0x3a>
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	dc19      	bgt.n	8000c04 <switch_note_mode+0x48>
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d002      	beq.n	8000bda <switch_note_mode+0x1e>
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d007      	beq.n	8000be8 <switch_note_mode+0x2c>
		case SOUND_ONLY:
			note_mode = ALL;
			uart_write(note_mode_all_msg);
			break;
	}
}
 8000bd8:	e014      	b.n	8000c04 <switch_note_mode+0x48>
			note_mode = LED_ONLY;
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <switch_note_mode+0x4c>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	701a      	strb	r2, [r3, #0]
			uart_write(note_mode_led_msg);
 8000be0:	480a      	ldr	r0, [pc, #40]	; (8000c0c <switch_note_mode+0x50>)
 8000be2:	f7ff fd67 	bl	80006b4 <uart_write>
			break;
 8000be6:	e00d      	b.n	8000c04 <switch_note_mode+0x48>
			note_mode = SOUND_ONLY;
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <switch_note_mode+0x4c>)
 8000bea:	2202      	movs	r2, #2
 8000bec:	701a      	strb	r2, [r3, #0]
			uart_write(note_mode_sound_msg);
 8000bee:	4808      	ldr	r0, [pc, #32]	; (8000c10 <switch_note_mode+0x54>)
 8000bf0:	f7ff fd60 	bl	80006b4 <uart_write>
			break;
 8000bf4:	e006      	b.n	8000c04 <switch_note_mode+0x48>
			note_mode = ALL;
 8000bf6:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <switch_note_mode+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
			uart_write(note_mode_all_msg);
 8000bfc:	4805      	ldr	r0, [pc, #20]	; (8000c14 <switch_note_mode+0x58>)
 8000bfe:	f7ff fd59 	bl	80006b4 <uart_write>
			break;
 8000c02:	bf00      	nop
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000257 	.word	0x20000257
 8000c0c:	2000004c 	.word	0x2000004c
 8000c10:	2000006c 	.word	0x2000006c
 8000c14:	20000030 	.word	0x20000030

08000c18 <switch_difficulty>:

void switch_difficulty(void) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	switch (difficulty) {
 8000c1c:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <switch_difficulty+0x48>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b03      	cmp	r3, #3
 8000c22:	d006      	beq.n	8000c32 <switch_difficulty+0x1a>
 8000c24:	2b03      	cmp	r3, #3
 8000c26:	dc19      	bgt.n	8000c5c <switch_difficulty+0x44>
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d010      	beq.n	8000c4e <switch_difficulty+0x36>
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d007      	beq.n	8000c40 <switch_difficulty+0x28>
		case HARD:
			difficulty= EASY;
			uart_write(difficulty_easy_msg);
			break;
	}
}
 8000c30:	e014      	b.n	8000c5c <switch_difficulty+0x44>
			difficulty= NORMAL;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <switch_difficulty+0x48>)
 8000c34:	2202      	movs	r2, #2
 8000c36:	701a      	strb	r2, [r3, #0]
			uart_write(difficulty_normal_msg);
 8000c38:	480a      	ldr	r0, [pc, #40]	; (8000c64 <switch_difficulty+0x4c>)
 8000c3a:	f7ff fd3b 	bl	80006b4 <uart_write>
			break;
 8000c3e:	e00d      	b.n	8000c5c <switch_difficulty+0x44>
			difficulty= HARD;
 8000c40:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <switch_difficulty+0x48>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	701a      	strb	r2, [r3, #0]
			uart_write(difficulty_hard_msg);
 8000c46:	4808      	ldr	r0, [pc, #32]	; (8000c68 <switch_difficulty+0x50>)
 8000c48:	f7ff fd34 	bl	80006b4 <uart_write>
			break;
 8000c4c:	e006      	b.n	8000c5c <switch_difficulty+0x44>
			difficulty= EASY;
 8000c4e:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <switch_difficulty+0x48>)
 8000c50:	2203      	movs	r2, #3
 8000c52:	701a      	strb	r2, [r3, #0]
			uart_write(difficulty_easy_msg);
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <switch_difficulty+0x54>)
 8000c56:	f7ff fd2d 	bl	80006b4 <uart_write>
			break;
 8000c5a:	bf00      	nop
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000161 	.word	0x20000161
 8000c64:	200000b0 	.word	0x200000b0
 8000c68:	200000d0 	.word	0x200000d0
 8000c6c:	20000090 	.word	0x20000090

08000c70 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a28      	ldr	r2, [pc, #160]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d14b      	bne.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0xaa>
		if (game_mode == INFO) {
 8000c82:	4b28      	ldr	r3, [pc, #160]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d107      	bne.n	8000c9a <HAL_TIM_PeriodElapsedCallback+0x2a>
			printf("INFO CALLBACK\n");
 8000c8a:	4827      	ldr	r0, [pc, #156]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000c8c:	f003 f8f8 	bl	8003e80 <puts>
			stop_note();
 8000c90:	f7ff fe1a 	bl	80008c8 <stop_note>
			stop_timer();
 8000c94:	f7ff fe9e 	bl	80009d4 <stop_timer>
			return;
 8000c98:	e03f      	b.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0xaa>
		}

		printf("GAME CALLBACK\n");
 8000c9a:	4824      	ldr	r0, [pc, #144]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000c9c:	f003 f8f0 	bl	8003e80 <puts>
		if (!game_started) {
 8000ca0:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	f083 0301 	eor.w	r3, r3, #1
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <HAL_TIM_PeriodElapsedCallback+0x46>
			game_started = true;
 8000cae:	4b20      	ldr	r3, [pc, #128]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
			return;
 8000cb4:	e031      	b.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0xaa>
		}

		if (cur_guess == note_sequence[cur_note_ptr])
 8000cb6:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000cbe:	5c9a      	ldrb	r2, [r3, r2]
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d105      	bne.n	8000cd4 <HAL_TIM_PeriodElapsedCallback+0x64>
			guess_status[cur_note_ptr] = true;
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	5499      	strb	r1, [r3, r2]

		cur_guess = 0;
 8000cd4:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
		cur_note_ptr++;
 8000cda:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000ce4:	701a      	strb	r2, [r3, #0]

		if (cur_note_ptr == note_sequence_length) {
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000ce8:	781a      	ldrb	r2, [r3, #0]
 8000cea:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d102      	bne.n	8000cf8 <HAL_TIM_PeriodElapsedCallback+0x88>
			switch_game_mode();
 8000cf2:	f7ff ff07 	bl	8000b04 <switch_game_mode>
 8000cf6:	e010      	b.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0xaa>
		} else {
			uart_write_newline();
 8000cf8:	f7ff fcf2 	bl	80006e0 <uart_write_newline>
			uart_write(guess_note_msg);
 8000cfc:	4812      	ldr	r0, [pc, #72]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000cfe:	f7ff fcd9 	bl	80006b4 <uart_write>
			play_note(&notes[note_sequence[cur_note_ptr] - 1]);
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	461a      	mov	r2, r3
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d0a:	5c9b      	ldrb	r3, [r3, r2]
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000d12:	4413      	add	r3, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fda7 	bl	8000868 <play_note>
		}
	}
}
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40001000 	.word	0x40001000
 8000d24:	20000256 	.word	0x20000256
 8000d28:	08004f20 	.word	0x08004f20
 8000d2c:	08004f30 	.word	0x08004f30
 8000d30:	20000250 	.word	0x20000250
 8000d34:	2000026c 	.word	0x2000026c
 8000d38:	200001b0 	.word	0x200001b0
 8000d3c:	2000026d 	.word	0x2000026d
 8000d40:	20000258 	.word	0x20000258
 8000d44:	200001ac 	.word	0x200001ac
 8000d48:	20000150 	.word	0x20000150
 8000d4c:	20000164 	.word	0x20000164

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000d56:	f000 f94f 	bl	8000ff8 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5a:	f000 fc91 	bl	8001680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5e:	f000 f87d 	bl	8000e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d62:	f7ff fc1f 	bl	80005a4 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000d66:	f000 fa87 	bl	8001278 <MX_TIM4_Init>
  MX_TIM6_Init();
 8000d6a:	f000 faf3 	bl	8001354 <MX_TIM6_Init>
  MX_USART6_UART_Init();
 8000d6e:	f000 fbeb 	bl	8001548 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8000d72:	f000 f9fd 	bl	8001170 <MX_TIM1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000d76:	2104      	movs	r1, #4
 8000d78:	4832      	ldr	r0, [pc, #200]	; (8000e44 <main+0xf4>)
 8000d7a:	f001 fd6b 	bl	8002854 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000d7e:	2108      	movs	r1, #8
 8000d80:	4830      	ldr	r0, [pc, #192]	; (8000e44 <main+0xf4>)
 8000d82:	f001 fd67 	bl	8002854 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000d86:	210c      	movs	r1, #12
 8000d88:	482e      	ldr	r0, [pc, #184]	; (8000e44 <main+0xf4>)
 8000d8a:	f001 fd63 	bl	8002854 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim1);
 8000d8e:	482e      	ldr	r0, [pc, #184]	; (8000e48 <main+0xf8>)
 8000d90:	f001 fc72 	bl	8002678 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d94:	2100      	movs	r1, #0
 8000d96:	482c      	ldr	r0, [pc, #176]	; (8000e48 <main+0xf8>)
 8000d98:	f001 fd5c 	bl	8002854 <HAL_TIM_PWM_Start>

  init_led_pwm();
 8000d9c:	f7ff fc62 	bl	8000664 <init_led_pwm>
  stop_timer();
 8000da0:	f7ff fe18 	bl	80009d4 <stop_timer>

  while (1)
  {
	  buf_char[0] = '\0';
 8000da4:	4b29      	ldr	r3, [pc, #164]	; (8000e4c <main+0xfc>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
	  uart_read_char();
 8000daa:	f7ff fccb 	bl	8000744 <uart_read_char>
	  if (buf_char[0] == '\0')
 8000dae:	4b27      	ldr	r3, [pc, #156]	; (8000e4c <main+0xfc>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d044      	beq.n	8000e40 <main+0xf0>
		  continue;

	  if (buf_char[0] == ENTER_ASCII) {
 8000db6:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <main+0xfc>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b0d      	cmp	r3, #13
 8000dbc:	d102      	bne.n	8000dc4 <main+0x74>
		  switch_game_mode();
 8000dbe:	f7ff fea1 	bl	8000b04 <switch_game_mode>
		  continue;
 8000dc2:	e03e      	b.n	8000e42 <main+0xf2>
	  }

	  if (is_digit(&buf_char[0])) {
 8000dc4:	4821      	ldr	r0, [pc, #132]	; (8000e4c <main+0xfc>)
 8000dc6:	f7ff fc5d 	bl	8000684 <is_digit>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d021      	beq.n	8000e14 <main+0xc4>
		  if (game_mode == INFO) {
 8000dd0:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <main+0x100>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d116      	bne.n	8000e06 <main+0xb6>
			  uint8_t id = buf_char[0] - '0' - 1;
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <main+0xfc>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	3b31      	subs	r3, #49	; 0x31
 8000dde:	71fb      	strb	r3, [r7, #7]
			  play_note(&notes[id]);
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	4a1b      	ldr	r2, [pc, #108]	; (8000e54 <main+0x104>)
 8000de6:	4413      	add	r3, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fd3d 	bl	8000868 <play_note>
			  uart_write_note_info(&notes[id]);
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	4a18      	ldr	r2, [pc, #96]	; (8000e54 <main+0x104>)
 8000df4:	4413      	add	r3, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fd6e 	bl	80008d8 <uart_write_note_info>

//			  stop_timer();
			  set_timer_ms(1000);
 8000dfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e00:	f7ff fdf6 	bl	80009f0 <set_timer_ms>
		  } else {
			  cur_guess = buf_char[0] - '0';
		  }
		  continue;
 8000e04:	e01d      	b.n	8000e42 <main+0xf2>
			  cur_guess = buf_char[0] - '0';
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <main+0xfc>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	3b30      	subs	r3, #48	; 0x30
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <main+0x108>)
 8000e10:	701a      	strb	r2, [r3, #0]
		  continue;
 8000e12:	e016      	b.n	8000e42 <main+0xf2>
	  }

	  if (buf_char[0] == 'a' && game_mode == INFO) {
 8000e14:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <main+0xfc>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b61      	cmp	r3, #97	; 0x61
 8000e1a:	d106      	bne.n	8000e2a <main+0xda>
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <main+0x100>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d102      	bne.n	8000e2a <main+0xda>
		  switch_note_mode();
 8000e24:	f7ff feca 	bl	8000bbc <switch_note_mode>
		  continue;
 8000e28:	e00b      	b.n	8000e42 <main+0xf2>
	  }

	  if (buf_char[0] == '+' && game_mode == INFO) {
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <main+0xfc>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b2b      	cmp	r3, #43	; 0x2b
 8000e30:	d1b8      	bne.n	8000da4 <main+0x54>
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <main+0x100>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1b4      	bne.n	8000da4 <main+0x54>
		  switch_difficulty();
 8000e3a:	f7ff feed 	bl	8000c18 <switch_difficulty>
		  continue;
 8000e3e:	e000      	b.n	8000e42 <main+0xf2>
		  continue;
 8000e40:	bf00      	nop
	  buf_char[0] = '\0';
 8000e42:	e7af      	b.n	8000da4 <main+0x54>
 8000e44:	200002bc 	.word	0x200002bc
 8000e48:	20000274 	.word	0x20000274
 8000e4c:	20000254 	.word	0x20000254
 8000e50:	20000256 	.word	0x20000256
 8000e54:	20000164 	.word	0x20000164
 8000e58:	2000026d 	.word	0x2000026d

08000e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b094      	sub	sp, #80	; 0x50
 8000e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e62:	f107 0320 	add.w	r3, r7, #32
 8000e66:	2230      	movs	r2, #48	; 0x30
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f002 ff92 	bl	8003d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	4b29      	ldr	r3, [pc, #164]	; (8000f2c <SystemClock_Config+0xd0>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	4a28      	ldr	r2, [pc, #160]	; (8000f2c <SystemClock_Config+0xd0>)
 8000e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e90:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <SystemClock_Config+0xd0>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <SystemClock_Config+0xd4>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ea8:	4a21      	ldr	r2, [pc, #132]	; (8000f30 <SystemClock_Config+0xd4>)
 8000eaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <SystemClock_Config+0xd4>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ec0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ece:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000ed0:	230f      	movs	r3, #15
 8000ed2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000ed4:	2348      	movs	r3, #72	; 0x48
 8000ed6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000edc:	2304      	movs	r3, #4
 8000ede:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee0:	f107 0320 	add.w	r3, r7, #32
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 ff1f 	bl	8001d28 <HAL_RCC_OscConfig>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ef0:	f000 f820 	bl	8000f34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef4:	230f      	movs	r3, #15
 8000ef6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	2101      	movs	r1, #1
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 f980 	bl	8002218 <HAL_RCC_ClockConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f1e:	f000 f809 	bl	8000f34 <Error_Handler>
  }
}
 8000f22:	bf00      	nop
 8000f24:	3750      	adds	r7, #80	; 0x50
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40007000 	.word	0x40007000

08000f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f38:	b672      	cpsid	i
}
 8000f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <Error_Handler+0x8>
	...

08000f40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <HAL_MspInit+0x4c>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	4a0f      	ldr	r2, [pc, #60]	; (8000f8c <HAL_MspInit+0x4c>)
 8000f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f54:	6453      	str	r3, [r2, #68]	; 0x44
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <HAL_MspInit+0x4c>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	603b      	str	r3, [r7, #0]
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <HAL_MspInit+0x4c>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <HAL_MspInit+0x4c>)
 8000f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f70:	6413      	str	r3, [r2, #64]	; 0x40
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_MspInit+0x4c>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40023800 	.word	0x40023800

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <NMI_Handler+0x4>

08000f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <HardFault_Handler+0x4>

08000f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <MemManage_Handler+0x4>

08000fa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <BusFault_Handler+0x4>

08000fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <UsageFault_Handler+0x4>

08000fae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fdc:	f000 fba2 	bl	8001724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <TIM6_DAC_IRQHandler+0x10>)
 8000fea:	f001 fcfb 	bl	80029e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000304 	.word	0x20000304

08000ff8 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
 800100c:	60f8      	str	r0, [r7, #12]
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	e00a      	b.n	800102e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001018:	f3af 8000 	nop.w
 800101c:	4601      	mov	r1, r0
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1c5a      	adds	r2, r3, #1
 8001022:	60ba      	str	r2, [r7, #8]
 8001024:	b2ca      	uxtb	r2, r1
 8001026:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	3301      	adds	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	429a      	cmp	r2, r3
 8001034:	dbf0      	blt.n	8001018 <_read+0x12>
	}

return len;
 8001036:	687b      	ldr	r3, [r7, #4]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	e009      	b.n	8001066 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	1c5a      	adds	r2, r3, #1
 8001056:	60ba      	str	r2, [r7, #8]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	3301      	adds	r3, #1
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	429a      	cmp	r2, r3
 800106c:	dbf1      	blt.n	8001052 <_write+0x12>
	}
	return len;
 800106e:	687b      	ldr	r3, [r7, #4]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <_close>:

int _close(int file)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	return -1;
 8001080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010a0:	605a      	str	r2, [r3, #4]
	return 0;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <_isatty>:

int _isatty(int file)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	return 1;
 80010b8:	2301      	movs	r3, #1
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b085      	sub	sp, #20
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	60f8      	str	r0, [r7, #12]
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
	return 0;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e8:	4a14      	ldr	r2, [pc, #80]	; (800113c <_sbrk+0x5c>)
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <_sbrk+0x60>)
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d102      	bne.n	8001102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <_sbrk+0x64>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	; (8001148 <_sbrk+0x68>)
 8001100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	429a      	cmp	r2, r3
 800110e:	d207      	bcs.n	8001120 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001110:	f002 fe16 	bl	8003d40 <__errno>
 8001114:	4603      	mov	r3, r0
 8001116:	220c      	movs	r2, #12
 8001118:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800111e:	e009      	b.n	8001134 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <_sbrk+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	4a05      	ldr	r2, [pc, #20]	; (8001144 <_sbrk+0x64>)
 8001130:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001132:	68fb      	ldr	r3, [r7, #12]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20030000 	.word	0x20030000
 8001140:	00000400 	.word	0x00000400
 8001144:	20000270 	.word	0x20000270
 8001148:	200003a8 	.word	0x200003a8

0800114c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <SystemInit+0x20>)
 8001152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001156:	4a05      	ldr	r2, [pc, #20]	; (800116c <SystemInit+0x20>)
 8001158:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800115c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b092      	sub	sp, #72	; 0x48
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001176:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
 8001190:	615a      	str	r2, [r3, #20]
 8001192:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	2220      	movs	r2, #32
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f002 fdfa 	bl	8003d94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011a0:	4b33      	ldr	r3, [pc, #204]	; (8001270 <MX_TIM1_Init+0x100>)
 80011a2:	4a34      	ldr	r2, [pc, #208]	; (8001274 <MX_TIM1_Init+0x104>)
 80011a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 59;
 80011a6:	4b32      	ldr	r3, [pc, #200]	; (8001270 <MX_TIM1_Init+0x100>)
 80011a8:	223b      	movs	r2, #59	; 0x3b
 80011aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ac:	4b30      	ldr	r3, [pc, #192]	; (8001270 <MX_TIM1_Init+0x100>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80011b2:	4b2f      	ldr	r3, [pc, #188]	; (8001270 <MX_TIM1_Init+0x100>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b8:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <MX_TIM1_Init+0x100>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011be:	4b2c      	ldr	r3, [pc, #176]	; (8001270 <MX_TIM1_Init+0x100>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c4:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <MX_TIM1_Init+0x100>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011ca:	4829      	ldr	r0, [pc, #164]	; (8001270 <MX_TIM1_Init+0x100>)
 80011cc:	f001 faf3 	bl	80027b6 <HAL_TIM_PWM_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80011d6:	f7ff fead 	bl	8000f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011da:	2300      	movs	r3, #0
 80011dc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011de:	2300      	movs	r3, #0
 80011e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011e6:	4619      	mov	r1, r3
 80011e8:	4821      	ldr	r0, [pc, #132]	; (8001270 <MX_TIM1_Init+0x100>)
 80011ea:	f002 f863 	bl	80032b4 <HAL_TIMEx_MasterConfigSynchronization>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80011f4:	f7ff fe9e 	bl	8000f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f8:	2360      	movs	r3, #96	; 0x60
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 32769;
 80011fc:	f248 0301 	movw	r3, #32769	; 0x8001
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001202:	2300      	movs	r3, #0
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001206:	2300      	movs	r3, #0
 8001208:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800120e:	2300      	movs	r3, #0
 8001210:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001212:	2300      	movs	r3, #0
 8001214:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121a:	2200      	movs	r2, #0
 800121c:	4619      	mov	r1, r3
 800121e:	4814      	ldr	r0, [pc, #80]	; (8001270 <MX_TIM1_Init+0x100>)
 8001220:	f001 fce8 	bl	8002bf4 <HAL_TIM_PWM_ConfigChannel>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800122a:	f7ff fe83 	bl	8000f34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001242:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001246:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	4619      	mov	r1, r3
 8001250:	4807      	ldr	r0, [pc, #28]	; (8001270 <MX_TIM1_Init+0x100>)
 8001252:	f002 f8ab 	bl	80033ac <HAL_TIMEx_ConfigBreakDeadTime>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 800125c:	f7ff fe6a 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001260:	4803      	ldr	r0, [pc, #12]	; (8001270 <MX_TIM1_Init+0x100>)
 8001262:	f000 f90d 	bl	8001480 <HAL_TIM_MspPostInit>

}
 8001266:	bf00      	nop
 8001268:	3748      	adds	r7, #72	; 0x48
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000274 	.word	0x20000274
 8001274:	40010000 	.word	0x40010000

08001278 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127e:	f107 0320 	add.w	r3, r7, #32
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]
 8001296:	615a      	str	r2, [r3, #20]
 8001298:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800129a:	4b2c      	ldr	r3, [pc, #176]	; (800134c <MX_TIM4_Init+0xd4>)
 800129c:	4a2c      	ldr	r2, [pc, #176]	; (8001350 <MX_TIM4_Init+0xd8>)
 800129e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 59;
 80012a0:	4b2a      	ldr	r3, [pc, #168]	; (800134c <MX_TIM4_Init+0xd4>)
 80012a2:	223b      	movs	r2, #59	; 0x3b
 80012a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a6:	4b29      	ldr	r3, [pc, #164]	; (800134c <MX_TIM4_Init+0xd4>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80012ac:	4b27      	ldr	r3, [pc, #156]	; (800134c <MX_TIM4_Init+0xd4>)
 80012ae:	2263      	movs	r2, #99	; 0x63
 80012b0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b2:	4b26      	ldr	r3, [pc, #152]	; (800134c <MX_TIM4_Init+0xd4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b8:	4b24      	ldr	r3, [pc, #144]	; (800134c <MX_TIM4_Init+0xd4>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012be:	4823      	ldr	r0, [pc, #140]	; (800134c <MX_TIM4_Init+0xd4>)
 80012c0:	f001 fa79 	bl	80027b6 <HAL_TIM_PWM_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80012ca:	f7ff fe33 	bl	8000f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ce:	2300      	movs	r3, #0
 80012d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012d6:	f107 0320 	add.w	r3, r7, #32
 80012da:	4619      	mov	r1, r3
 80012dc:	481b      	ldr	r0, [pc, #108]	; (800134c <MX_TIM4_Init+0xd4>)
 80012de:	f001 ffe9 	bl	80032b4 <HAL_TIMEx_MasterConfigSynchronization>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80012e8:	f7ff fe24 	bl	8000f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ec:	2360      	movs	r3, #96	; 0x60
 80012ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	2204      	movs	r2, #4
 8001300:	4619      	mov	r1, r3
 8001302:	4812      	ldr	r0, [pc, #72]	; (800134c <MX_TIM4_Init+0xd4>)
 8001304:	f001 fc76 	bl	8002bf4 <HAL_TIM_PWM_ConfigChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800130e:	f7ff fe11 	bl	8000f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2208      	movs	r2, #8
 8001316:	4619      	mov	r1, r3
 8001318:	480c      	ldr	r0, [pc, #48]	; (800134c <MX_TIM4_Init+0xd4>)
 800131a:	f001 fc6b 	bl	8002bf4 <HAL_TIM_PWM_ConfigChannel>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001324:	f7ff fe06 	bl	8000f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	220c      	movs	r2, #12
 800132c:	4619      	mov	r1, r3
 800132e:	4807      	ldr	r0, [pc, #28]	; (800134c <MX_TIM4_Init+0xd4>)
 8001330:	f001 fc60 	bl	8002bf4 <HAL_TIM_PWM_ConfigChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 800133a:	f7ff fdfb 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800133e:	4803      	ldr	r0, [pc, #12]	; (800134c <MX_TIM4_Init+0xd4>)
 8001340:	f000 f89e 	bl	8001480 <HAL_TIM_MspPostInit>

}
 8001344:	bf00      	nop
 8001346:	3728      	adds	r7, #40	; 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200002bc 	.word	0x200002bc
 8001350:	40000800 	.word	0x40000800

08001354 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135a:	463b      	mov	r3, r7
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <MX_TIM6_Init+0x64>)
 8001364:	4a15      	ldr	r2, [pc, #84]	; (80013bc <MX_TIM6_Init+0x68>)
 8001366:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 59999;
 8001368:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <MX_TIM6_Init+0x64>)
 800136a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800136e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_TIM6_Init+0x64>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <MX_TIM6_Init+0x64>)
 8001378:	2200      	movs	r2, #0
 800137a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_TIM6_Init+0x64>)
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001382:	480d      	ldr	r0, [pc, #52]	; (80013b8 <MX_TIM6_Init+0x64>)
 8001384:	f001 f928 	bl	80025d8 <HAL_TIM_Base_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800138e:	f7ff fdd1 	bl	8000f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001392:	2300      	movs	r3, #0
 8001394:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800139a:	463b      	mov	r3, r7
 800139c:	4619      	mov	r1, r3
 800139e:	4806      	ldr	r0, [pc, #24]	; (80013b8 <MX_TIM6_Init+0x64>)
 80013a0:	f001 ff88 	bl	80032b4 <HAL_TIMEx_MasterConfigSynchronization>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80013aa:	f7ff fdc3 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000304 	.word	0x20000304
 80013bc:	40001000 	.word	0x40001000

080013c0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a15      	ldr	r2, [pc, #84]	; (8001424 <HAL_TIM_PWM_MspInit+0x64>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d10e      	bne.n	80013f0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <HAL_TIM_PWM_MspInit+0x68>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a13      	ldr	r2, [pc, #76]	; (8001428 <HAL_TIM_PWM_MspInit+0x68>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <HAL_TIM_PWM_MspInit+0x68>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80013ee:	e012      	b.n	8001416 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM4)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a0d      	ldr	r2, [pc, #52]	; (800142c <HAL_TIM_PWM_MspInit+0x6c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d10d      	bne.n	8001416 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_TIM_PWM_MspInit+0x68>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	4a09      	ldr	r2, [pc, #36]	; (8001428 <HAL_TIM_PWM_MspInit+0x68>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	6413      	str	r3, [r2, #64]	; 0x40
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <HAL_TIM_PWM_MspInit+0x68>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
}
 8001416:	bf00      	nop
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40010000 	.word	0x40010000
 8001428:	40023800 	.word	0x40023800
 800142c:	40000800 	.word	0x40000800

08001430 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <HAL_TIM_Base_MspInit+0x48>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d115      	bne.n	800146e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b0d      	ldr	r3, [pc, #52]	; (800147c <HAL_TIM_Base_MspInit+0x4c>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	4a0c      	ldr	r2, [pc, #48]	; (800147c <HAL_TIM_Base_MspInit+0x4c>)
 800144c:	f043 0310 	orr.w	r3, r3, #16
 8001450:	6413      	str	r3, [r2, #64]	; 0x40
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <HAL_TIM_Base_MspInit+0x4c>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2036      	movs	r0, #54	; 0x36
 8001464:	f000 fa7d 	bl	8001962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001468:	2036      	movs	r0, #54	; 0x36
 800146a:	f000 fa96 	bl	800199a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40001000 	.word	0x40001000
 800147c:	40023800 	.word	0x40023800

08001480 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a25      	ldr	r2, [pc, #148]	; (8001534 <HAL_TIM_MspPostInit+0xb4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d11f      	bne.n	80014e2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	4b24      	ldr	r3, [pc, #144]	; (8001538 <HAL_TIM_MspPostInit+0xb8>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a23      	ldr	r2, [pc, #140]	; (8001538 <HAL_TIM_MspPostInit+0xb8>)
 80014ac:	f043 0310 	orr.w	r3, r3, #16
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b21      	ldr	r3, [pc, #132]	; (8001538 <HAL_TIM_MspPostInit+0xb8>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0310 	and.w	r3, r3, #16
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014d0:	2301      	movs	r3, #1
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4619      	mov	r1, r3
 80014da:	4818      	ldr	r0, [pc, #96]	; (800153c <HAL_TIM_MspPostInit+0xbc>)
 80014dc:	f000 fa78 	bl	80019d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80014e0:	e023      	b.n	800152a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM4)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a16      	ldr	r2, [pc, #88]	; (8001540 <HAL_TIM_MspPostInit+0xc0>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d11e      	bne.n	800152a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <HAL_TIM_MspPostInit+0xb8>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	4a10      	ldr	r2, [pc, #64]	; (8001538 <HAL_TIM_MspPostInit+0xb8>)
 80014f6:	f043 0308 	orr.w	r3, r3, #8
 80014fa:	6313      	str	r3, [r2, #48]	; 0x30
 80014fc:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <HAL_TIM_MspPostInit+0xb8>)
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	f003 0308 	and.w	r3, r3, #8
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001508:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800151a:	2302      	movs	r3, #2
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	4807      	ldr	r0, [pc, #28]	; (8001544 <HAL_TIM_MspPostInit+0xc4>)
 8001526:	f000 fa53 	bl	80019d0 <HAL_GPIO_Init>
}
 800152a:	bf00      	nop
 800152c:	3728      	adds	r7, #40	; 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40010000 	.word	0x40010000
 8001538:	40023800 	.word	0x40023800
 800153c:	40021000 	.word	0x40021000
 8001540:	40000800 	.word	0x40000800
 8001544:	40020c00 	.word	0x40020c00

08001548 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <MX_USART6_UART_Init+0x4c>)
 800154e:	4a12      	ldr	r2, [pc, #72]	; (8001598 <MX_USART6_UART_Init+0x50>)
 8001550:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <MX_USART6_UART_Init+0x4c>)
 8001554:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001558:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <MX_USART6_UART_Init+0x4c>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <MX_USART6_UART_Init+0x4c>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <MX_USART6_UART_Init+0x4c>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <MX_USART6_UART_Init+0x4c>)
 800156e:	220c      	movs	r2, #12
 8001570:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <MX_USART6_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <MX_USART6_UART_Init+0x4c>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800157e:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_USART6_UART_Init+0x4c>)
 8001580:	f001 ff7a 	bl	8003478 <HAL_UART_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800158a:	f7ff fcd3 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	2000034c 	.word	0x2000034c
 8001598:	40011400 	.word	0x40011400

0800159c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a19      	ldr	r2, [pc, #100]	; (8001620 <HAL_UART_MspInit+0x84>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d12b      	bne.n	8001616 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	4b18      	ldr	r3, [pc, #96]	; (8001624 <HAL_UART_MspInit+0x88>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	4a17      	ldr	r2, [pc, #92]	; (8001624 <HAL_UART_MspInit+0x88>)
 80015c8:	f043 0320 	orr.w	r3, r3, #32
 80015cc:	6453      	str	r3, [r2, #68]	; 0x44
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <HAL_UART_MspInit+0x88>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	f003 0320 	and.w	r3, r3, #32
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <HAL_UART_MspInit+0x88>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a10      	ldr	r2, [pc, #64]	; (8001624 <HAL_UART_MspInit+0x88>)
 80015e4:	f043 0304 	orr.w	r3, r3, #4
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <HAL_UART_MspInit+0x88>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015f6:	23c0      	movs	r3, #192	; 0xc0
 80015f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001606:	2308      	movs	r3, #8
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	4805      	ldr	r0, [pc, #20]	; (8001628 <HAL_UART_MspInit+0x8c>)
 8001612:	f000 f9dd 	bl	80019d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001616:	bf00      	nop
 8001618:	3728      	adds	r7, #40	; 0x28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40011400 	.word	0x40011400
 8001624:	40023800 	.word	0x40023800
 8001628:	40020800 	.word	0x40020800

0800162c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800162c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001664 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001630:	480d      	ldr	r0, [pc, #52]	; (8001668 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001632:	490e      	ldr	r1, [pc, #56]	; (800166c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001634:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001638:	e002      	b.n	8001640 <LoopCopyDataInit>

0800163a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800163c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163e:	3304      	adds	r3, #4

08001640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001644:	d3f9      	bcc.n	800163a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001648:	4c0b      	ldr	r4, [pc, #44]	; (8001678 <LoopFillZerobss+0x26>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800164c:	e001      	b.n	8001652 <LoopFillZerobss>

0800164e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001650:	3204      	adds	r2, #4

08001652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001654:	d3fb      	bcc.n	800164e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001656:	f7ff fd79 	bl	800114c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800165a:	f002 fb77 	bl	8003d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800165e:	f7ff fb77 	bl	8000d50 <main>
  bx  lr    
 8001662:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001664:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800166c:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8001670:	08005000 	.word	0x08005000
  ldr r2, =_sbss
 8001674:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8001678:	200003a4 	.word	0x200003a4

0800167c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800167c:	e7fe      	b.n	800167c <ADC_IRQHandler>
	...

08001680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001684:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <HAL_Init+0x40>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a0d      	ldr	r2, [pc, #52]	; (80016c0 <HAL_Init+0x40>)
 800168a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <HAL_Init+0x40>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <HAL_Init+0x40>)
 8001696:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800169a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <HAL_Init+0x40>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <HAL_Init+0x40>)
 80016a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a8:	2003      	movs	r0, #3
 80016aa:	f000 f94f 	bl	800194c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ae:	200f      	movs	r0, #15
 80016b0:	f000 f808 	bl	80016c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b4:	f7ff fc44 	bl	8000f40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023c00 	.word	0x40023c00

080016c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_InitTick+0x54>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_InitTick+0x58>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016da:	fbb3 f3f1 	udiv	r3, r3, r1
 80016de:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f967 	bl	80019b6 <HAL_SYSTICK_Config>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00e      	b.n	8001710 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b0f      	cmp	r3, #15
 80016f6:	d80a      	bhi.n	800170e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f8:	2200      	movs	r2, #0
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001700:	f000 f92f 	bl	8001962 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001704:	4a06      	ldr	r2, [pc, #24]	; (8001720 <HAL_InitTick+0x5c>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	e000      	b.n	8001710 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	200001c4 	.word	0x200001c4
 800171c:	200001cc 	.word	0x200001cc
 8001720:	200001c8 	.word	0x200001c8

08001724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_IncTick+0x20>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_IncTick+0x24>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4413      	add	r3, r2
 8001734:	4a04      	ldr	r2, [pc, #16]	; (8001748 <HAL_IncTick+0x24>)
 8001736:	6013      	str	r3, [r2, #0]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	200001cc 	.word	0x200001cc
 8001748:	20000390 	.word	0x20000390

0800174c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return uwTick;
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <HAL_GetTick+0x14>)
 8001752:	681b      	ldr	r3, [r3, #0]
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000390 	.word	0x20000390

08001764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800176c:	f7ff ffee 	bl	800174c <HAL_GetTick>
 8001770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800177c:	d005      	beq.n	800178a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <HAL_Delay+0x44>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4413      	add	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800178a:	bf00      	nop
 800178c:	f7ff ffde 	bl	800174c <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	429a      	cmp	r2, r3
 800179a:	d8f7      	bhi.n	800178c <HAL_Delay+0x28>
  {
  }
}
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200001cc 	.word	0x200001cc

080017ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c8:	4013      	ands	r3, r2
 80017ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017de:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	60d3      	str	r3, [r2, #12]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <__NVIC_GetPriorityGrouping+0x18>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	f003 0307 	and.w	r3, r3, #7
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	2b00      	cmp	r3, #0
 8001820:	db0b      	blt.n	800183a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	f003 021f 	and.w	r2, r3, #31
 8001828:	4907      	ldr	r1, [pc, #28]	; (8001848 <__NVIC_EnableIRQ+0x38>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	2001      	movs	r0, #1
 8001832:	fa00 f202 	lsl.w	r2, r0, r2
 8001836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000e100 	.word	0xe000e100

0800184c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	6039      	str	r1, [r7, #0]
 8001856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185c:	2b00      	cmp	r3, #0
 800185e:	db0a      	blt.n	8001876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	b2da      	uxtb	r2, r3
 8001864:	490c      	ldr	r1, [pc, #48]	; (8001898 <__NVIC_SetPriority+0x4c>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	0112      	lsls	r2, r2, #4
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	440b      	add	r3, r1
 8001870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001874:	e00a      	b.n	800188c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4908      	ldr	r1, [pc, #32]	; (800189c <__NVIC_SetPriority+0x50>)
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	3b04      	subs	r3, #4
 8001884:	0112      	lsls	r2, r2, #4
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	440b      	add	r3, r1
 800188a:	761a      	strb	r2, [r3, #24]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000e100 	.word	0xe000e100
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b089      	sub	sp, #36	; 0x24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f1c3 0307 	rsb	r3, r3, #7
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	bf28      	it	cs
 80018be:	2304      	movcs	r3, #4
 80018c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3304      	adds	r3, #4
 80018c6:	2b06      	cmp	r3, #6
 80018c8:	d902      	bls.n	80018d0 <NVIC_EncodePriority+0x30>
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3b03      	subs	r3, #3
 80018ce:	e000      	b.n	80018d2 <NVIC_EncodePriority+0x32>
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43da      	mvns	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	401a      	ands	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	43d9      	mvns	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	4313      	orrs	r3, r2
         );
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3724      	adds	r7, #36	; 0x24
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001918:	d301      	bcc.n	800191e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191a:	2301      	movs	r3, #1
 800191c:	e00f      	b.n	800193e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191e:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <SysTick_Config+0x40>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001926:	210f      	movs	r1, #15
 8001928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800192c:	f7ff ff8e 	bl	800184c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <SysTick_Config+0x40>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <SysTick_Config+0x40>)
 8001938:	2207      	movs	r2, #7
 800193a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	e000e010 	.word	0xe000e010

0800194c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ff29 	bl	80017ac <__NVIC_SetPriorityGrouping>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001974:	f7ff ff3e 	bl	80017f4 <__NVIC_GetPriorityGrouping>
 8001978:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	6978      	ldr	r0, [r7, #20]
 8001980:	f7ff ff8e 	bl	80018a0 <NVIC_EncodePriority>
 8001984:	4602      	mov	r2, r0
 8001986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff5d 	bl	800184c <__NVIC_SetPriority>
}
 8001992:	bf00      	nop
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff31 	bl	8001810 <__NVIC_EnableIRQ>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff ffa2 	bl	8001908 <SysTick_Config>
 80019c4:	4603      	mov	r3, r0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	; 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	e177      	b.n	8001cdc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019ec:	2201      	movs	r2, #1
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	f040 8166 	bne.w	8001cd6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d005      	beq.n	8001a22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d130      	bne.n	8001a84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a58:	2201      	movs	r2, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	091b      	lsrs	r3, r3, #4
 8001a6e:	f003 0201 	and.w	r2, r3, #1
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	d017      	beq.n	8001ac0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d123      	bne.n	8001b14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	08da      	lsrs	r2, r3, #3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3208      	adds	r2, #8
 8001ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	08da      	lsrs	r2, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3208      	adds	r2, #8
 8001b0e:	69b9      	ldr	r1, [r7, #24]
 8001b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	2203      	movs	r2, #3
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0203 	and.w	r2, r3, #3
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 80c0 	beq.w	8001cd6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	4b66      	ldr	r3, [pc, #408]	; (8001cf4 <HAL_GPIO_Init+0x324>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	4a65      	ldr	r2, [pc, #404]	; (8001cf4 <HAL_GPIO_Init+0x324>)
 8001b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b64:	6453      	str	r3, [r2, #68]	; 0x44
 8001b66:	4b63      	ldr	r3, [pc, #396]	; (8001cf4 <HAL_GPIO_Init+0x324>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b72:	4a61      	ldr	r2, [pc, #388]	; (8001cf8 <HAL_GPIO_Init+0x328>)
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	3302      	adds	r3, #2
 8001b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	220f      	movs	r2, #15
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4013      	ands	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a58      	ldr	r2, [pc, #352]	; (8001cfc <HAL_GPIO_Init+0x32c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d037      	beq.n	8001c0e <HAL_GPIO_Init+0x23e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a57      	ldr	r2, [pc, #348]	; (8001d00 <HAL_GPIO_Init+0x330>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d031      	beq.n	8001c0a <HAL_GPIO_Init+0x23a>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a56      	ldr	r2, [pc, #344]	; (8001d04 <HAL_GPIO_Init+0x334>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d02b      	beq.n	8001c06 <HAL_GPIO_Init+0x236>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a55      	ldr	r2, [pc, #340]	; (8001d08 <HAL_GPIO_Init+0x338>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d025      	beq.n	8001c02 <HAL_GPIO_Init+0x232>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a54      	ldr	r2, [pc, #336]	; (8001d0c <HAL_GPIO_Init+0x33c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d01f      	beq.n	8001bfe <HAL_GPIO_Init+0x22e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a53      	ldr	r2, [pc, #332]	; (8001d10 <HAL_GPIO_Init+0x340>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d019      	beq.n	8001bfa <HAL_GPIO_Init+0x22a>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a52      	ldr	r2, [pc, #328]	; (8001d14 <HAL_GPIO_Init+0x344>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d013      	beq.n	8001bf6 <HAL_GPIO_Init+0x226>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a51      	ldr	r2, [pc, #324]	; (8001d18 <HAL_GPIO_Init+0x348>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d00d      	beq.n	8001bf2 <HAL_GPIO_Init+0x222>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a50      	ldr	r2, [pc, #320]	; (8001d1c <HAL_GPIO_Init+0x34c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d007      	beq.n	8001bee <HAL_GPIO_Init+0x21e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4f      	ldr	r2, [pc, #316]	; (8001d20 <HAL_GPIO_Init+0x350>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d101      	bne.n	8001bea <HAL_GPIO_Init+0x21a>
 8001be6:	2309      	movs	r3, #9
 8001be8:	e012      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001bea:	230a      	movs	r3, #10
 8001bec:	e010      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001bee:	2308      	movs	r3, #8
 8001bf0:	e00e      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001bf2:	2307      	movs	r3, #7
 8001bf4:	e00c      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001bf6:	2306      	movs	r3, #6
 8001bf8:	e00a      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001bfa:	2305      	movs	r3, #5
 8001bfc:	e008      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001bfe:	2304      	movs	r3, #4
 8001c00:	e006      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001c02:	2303      	movs	r3, #3
 8001c04:	e004      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e002      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	69fa      	ldr	r2, [r7, #28]
 8001c12:	f002 0203 	and.w	r2, r2, #3
 8001c16:	0092      	lsls	r2, r2, #2
 8001c18:	4093      	lsls	r3, r2
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c20:	4935      	ldr	r1, [pc, #212]	; (8001cf8 <HAL_GPIO_Init+0x328>)
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	089b      	lsrs	r3, r3, #2
 8001c26:	3302      	adds	r3, #2
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c2e:	4b3d      	ldr	r3, [pc, #244]	; (8001d24 <HAL_GPIO_Init+0x354>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c52:	4a34      	ldr	r2, [pc, #208]	; (8001d24 <HAL_GPIO_Init+0x354>)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c58:	4b32      	ldr	r3, [pc, #200]	; (8001d24 <HAL_GPIO_Init+0x354>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c7c:	4a29      	ldr	r2, [pc, #164]	; (8001d24 <HAL_GPIO_Init+0x354>)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c82:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <HAL_GPIO_Init+0x354>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ca6:	4a1f      	ldr	r2, [pc, #124]	; (8001d24 <HAL_GPIO_Init+0x354>)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cac:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <HAL_GPIO_Init+0x354>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cd0:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <HAL_GPIO_Init+0x354>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	61fb      	str	r3, [r7, #28]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	2b0f      	cmp	r3, #15
 8001ce0:	f67f ae84 	bls.w	80019ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	3724      	adds	r7, #36	; 0x24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40013800 	.word	0x40013800
 8001cfc:	40020000 	.word	0x40020000
 8001d00:	40020400 	.word	0x40020400
 8001d04:	40020800 	.word	0x40020800
 8001d08:	40020c00 	.word	0x40020c00
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40021400 	.word	0x40021400
 8001d14:	40021800 	.word	0x40021800
 8001d18:	40021c00 	.word	0x40021c00
 8001d1c:	40022000 	.word	0x40022000
 8001d20:	40022400 	.word	0x40022400
 8001d24:	40013c00 	.word	0x40013c00

08001d28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e267      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d075      	beq.n	8001e32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d46:	4b88      	ldr	r3, [pc, #544]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d00c      	beq.n	8001d6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d52:	4b85      	ldr	r3, [pc, #532]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d112      	bne.n	8001d84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d5e:	4b82      	ldr	r3, [pc, #520]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d6a:	d10b      	bne.n	8001d84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6c:	4b7e      	ldr	r3, [pc, #504]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d05b      	beq.n	8001e30 <HAL_RCC_OscConfig+0x108>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d157      	bne.n	8001e30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e242      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d8c:	d106      	bne.n	8001d9c <HAL_RCC_OscConfig+0x74>
 8001d8e:	4b76      	ldr	r3, [pc, #472]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a75      	ldr	r2, [pc, #468]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e01d      	b.n	8001dd8 <HAL_RCC_OscConfig+0xb0>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001da4:	d10c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x98>
 8001da6:	4b70      	ldr	r3, [pc, #448]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a6f      	ldr	r2, [pc, #444]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	4b6d      	ldr	r3, [pc, #436]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a6c      	ldr	r2, [pc, #432]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e00b      	b.n	8001dd8 <HAL_RCC_OscConfig+0xb0>
 8001dc0:	4b69      	ldr	r3, [pc, #420]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a68      	ldr	r2, [pc, #416]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	4b66      	ldr	r3, [pc, #408]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a65      	ldr	r2, [pc, #404]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d013      	beq.n	8001e08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7ff fcb4 	bl	800174c <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de8:	f7ff fcb0 	bl	800174c <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b64      	cmp	r3, #100	; 0x64
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e207      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfa:	4b5b      	ldr	r3, [pc, #364]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0xc0>
 8001e06:	e014      	b.n	8001e32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e08:	f7ff fca0 	bl	800174c <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e10:	f7ff fc9c 	bl	800174c <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	; 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e1f3      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e22:	4b51      	ldr	r3, [pc, #324]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0xe8>
 8001e2e:	e000      	b.n	8001e32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d063      	beq.n	8001f06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e3e:	4b4a      	ldr	r3, [pc, #296]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00b      	beq.n	8001e62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e4a:	4b47      	ldr	r3, [pc, #284]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d11c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e56:	4b44      	ldr	r3, [pc, #272]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d116      	bne.n	8001e90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e62:	4b41      	ldr	r3, [pc, #260]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d005      	beq.n	8001e7a <HAL_RCC_OscConfig+0x152>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d001      	beq.n	8001e7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e1c7      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7a:	4b3b      	ldr	r3, [pc, #236]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4937      	ldr	r1, [pc, #220]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8e:	e03a      	b.n	8001f06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d020      	beq.n	8001eda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e98:	4b34      	ldr	r3, [pc, #208]	; (8001f6c <HAL_RCC_OscConfig+0x244>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9e:	f7ff fc55 	bl	800174c <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ea6:	f7ff fc51 	bl	800174c <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e1a8      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb8:	4b2b      	ldr	r3, [pc, #172]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec4:	4b28      	ldr	r3, [pc, #160]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4925      	ldr	r1, [pc, #148]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	600b      	str	r3, [r1, #0]
 8001ed8:	e015      	b.n	8001f06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eda:	4b24      	ldr	r3, [pc, #144]	; (8001f6c <HAL_RCC_OscConfig+0x244>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7ff fc34 	bl	800174c <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee8:	f7ff fc30 	bl	800174c <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e187      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efa:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d036      	beq.n	8001f80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d016      	beq.n	8001f48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f1a:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <HAL_RCC_OscConfig+0x248>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f20:	f7ff fc14 	bl	800174c <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f28:	f7ff fc10 	bl	800174c <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e167      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0x200>
 8001f46:	e01b      	b.n	8001f80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f48:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <HAL_RCC_OscConfig+0x248>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4e:	f7ff fbfd 	bl	800174c <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f54:	e00e      	b.n	8001f74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f56:	f7ff fbf9 	bl	800174c <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d907      	bls.n	8001f74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e150      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	42470000 	.word	0x42470000
 8001f70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f74:	4b88      	ldr	r3, [pc, #544]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8001f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1ea      	bne.n	8001f56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 8097 	beq.w	80020bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f92:	4b81      	ldr	r3, [pc, #516]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10f      	bne.n	8001fbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	4b7d      	ldr	r3, [pc, #500]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	4a7c      	ldr	r2, [pc, #496]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8001fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fac:	6413      	str	r3, [r2, #64]	; 0x40
 8001fae:	4b7a      	ldr	r3, [pc, #488]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbe:	4b77      	ldr	r3, [pc, #476]	; (800219c <HAL_RCC_OscConfig+0x474>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d118      	bne.n	8001ffc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fca:	4b74      	ldr	r3, [pc, #464]	; (800219c <HAL_RCC_OscConfig+0x474>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a73      	ldr	r2, [pc, #460]	; (800219c <HAL_RCC_OscConfig+0x474>)
 8001fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fd6:	f7ff fbb9 	bl	800174c <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fde:	f7ff fbb5 	bl	800174c <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e10c      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff0:	4b6a      	ldr	r3, [pc, #424]	; (800219c <HAL_RCC_OscConfig+0x474>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d106      	bne.n	8002012 <HAL_RCC_OscConfig+0x2ea>
 8002004:	4b64      	ldr	r3, [pc, #400]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8002006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002008:	4a63      	ldr	r2, [pc, #396]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6713      	str	r3, [r2, #112]	; 0x70
 8002010:	e01c      	b.n	800204c <HAL_RCC_OscConfig+0x324>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2b05      	cmp	r3, #5
 8002018:	d10c      	bne.n	8002034 <HAL_RCC_OscConfig+0x30c>
 800201a:	4b5f      	ldr	r3, [pc, #380]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 800201c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201e:	4a5e      	ldr	r2, [pc, #376]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8002020:	f043 0304 	orr.w	r3, r3, #4
 8002024:	6713      	str	r3, [r2, #112]	; 0x70
 8002026:	4b5c      	ldr	r3, [pc, #368]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8002028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202a:	4a5b      	ldr	r2, [pc, #364]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	6713      	str	r3, [r2, #112]	; 0x70
 8002032:	e00b      	b.n	800204c <HAL_RCC_OscConfig+0x324>
 8002034:	4b58      	ldr	r3, [pc, #352]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8002036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002038:	4a57      	ldr	r2, [pc, #348]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 800203a:	f023 0301 	bic.w	r3, r3, #1
 800203e:	6713      	str	r3, [r2, #112]	; 0x70
 8002040:	4b55      	ldr	r3, [pc, #340]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8002042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002044:	4a54      	ldr	r2, [pc, #336]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8002046:	f023 0304 	bic.w	r3, r3, #4
 800204a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d015      	beq.n	8002080 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002054:	f7ff fb7a 	bl	800174c <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205a:	e00a      	b.n	8002072 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800205c:	f7ff fb76 	bl	800174c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f241 3288 	movw	r2, #5000	; 0x1388
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e0cb      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002072:	4b49      	ldr	r3, [pc, #292]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8002074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0ee      	beq.n	800205c <HAL_RCC_OscConfig+0x334>
 800207e:	e014      	b.n	80020aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002080:	f7ff fb64 	bl	800174c <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002086:	e00a      	b.n	800209e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002088:	f7ff fb60 	bl	800174c <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	f241 3288 	movw	r2, #5000	; 0x1388
 8002096:	4293      	cmp	r3, r2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e0b5      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800209e:	4b3e      	ldr	r3, [pc, #248]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 80020a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1ee      	bne.n	8002088 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020aa:	7dfb      	ldrb	r3, [r7, #23]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d105      	bne.n	80020bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b0:	4b39      	ldr	r3, [pc, #228]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	4a38      	ldr	r2, [pc, #224]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 80020b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 80a1 	beq.w	8002208 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020c6:	4b34      	ldr	r3, [pc, #208]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 030c 	and.w	r3, r3, #12
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d05c      	beq.n	800218c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d141      	bne.n	800215e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020da:	4b31      	ldr	r3, [pc, #196]	; (80021a0 <HAL_RCC_OscConfig+0x478>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7ff fb34 	bl	800174c <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e8:	f7ff fb30 	bl	800174c <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e087      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020fa:	4b27      	ldr	r3, [pc, #156]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69da      	ldr	r2, [r3, #28]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	019b      	lsls	r3, r3, #6
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	085b      	lsrs	r3, r3, #1
 800211e:	3b01      	subs	r3, #1
 8002120:	041b      	lsls	r3, r3, #16
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002128:	061b      	lsls	r3, r3, #24
 800212a:	491b      	ldr	r1, [pc, #108]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 800212c:	4313      	orrs	r3, r2
 800212e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002130:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <HAL_RCC_OscConfig+0x478>)
 8002132:	2201      	movs	r2, #1
 8002134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002136:	f7ff fb09 	bl	800174c <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800213e:	f7ff fb05 	bl	800174c <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e05c      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0f0      	beq.n	800213e <HAL_RCC_OscConfig+0x416>
 800215c:	e054      	b.n	8002208 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215e:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <HAL_RCC_OscConfig+0x478>)
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7ff faf2 	bl	800174c <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216c:	f7ff faee 	bl	800174c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e045      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0x444>
 800218a:	e03d      	b.n	8002208 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d107      	bne.n	80021a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e038      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
 8002198:	40023800 	.word	0x40023800
 800219c:	40007000 	.word	0x40007000
 80021a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <HAL_RCC_OscConfig+0x4ec>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d028      	beq.n	8002204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021bc:	429a      	cmp	r2, r3
 80021be:	d121      	bne.n	8002204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d11a      	bne.n	8002204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021d4:	4013      	ands	r3, r2
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021dc:	4293      	cmp	r3, r2
 80021de:	d111      	bne.n	8002204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	085b      	lsrs	r3, r3, #1
 80021ec:	3b01      	subs	r3, #1
 80021ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d107      	bne.n	8002204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800

08002218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0cc      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800222c:	4b68      	ldr	r3, [pc, #416]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d90c      	bls.n	8002254 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b65      	ldr	r3, [pc, #404]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002242:	4b63      	ldr	r3, [pc, #396]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d001      	beq.n	8002254 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e0b8      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d020      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800226c:	4b59      	ldr	r3, [pc, #356]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	4a58      	ldr	r2, [pc, #352]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002276:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002284:	4b53      	ldr	r3, [pc, #332]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	4a52      	ldr	r2, [pc, #328]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800228e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002290:	4b50      	ldr	r3, [pc, #320]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	494d      	ldr	r1, [pc, #308]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d044      	beq.n	8002338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b6:	4b47      	ldr	r3, [pc, #284]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d119      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e07f      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d003      	beq.n	80022d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d107      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d6:	4b3f      	ldr	r3, [pc, #252]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d109      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e06f      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e6:	4b3b      	ldr	r3, [pc, #236]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e067      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022f6:	4b37      	ldr	r3, [pc, #220]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f023 0203 	bic.w	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	4934      	ldr	r1, [pc, #208]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002304:	4313      	orrs	r3, r2
 8002306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002308:	f7ff fa20 	bl	800174c <HAL_GetTick>
 800230c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230e:	e00a      	b.n	8002326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002310:	f7ff fa1c 	bl	800174c <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	f241 3288 	movw	r2, #5000	; 0x1388
 800231e:	4293      	cmp	r3, r2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e04f      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002326:	4b2b      	ldr	r3, [pc, #172]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 020c 	and.w	r2, r3, #12
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	429a      	cmp	r2, r3
 8002336:	d1eb      	bne.n	8002310 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002338:	4b25      	ldr	r3, [pc, #148]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 030f 	and.w	r3, r3, #15
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d20c      	bcs.n	8002360 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002346:	4b22      	ldr	r3, [pc, #136]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800234e:	4b20      	ldr	r3, [pc, #128]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e032      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800236c:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4916      	ldr	r1, [pc, #88]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	4313      	orrs	r3, r2
 800237c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d009      	beq.n	800239e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800238a:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	490e      	ldr	r1, [pc, #56]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	4313      	orrs	r3, r2
 800239c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800239e:	f000 f821 	bl	80023e4 <HAL_RCC_GetSysClockFreq>
 80023a2:	4602      	mov	r2, r0
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	091b      	lsrs	r3, r3, #4
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	490a      	ldr	r1, [pc, #40]	; (80023d8 <HAL_RCC_ClockConfig+0x1c0>)
 80023b0:	5ccb      	ldrb	r3, [r1, r3]
 80023b2:	fa22 f303 	lsr.w	r3, r2, r3
 80023b6:	4a09      	ldr	r2, [pc, #36]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <HAL_RCC_ClockConfig+0x1c8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff f980 	bl	80016c4 <HAL_InitTick>

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40023c00 	.word	0x40023c00
 80023d4:	40023800 	.word	0x40023800
 80023d8:	08004f40 	.word	0x08004f40
 80023dc:	200001c4 	.word	0x200001c4
 80023e0:	200001c8 	.word	0x200001c8

080023e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023e8:	b090      	sub	sp, #64	; 0x40
 80023ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	637b      	str	r3, [r7, #52]	; 0x34
 80023f0:	2300      	movs	r3, #0
 80023f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023f4:	2300      	movs	r3, #0
 80023f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023fc:	4b59      	ldr	r3, [pc, #356]	; (8002564 <HAL_RCC_GetSysClockFreq+0x180>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 030c 	and.w	r3, r3, #12
 8002404:	2b08      	cmp	r3, #8
 8002406:	d00d      	beq.n	8002424 <HAL_RCC_GetSysClockFreq+0x40>
 8002408:	2b08      	cmp	r3, #8
 800240a:	f200 80a1 	bhi.w	8002550 <HAL_RCC_GetSysClockFreq+0x16c>
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <HAL_RCC_GetSysClockFreq+0x34>
 8002412:	2b04      	cmp	r3, #4
 8002414:	d003      	beq.n	800241e <HAL_RCC_GetSysClockFreq+0x3a>
 8002416:	e09b      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002418:	4b53      	ldr	r3, [pc, #332]	; (8002568 <HAL_RCC_GetSysClockFreq+0x184>)
 800241a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800241c:	e09b      	b.n	8002556 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800241e:	4b53      	ldr	r3, [pc, #332]	; (800256c <HAL_RCC_GetSysClockFreq+0x188>)
 8002420:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002422:	e098      	b.n	8002556 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002424:	4b4f      	ldr	r3, [pc, #316]	; (8002564 <HAL_RCC_GetSysClockFreq+0x180>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800242c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800242e:	4b4d      	ldr	r3, [pc, #308]	; (8002564 <HAL_RCC_GetSysClockFreq+0x180>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d028      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800243a:	4b4a      	ldr	r3, [pc, #296]	; (8002564 <HAL_RCC_GetSysClockFreq+0x180>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	099b      	lsrs	r3, r3, #6
 8002440:	2200      	movs	r2, #0
 8002442:	623b      	str	r3, [r7, #32]
 8002444:	627a      	str	r2, [r7, #36]	; 0x24
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800244c:	2100      	movs	r1, #0
 800244e:	4b47      	ldr	r3, [pc, #284]	; (800256c <HAL_RCC_GetSysClockFreq+0x188>)
 8002450:	fb03 f201 	mul.w	r2, r3, r1
 8002454:	2300      	movs	r3, #0
 8002456:	fb00 f303 	mul.w	r3, r0, r3
 800245a:	4413      	add	r3, r2
 800245c:	4a43      	ldr	r2, [pc, #268]	; (800256c <HAL_RCC_GetSysClockFreq+0x188>)
 800245e:	fba0 1202 	umull	r1, r2, r0, r2
 8002462:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002464:	460a      	mov	r2, r1
 8002466:	62ba      	str	r2, [r7, #40]	; 0x28
 8002468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800246a:	4413      	add	r3, r2
 800246c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800246e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002470:	2200      	movs	r2, #0
 8002472:	61bb      	str	r3, [r7, #24]
 8002474:	61fa      	str	r2, [r7, #28]
 8002476:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800247a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800247e:	f7fd ff0f 	bl	80002a0 <__aeabi_uldivmod>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4613      	mov	r3, r2
 8002488:	63fb      	str	r3, [r7, #60]	; 0x3c
 800248a:	e053      	b.n	8002534 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800248c:	4b35      	ldr	r3, [pc, #212]	; (8002564 <HAL_RCC_GetSysClockFreq+0x180>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	099b      	lsrs	r3, r3, #6
 8002492:	2200      	movs	r2, #0
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	617a      	str	r2, [r7, #20]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800249e:	f04f 0b00 	mov.w	fp, #0
 80024a2:	4652      	mov	r2, sl
 80024a4:	465b      	mov	r3, fp
 80024a6:	f04f 0000 	mov.w	r0, #0
 80024aa:	f04f 0100 	mov.w	r1, #0
 80024ae:	0159      	lsls	r1, r3, #5
 80024b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024b4:	0150      	lsls	r0, r2, #5
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	ebb2 080a 	subs.w	r8, r2, sl
 80024be:	eb63 090b 	sbc.w	r9, r3, fp
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80024d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024d6:	ebb2 0408 	subs.w	r4, r2, r8
 80024da:	eb63 0509 	sbc.w	r5, r3, r9
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	00eb      	lsls	r3, r5, #3
 80024e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024ec:	00e2      	lsls	r2, r4, #3
 80024ee:	4614      	mov	r4, r2
 80024f0:	461d      	mov	r5, r3
 80024f2:	eb14 030a 	adds.w	r3, r4, sl
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	eb45 030b 	adc.w	r3, r5, fp
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	f04f 0300 	mov.w	r3, #0
 8002506:	e9d7 4500 	ldrd	r4, r5, [r7]
 800250a:	4629      	mov	r1, r5
 800250c:	028b      	lsls	r3, r1, #10
 800250e:	4621      	mov	r1, r4
 8002510:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002514:	4621      	mov	r1, r4
 8002516:	028a      	lsls	r2, r1, #10
 8002518:	4610      	mov	r0, r2
 800251a:	4619      	mov	r1, r3
 800251c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251e:	2200      	movs	r2, #0
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	60fa      	str	r2, [r7, #12]
 8002524:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002528:	f7fd feba 	bl	80002a0 <__aeabi_uldivmod>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4613      	mov	r3, r2
 8002532:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <HAL_RCC_GetSysClockFreq+0x180>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	0c1b      	lsrs	r3, r3, #16
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	3301      	adds	r3, #1
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002544:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002548:	fbb2 f3f3 	udiv	r3, r2, r3
 800254c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800254e:	e002      	b.n	8002556 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_RCC_GetSysClockFreq+0x184>)
 8002552:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002558:	4618      	mov	r0, r3
 800255a:	3740      	adds	r7, #64	; 0x40
 800255c:	46bd      	mov	sp, r7
 800255e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002562:	bf00      	nop
 8002564:	40023800 	.word	0x40023800
 8002568:	00f42400 	.word	0x00f42400
 800256c:	017d7840 	.word	0x017d7840

08002570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <HAL_RCC_GetHCLKFreq+0x14>)
 8002576:	681b      	ldr	r3, [r3, #0]
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	200001c4 	.word	0x200001c4

08002588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800258c:	f7ff fff0 	bl	8002570 <HAL_RCC_GetHCLKFreq>
 8002590:	4602      	mov	r2, r0
 8002592:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	0a9b      	lsrs	r3, r3, #10
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	4903      	ldr	r1, [pc, #12]	; (80025ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800259e:	5ccb      	ldrb	r3, [r1, r3]
 80025a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40023800 	.word	0x40023800
 80025ac:	08004f50 	.word	0x08004f50

080025b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025b4:	f7ff ffdc 	bl	8002570 <HAL_RCC_GetHCLKFreq>
 80025b8:	4602      	mov	r2, r0
 80025ba:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	0b5b      	lsrs	r3, r3, #13
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	4903      	ldr	r1, [pc, #12]	; (80025d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025c6:	5ccb      	ldrb	r3, [r1, r3]
 80025c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40023800 	.word	0x40023800
 80025d4:	08004f50 	.word	0x08004f50

080025d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e041      	b.n	800266e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d106      	bne.n	8002604 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7fe ff16 	bl	8001430 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3304      	adds	r3, #4
 8002614:	4619      	mov	r1, r3
 8002616:	4610      	mov	r0, r2
 8002618:	f000 fbd6 	bl	8002dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b01      	cmp	r3, #1
 800268a:	d001      	beq.n	8002690 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e04e      	b.n	800272e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0201 	orr.w	r2, r2, #1
 80026a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a23      	ldr	r2, [pc, #140]	; (800273c <HAL_TIM_Base_Start_IT+0xc4>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d022      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x80>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ba:	d01d      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x80>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a1f      	ldr	r2, [pc, #124]	; (8002740 <HAL_TIM_Base_Start_IT+0xc8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d018      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x80>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a1e      	ldr	r2, [pc, #120]	; (8002744 <HAL_TIM_Base_Start_IT+0xcc>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d013      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x80>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a1c      	ldr	r2, [pc, #112]	; (8002748 <HAL_TIM_Base_Start_IT+0xd0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00e      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x80>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a1b      	ldr	r2, [pc, #108]	; (800274c <HAL_TIM_Base_Start_IT+0xd4>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d009      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x80>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a19      	ldr	r2, [pc, #100]	; (8002750 <HAL_TIM_Base_Start_IT+0xd8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d004      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x80>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a18      	ldr	r2, [pc, #96]	; (8002754 <HAL_TIM_Base_Start_IT+0xdc>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d111      	bne.n	800271c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2b06      	cmp	r3, #6
 8002708:	d010      	beq.n	800272c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 0201 	orr.w	r2, r2, #1
 8002718:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800271a:	e007      	b.n	800272c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0201 	orr.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40010000 	.word	0x40010000
 8002740:	40000400 	.word	0x40000400
 8002744:	40000800 	.word	0x40000800
 8002748:	40000c00 	.word	0x40000c00
 800274c:	40010400 	.word	0x40010400
 8002750:	40014000 	.word	0x40014000
 8002754:	40001800 	.word	0x40001800

08002758 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0201 	bic.w	r2, r2, #1
 800276e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6a1a      	ldr	r2, [r3, #32]
 8002776:	f241 1311 	movw	r3, #4369	; 0x1111
 800277a:	4013      	ands	r3, r2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10f      	bne.n	80027a0 <HAL_TIM_Base_Stop_IT+0x48>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6a1a      	ldr	r2, [r3, #32]
 8002786:	f240 4344 	movw	r3, #1092	; 0x444
 800278a:	4013      	ands	r3, r2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d107      	bne.n	80027a0 <HAL_TIM_Base_Stop_IT+0x48>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0201 	bic.w	r2, r2, #1
 800279e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e041      	b.n	800284c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d106      	bne.n	80027e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7fe fdef 	bl	80013c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2202      	movs	r2, #2
 80027e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3304      	adds	r3, #4
 80027f2:	4619      	mov	r1, r3
 80027f4:	4610      	mov	r0, r2
 80027f6:	f000 fae7 	bl	8002dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d109      	bne.n	8002878 <HAL_TIM_PWM_Start+0x24>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b01      	cmp	r3, #1
 800286e:	bf14      	ite	ne
 8002870:	2301      	movne	r3, #1
 8002872:	2300      	moveq	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	e022      	b.n	80028be <HAL_TIM_PWM_Start+0x6a>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	2b04      	cmp	r3, #4
 800287c:	d109      	bne.n	8002892 <HAL_TIM_PWM_Start+0x3e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b01      	cmp	r3, #1
 8002888:	bf14      	ite	ne
 800288a:	2301      	movne	r3, #1
 800288c:	2300      	moveq	r3, #0
 800288e:	b2db      	uxtb	r3, r3
 8002890:	e015      	b.n	80028be <HAL_TIM_PWM_Start+0x6a>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b08      	cmp	r3, #8
 8002896:	d109      	bne.n	80028ac <HAL_TIM_PWM_Start+0x58>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	bf14      	ite	ne
 80028a4:	2301      	movne	r3, #1
 80028a6:	2300      	moveq	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	e008      	b.n	80028be <HAL_TIM_PWM_Start+0x6a>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	bf14      	ite	ne
 80028b8:	2301      	movne	r3, #1
 80028ba:	2300      	moveq	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e07c      	b.n	80029c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d104      	bne.n	80028d6 <HAL_TIM_PWM_Start+0x82>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028d4:	e013      	b.n	80028fe <HAL_TIM_PWM_Start+0xaa>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d104      	bne.n	80028e6 <HAL_TIM_PWM_Start+0x92>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028e4:	e00b      	b.n	80028fe <HAL_TIM_PWM_Start+0xaa>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d104      	bne.n	80028f6 <HAL_TIM_PWM_Start+0xa2>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028f4:	e003      	b.n	80028fe <HAL_TIM_PWM_Start+0xaa>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2202      	movs	r2, #2
 80028fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2201      	movs	r2, #1
 8002904:	6839      	ldr	r1, [r7, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f000 fcae 	bl	8003268 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a2d      	ldr	r2, [pc, #180]	; (80029c8 <HAL_TIM_PWM_Start+0x174>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d004      	beq.n	8002920 <HAL_TIM_PWM_Start+0xcc>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a2c      	ldr	r2, [pc, #176]	; (80029cc <HAL_TIM_PWM_Start+0x178>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d101      	bne.n	8002924 <HAL_TIM_PWM_Start+0xd0>
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <HAL_TIM_PWM_Start+0xd2>
 8002924:	2300      	movs	r3, #0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d007      	beq.n	800293a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002938:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a22      	ldr	r2, [pc, #136]	; (80029c8 <HAL_TIM_PWM_Start+0x174>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d022      	beq.n	800298a <HAL_TIM_PWM_Start+0x136>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294c:	d01d      	beq.n	800298a <HAL_TIM_PWM_Start+0x136>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a1f      	ldr	r2, [pc, #124]	; (80029d0 <HAL_TIM_PWM_Start+0x17c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d018      	beq.n	800298a <HAL_TIM_PWM_Start+0x136>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a1d      	ldr	r2, [pc, #116]	; (80029d4 <HAL_TIM_PWM_Start+0x180>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d013      	beq.n	800298a <HAL_TIM_PWM_Start+0x136>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a1c      	ldr	r2, [pc, #112]	; (80029d8 <HAL_TIM_PWM_Start+0x184>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d00e      	beq.n	800298a <HAL_TIM_PWM_Start+0x136>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a16      	ldr	r2, [pc, #88]	; (80029cc <HAL_TIM_PWM_Start+0x178>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d009      	beq.n	800298a <HAL_TIM_PWM_Start+0x136>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a18      	ldr	r2, [pc, #96]	; (80029dc <HAL_TIM_PWM_Start+0x188>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d004      	beq.n	800298a <HAL_TIM_PWM_Start+0x136>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a16      	ldr	r2, [pc, #88]	; (80029e0 <HAL_TIM_PWM_Start+0x18c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d111      	bne.n	80029ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2b06      	cmp	r3, #6
 800299a:	d010      	beq.n	80029be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ac:	e007      	b.n	80029be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0201 	orr.w	r2, r2, #1
 80029bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40010000 	.word	0x40010000
 80029cc:	40010400 	.word	0x40010400
 80029d0:	40000400 	.word	0x40000400
 80029d4:	40000800 	.word	0x40000800
 80029d8:	40000c00 	.word	0x40000c00
 80029dc:	40014000 	.word	0x40014000
 80029e0:	40001800 	.word	0x40001800

080029e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d122      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d11b      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f06f 0202 	mvn.w	r2, #2
 8002a10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f9b0 	bl	8002d8c <HAL_TIM_IC_CaptureCallback>
 8002a2c:	e005      	b.n	8002a3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f9a2 	bl	8002d78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f9b3 	bl	8002da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d122      	bne.n	8002a94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d11b      	bne.n	8002a94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0204 	mvn.w	r2, #4
 8002a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2202      	movs	r2, #2
 8002a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f986 	bl	8002d8c <HAL_TIM_IC_CaptureCallback>
 8002a80:	e005      	b.n	8002a8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f978 	bl	8002d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f989 	bl	8002da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d122      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d11b      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0208 	mvn.w	r2, #8
 8002ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2204      	movs	r2, #4
 8002abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f95c 	bl	8002d8c <HAL_TIM_IC_CaptureCallback>
 8002ad4:	e005      	b.n	8002ae2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f94e 	bl	8002d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f95f 	bl	8002da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	2b10      	cmp	r3, #16
 8002af4:	d122      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	2b10      	cmp	r3, #16
 8002b02:	d11b      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0210 	mvn.w	r2, #16
 8002b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2208      	movs	r2, #8
 8002b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f932 	bl	8002d8c <HAL_TIM_IC_CaptureCallback>
 8002b28:	e005      	b.n	8002b36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f924 	bl	8002d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f935 	bl	8002da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d10e      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d107      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0201 	mvn.w	r2, #1
 8002b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7fe f884 	bl	8000c70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b72:	2b80      	cmp	r3, #128	; 0x80
 8002b74:	d10e      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b80:	2b80      	cmp	r3, #128	; 0x80
 8002b82:	d107      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fc68 	bl	8003464 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9e:	2b40      	cmp	r3, #64	; 0x40
 8002ba0:	d10e      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bac:	2b40      	cmp	r3, #64	; 0x40
 8002bae:	d107      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f8fa 	bl	8002db4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	d10e      	bne.n	8002bec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0320 	and.w	r3, r3, #32
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	d107      	bne.n	8002bec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0220 	mvn.w	r2, #32
 8002be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fc32 	bl	8003450 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e0ae      	b.n	8002d70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b0c      	cmp	r3, #12
 8002c1e:	f200 809f 	bhi.w	8002d60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002c22:	a201      	add	r2, pc, #4	; (adr r2, 8002c28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c28:	08002c5d 	.word	0x08002c5d
 8002c2c:	08002d61 	.word	0x08002d61
 8002c30:	08002d61 	.word	0x08002d61
 8002c34:	08002d61 	.word	0x08002d61
 8002c38:	08002c9d 	.word	0x08002c9d
 8002c3c:	08002d61 	.word	0x08002d61
 8002c40:	08002d61 	.word	0x08002d61
 8002c44:	08002d61 	.word	0x08002d61
 8002c48:	08002cdf 	.word	0x08002cdf
 8002c4c:	08002d61 	.word	0x08002d61
 8002c50:	08002d61 	.word	0x08002d61
 8002c54:	08002d61 	.word	0x08002d61
 8002c58:	08002d1f 	.word	0x08002d1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68b9      	ldr	r1, [r7, #8]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 f950 	bl	8002f08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699a      	ldr	r2, [r3, #24]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0208 	orr.w	r2, r2, #8
 8002c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699a      	ldr	r2, [r3, #24]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0204 	bic.w	r2, r2, #4
 8002c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6999      	ldr	r1, [r3, #24]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	619a      	str	r2, [r3, #24]
      break;
 8002c9a:	e064      	b.n	8002d66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68b9      	ldr	r1, [r7, #8]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 f9a0 	bl	8002fe8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699a      	ldr	r2, [r3, #24]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6999      	ldr	r1, [r3, #24]
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	021a      	lsls	r2, r3, #8
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	619a      	str	r2, [r3, #24]
      break;
 8002cdc:	e043      	b.n	8002d66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68b9      	ldr	r1, [r7, #8]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 f9f5 	bl	80030d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	69da      	ldr	r2, [r3, #28]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f042 0208 	orr.w	r2, r2, #8
 8002cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	69da      	ldr	r2, [r3, #28]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0204 	bic.w	r2, r2, #4
 8002d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	69d9      	ldr	r1, [r3, #28]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	61da      	str	r2, [r3, #28]
      break;
 8002d1c:	e023      	b.n	8002d66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68b9      	ldr	r1, [r7, #8]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 fa49 	bl	80031bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	69da      	ldr	r2, [r3, #28]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	69da      	ldr	r2, [r3, #28]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	69d9      	ldr	r1, [r3, #28]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	021a      	lsls	r2, r3, #8
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	61da      	str	r2, [r3, #28]
      break;
 8002d5e:	e002      	b.n	8002d66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	75fb      	strb	r3, [r7, #23]
      break;
 8002d64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a40      	ldr	r2, [pc, #256]	; (8002edc <TIM_Base_SetConfig+0x114>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d013      	beq.n	8002e08 <TIM_Base_SetConfig+0x40>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de6:	d00f      	beq.n	8002e08 <TIM_Base_SetConfig+0x40>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a3d      	ldr	r2, [pc, #244]	; (8002ee0 <TIM_Base_SetConfig+0x118>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00b      	beq.n	8002e08 <TIM_Base_SetConfig+0x40>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a3c      	ldr	r2, [pc, #240]	; (8002ee4 <TIM_Base_SetConfig+0x11c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d007      	beq.n	8002e08 <TIM_Base_SetConfig+0x40>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a3b      	ldr	r2, [pc, #236]	; (8002ee8 <TIM_Base_SetConfig+0x120>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d003      	beq.n	8002e08 <TIM_Base_SetConfig+0x40>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a3a      	ldr	r2, [pc, #232]	; (8002eec <TIM_Base_SetConfig+0x124>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d108      	bne.n	8002e1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a2f      	ldr	r2, [pc, #188]	; (8002edc <TIM_Base_SetConfig+0x114>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d02b      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e28:	d027      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a2c      	ldr	r2, [pc, #176]	; (8002ee0 <TIM_Base_SetConfig+0x118>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d023      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a2b      	ldr	r2, [pc, #172]	; (8002ee4 <TIM_Base_SetConfig+0x11c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d01f      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a2a      	ldr	r2, [pc, #168]	; (8002ee8 <TIM_Base_SetConfig+0x120>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d01b      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a29      	ldr	r2, [pc, #164]	; (8002eec <TIM_Base_SetConfig+0x124>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d017      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a28      	ldr	r2, [pc, #160]	; (8002ef0 <TIM_Base_SetConfig+0x128>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d013      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a27      	ldr	r2, [pc, #156]	; (8002ef4 <TIM_Base_SetConfig+0x12c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00f      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a26      	ldr	r2, [pc, #152]	; (8002ef8 <TIM_Base_SetConfig+0x130>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00b      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a25      	ldr	r2, [pc, #148]	; (8002efc <TIM_Base_SetConfig+0x134>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d007      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a24      	ldr	r2, [pc, #144]	; (8002f00 <TIM_Base_SetConfig+0x138>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d003      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a23      	ldr	r2, [pc, #140]	; (8002f04 <TIM_Base_SetConfig+0x13c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d108      	bne.n	8002e8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a0a      	ldr	r2, [pc, #40]	; (8002edc <TIM_Base_SetConfig+0x114>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d003      	beq.n	8002ec0 <TIM_Base_SetConfig+0xf8>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a0c      	ldr	r2, [pc, #48]	; (8002eec <TIM_Base_SetConfig+0x124>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d103      	bne.n	8002ec8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	615a      	str	r2, [r3, #20]
}
 8002ece:	bf00      	nop
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40010000 	.word	0x40010000
 8002ee0:	40000400 	.word	0x40000400
 8002ee4:	40000800 	.word	0x40000800
 8002ee8:	40000c00 	.word	0x40000c00
 8002eec:	40010400 	.word	0x40010400
 8002ef0:	40014000 	.word	0x40014000
 8002ef4:	40014400 	.word	0x40014400
 8002ef8:	40014800 	.word	0x40014800
 8002efc:	40001800 	.word	0x40001800
 8002f00:	40001c00 	.word	0x40001c00
 8002f04:	40002000 	.word	0x40002000

08002f08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	f023 0201 	bic.w	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0303 	bic.w	r3, r3, #3
 8002f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f023 0302 	bic.w	r3, r3, #2
 8002f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a20      	ldr	r2, [pc, #128]	; (8002fe0 <TIM_OC1_SetConfig+0xd8>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d003      	beq.n	8002f6c <TIM_OC1_SetConfig+0x64>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a1f      	ldr	r2, [pc, #124]	; (8002fe4 <TIM_OC1_SetConfig+0xdc>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d10c      	bne.n	8002f86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f023 0308 	bic.w	r3, r3, #8
 8002f72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f023 0304 	bic.w	r3, r3, #4
 8002f84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a15      	ldr	r2, [pc, #84]	; (8002fe0 <TIM_OC1_SetConfig+0xd8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d003      	beq.n	8002f96 <TIM_OC1_SetConfig+0x8e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a14      	ldr	r2, [pc, #80]	; (8002fe4 <TIM_OC1_SetConfig+0xdc>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d111      	bne.n	8002fba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	621a      	str	r2, [r3, #32]
}
 8002fd4:	bf00      	nop
 8002fd6:	371c      	adds	r7, #28
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	40010000 	.word	0x40010000
 8002fe4:	40010400 	.word	0x40010400

08002fe8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	f023 0210 	bic.w	r2, r3, #16
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800301e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	021b      	lsls	r3, r3, #8
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4313      	orrs	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f023 0320 	bic.w	r3, r3, #32
 8003032:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	4313      	orrs	r3, r2
 800303e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a22      	ldr	r2, [pc, #136]	; (80030cc <TIM_OC2_SetConfig+0xe4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d003      	beq.n	8003050 <TIM_OC2_SetConfig+0x68>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a21      	ldr	r2, [pc, #132]	; (80030d0 <TIM_OC2_SetConfig+0xe8>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d10d      	bne.n	800306c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	4313      	orrs	r3, r2
 8003062:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800306a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a17      	ldr	r2, [pc, #92]	; (80030cc <TIM_OC2_SetConfig+0xe4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d003      	beq.n	800307c <TIM_OC2_SetConfig+0x94>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a16      	ldr	r2, [pc, #88]	; (80030d0 <TIM_OC2_SetConfig+0xe8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d113      	bne.n	80030a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003082:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800308a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	621a      	str	r2, [r3, #32]
}
 80030be:	bf00      	nop
 80030c0:	371c      	adds	r7, #28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40010000 	.word	0x40010000
 80030d0:	40010400 	.word	0x40010400

080030d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f023 0303 	bic.w	r3, r3, #3
 800310a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4313      	orrs	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800311c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	021b      	lsls	r3, r3, #8
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	4313      	orrs	r3, r2
 8003128:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a21      	ldr	r2, [pc, #132]	; (80031b4 <TIM_OC3_SetConfig+0xe0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d003      	beq.n	800313a <TIM_OC3_SetConfig+0x66>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a20      	ldr	r2, [pc, #128]	; (80031b8 <TIM_OC3_SetConfig+0xe4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d10d      	bne.n	8003156 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003140:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	4313      	orrs	r3, r2
 800314c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003154:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a16      	ldr	r2, [pc, #88]	; (80031b4 <TIM_OC3_SetConfig+0xe0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d003      	beq.n	8003166 <TIM_OC3_SetConfig+0x92>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a15      	ldr	r2, [pc, #84]	; (80031b8 <TIM_OC3_SetConfig+0xe4>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d113      	bne.n	800318e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800316c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	621a      	str	r2, [r3, #32]
}
 80031a8:	bf00      	nop
 80031aa:	371c      	adds	r7, #28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	40010000 	.word	0x40010000
 80031b8:	40010400 	.word	0x40010400

080031bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	021b      	lsls	r3, r3, #8
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003206:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	031b      	lsls	r3, r3, #12
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a12      	ldr	r2, [pc, #72]	; (8003260 <TIM_OC4_SetConfig+0xa4>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d003      	beq.n	8003224 <TIM_OC4_SetConfig+0x68>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a11      	ldr	r2, [pc, #68]	; (8003264 <TIM_OC4_SetConfig+0xa8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d109      	bne.n	8003238 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800322a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	019b      	lsls	r3, r3, #6
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	4313      	orrs	r3, r2
 8003236:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	621a      	str	r2, [r3, #32]
}
 8003252:	bf00      	nop
 8003254:	371c      	adds	r7, #28
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	40010000 	.word	0x40010000
 8003264:	40010400 	.word	0x40010400

08003268 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f003 031f 	and.w	r3, r3, #31
 800327a:	2201      	movs	r2, #1
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a1a      	ldr	r2, [r3, #32]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	43db      	mvns	r3, r3
 800328a:	401a      	ands	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a1a      	ldr	r2, [r3, #32]
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f003 031f 	and.w	r3, r3, #31
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	fa01 f303 	lsl.w	r3, r1, r3
 80032a0:	431a      	orrs	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	621a      	str	r2, [r3, #32]
}
 80032a6:	bf00      	nop
 80032a8:	371c      	adds	r7, #28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
	...

080032b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e05a      	b.n	8003382 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a21      	ldr	r2, [pc, #132]	; (8003390 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d022      	beq.n	8003356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003318:	d01d      	beq.n	8003356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a1d      	ldr	r2, [pc, #116]	; (8003394 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d018      	beq.n	8003356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a1b      	ldr	r2, [pc, #108]	; (8003398 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d013      	beq.n	8003356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a1a      	ldr	r2, [pc, #104]	; (800339c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d00e      	beq.n	8003356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a18      	ldr	r2, [pc, #96]	; (80033a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d009      	beq.n	8003356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a17      	ldr	r2, [pc, #92]	; (80033a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d004      	beq.n	8003356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a15      	ldr	r2, [pc, #84]	; (80033a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d10c      	bne.n	8003370 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800335c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	4313      	orrs	r3, r2
 8003366:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40010000 	.word	0x40010000
 8003394:	40000400 	.word	0x40000400
 8003398:	40000800 	.word	0x40000800
 800339c:	40000c00 	.word	0x40000c00
 80033a0:	40010400 	.word	0x40010400
 80033a4:	40014000 	.word	0x40014000
 80033a8:	40001800 	.word	0x40001800

080033ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e03d      	b.n	8003444 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4313      	orrs	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	4313      	orrs	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	4313      	orrs	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e03f      	b.n	800350a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d106      	bne.n	80034a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fe f87c 	bl	800159c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2224      	movs	r2, #36	; 0x24
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f9cb 	bl	8003858 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695a      	ldr	r2, [r3, #20]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b08a      	sub	sp, #40	; 0x28
 8003516:	af02      	add	r7, sp, #8
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	603b      	str	r3, [r7, #0]
 800351e:	4613      	mov	r3, r2
 8003520:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b20      	cmp	r3, #32
 8003530:	d17c      	bne.n	800362c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <HAL_UART_Transmit+0x2c>
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e075      	b.n	800362e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_UART_Transmit+0x3e>
 800354c:	2302      	movs	r3, #2
 800354e:	e06e      	b.n	800362e <HAL_UART_Transmit+0x11c>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2221      	movs	r2, #33	; 0x21
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003566:	f7fe f8f1 	bl	800174c <HAL_GetTick>
 800356a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	88fa      	ldrh	r2, [r7, #6]
 8003570:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	88fa      	ldrh	r2, [r7, #6]
 8003576:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003580:	d108      	bne.n	8003594 <HAL_UART_Transmit+0x82>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d104      	bne.n	8003594 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800358a:	2300      	movs	r3, #0
 800358c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	61bb      	str	r3, [r7, #24]
 8003592:	e003      	b.n	800359c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003598:	2300      	movs	r3, #0
 800359a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80035a4:	e02a      	b.n	80035fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2200      	movs	r2, #0
 80035ae:	2180      	movs	r1, #128	; 0x80
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 f8e2 	bl	800377a <UART_WaitOnFlagUntilTimeout>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e036      	b.n	800362e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10b      	bne.n	80035de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	3302      	adds	r3, #2
 80035da:	61bb      	str	r3, [r7, #24]
 80035dc:	e007      	b.n	80035ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	781a      	ldrb	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	3301      	adds	r3, #1
 80035ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1cf      	bne.n	80035a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2200      	movs	r2, #0
 800360e:	2140      	movs	r1, #64	; 0x40
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 f8b2 	bl	800377a <UART_WaitOnFlagUntilTimeout>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e006      	b.n	800362e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003628:	2300      	movs	r3, #0
 800362a:	e000      	b.n	800362e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800362c:	2302      	movs	r3, #2
  }
}
 800362e:	4618      	mov	r0, r3
 8003630:	3720      	adds	r7, #32
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b08a      	sub	sp, #40	; 0x28
 800363a:	af02      	add	r7, sp, #8
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	603b      	str	r3, [r7, #0]
 8003642:	4613      	mov	r3, r2
 8003644:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b20      	cmp	r3, #32
 8003654:	f040 808c 	bne.w	8003770 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <HAL_UART_Receive+0x2e>
 800365e:	88fb      	ldrh	r3, [r7, #6]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e084      	b.n	8003772 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800366e:	2b01      	cmp	r3, #1
 8003670:	d101      	bne.n	8003676 <HAL_UART_Receive+0x40>
 8003672:	2302      	movs	r3, #2
 8003674:	e07d      	b.n	8003772 <HAL_UART_Receive+0x13c>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2222      	movs	r2, #34	; 0x22
 8003688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003692:	f7fe f85b 	bl	800174c <HAL_GetTick>
 8003696:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	88fa      	ldrh	r2, [r7, #6]
 800369c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	88fa      	ldrh	r2, [r7, #6]
 80036a2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ac:	d108      	bne.n	80036c0 <HAL_UART_Receive+0x8a>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d104      	bne.n	80036c0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80036b6:	2300      	movs	r3, #0
 80036b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	61bb      	str	r3, [r7, #24]
 80036be:	e003      	b.n	80036c8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80036d0:	e043      	b.n	800375a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2200      	movs	r2, #0
 80036da:	2120      	movs	r1, #32
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 f84c 	bl	800377a <UART_WaitOnFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e042      	b.n	8003772 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10c      	bne.n	800370c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036fe:	b29a      	uxth	r2, r3
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	3302      	adds	r3, #2
 8003708:	61bb      	str	r3, [r7, #24]
 800370a:	e01f      	b.n	800374c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003714:	d007      	beq.n	8003726 <HAL_UART_Receive+0xf0>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10a      	bne.n	8003734 <HAL_UART_Receive+0xfe>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	b2da      	uxtb	r2, r3
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	701a      	strb	r2, [r3, #0]
 8003732:	e008      	b.n	8003746 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	b2db      	uxtb	r3, r3
 800373c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003740:	b2da      	uxtb	r2, r3
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	3301      	adds	r3, #1
 800374a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003750:	b29b      	uxth	r3, r3
 8003752:	3b01      	subs	r3, #1
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800375e:	b29b      	uxth	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1b6      	bne.n	80036d2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	e000      	b.n	8003772 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003770:	2302      	movs	r3, #2
  }
}
 8003772:	4618      	mov	r0, r3
 8003774:	3720      	adds	r7, #32
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b090      	sub	sp, #64	; 0x40
 800377e:	af00      	add	r7, sp, #0
 8003780:	60f8      	str	r0, [r7, #12]
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	603b      	str	r3, [r7, #0]
 8003786:	4613      	mov	r3, r2
 8003788:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800378a:	e050      	b.n	800382e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800378e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003792:	d04c      	beq.n	800382e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003796:	2b00      	cmp	r3, #0
 8003798:	d007      	beq.n	80037aa <UART_WaitOnFlagUntilTimeout+0x30>
 800379a:	f7fd ffd7 	bl	800174c <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d241      	bcs.n	800382e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	330c      	adds	r3, #12
 80037b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b4:	e853 3f00 	ldrex	r3, [r3]
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	330c      	adds	r3, #12
 80037c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037ca:	637a      	str	r2, [r7, #52]	; 0x34
 80037cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037d2:	e841 2300 	strex	r3, r2, [r1]
 80037d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1e5      	bne.n	80037aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3314      	adds	r3, #20
 80037e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	e853 3f00 	ldrex	r3, [r3]
 80037ec:	613b      	str	r3, [r7, #16]
   return(result);
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f023 0301 	bic.w	r3, r3, #1
 80037f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	3314      	adds	r3, #20
 80037fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037fe:	623a      	str	r2, [r7, #32]
 8003800:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003802:	69f9      	ldr	r1, [r7, #28]
 8003804:	6a3a      	ldr	r2, [r7, #32]
 8003806:	e841 2300 	strex	r3, r2, [r1]
 800380a:	61bb      	str	r3, [r7, #24]
   return(result);
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1e5      	bne.n	80037de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2220      	movs	r2, #32
 800381e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e00f      	b.n	800384e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	4013      	ands	r3, r2
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	429a      	cmp	r2, r3
 800383c:	bf0c      	ite	eq
 800383e:	2301      	moveq	r3, #1
 8003840:	2300      	movne	r3, #0
 8003842:	b2db      	uxtb	r3, r3
 8003844:	461a      	mov	r2, r3
 8003846:	79fb      	ldrb	r3, [r7, #7]
 8003848:	429a      	cmp	r2, r3
 800384a:	d09f      	beq.n	800378c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3740      	adds	r7, #64	; 0x40
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800385c:	b0c0      	sub	sp, #256	; 0x100
 800385e:	af00      	add	r7, sp, #0
 8003860:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003874:	68d9      	ldr	r1, [r3, #12]
 8003876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	ea40 0301 	orr.w	r3, r0, r1
 8003880:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	431a      	orrs	r2, r3
 8003890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	431a      	orrs	r2, r3
 8003898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038b0:	f021 010c 	bic.w	r1, r1, #12
 80038b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038be:	430b      	orrs	r3, r1
 80038c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80038ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d2:	6999      	ldr	r1, [r3, #24]
 80038d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	ea40 0301 	orr.w	r3, r0, r1
 80038de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	4b8f      	ldr	r3, [pc, #572]	; (8003b24 <UART_SetConfig+0x2cc>)
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d005      	beq.n	80038f8 <UART_SetConfig+0xa0>
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	4b8d      	ldr	r3, [pc, #564]	; (8003b28 <UART_SetConfig+0x2d0>)
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d104      	bne.n	8003902 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038f8:	f7fe fe5a 	bl	80025b0 <HAL_RCC_GetPCLK2Freq>
 80038fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003900:	e003      	b.n	800390a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003902:	f7fe fe41 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
 8003906:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800390a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003914:	f040 810c 	bne.w	8003b30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003918:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800391c:	2200      	movs	r2, #0
 800391e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003922:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003926:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800392a:	4622      	mov	r2, r4
 800392c:	462b      	mov	r3, r5
 800392e:	1891      	adds	r1, r2, r2
 8003930:	65b9      	str	r1, [r7, #88]	; 0x58
 8003932:	415b      	adcs	r3, r3
 8003934:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003936:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800393a:	4621      	mov	r1, r4
 800393c:	eb12 0801 	adds.w	r8, r2, r1
 8003940:	4629      	mov	r1, r5
 8003942:	eb43 0901 	adc.w	r9, r3, r1
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	f04f 0300 	mov.w	r3, #0
 800394e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003952:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003956:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800395a:	4690      	mov	r8, r2
 800395c:	4699      	mov	r9, r3
 800395e:	4623      	mov	r3, r4
 8003960:	eb18 0303 	adds.w	r3, r8, r3
 8003964:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003968:	462b      	mov	r3, r5
 800396a:	eb49 0303 	adc.w	r3, r9, r3
 800396e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800397e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003982:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003986:	460b      	mov	r3, r1
 8003988:	18db      	adds	r3, r3, r3
 800398a:	653b      	str	r3, [r7, #80]	; 0x50
 800398c:	4613      	mov	r3, r2
 800398e:	eb42 0303 	adc.w	r3, r2, r3
 8003992:	657b      	str	r3, [r7, #84]	; 0x54
 8003994:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003998:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800399c:	f7fc fc80 	bl	80002a0 <__aeabi_uldivmod>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	4b61      	ldr	r3, [pc, #388]	; (8003b2c <UART_SetConfig+0x2d4>)
 80039a6:	fba3 2302 	umull	r2, r3, r3, r2
 80039aa:	095b      	lsrs	r3, r3, #5
 80039ac:	011c      	lsls	r4, r3, #4
 80039ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039b2:	2200      	movs	r2, #0
 80039b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80039bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80039c0:	4642      	mov	r2, r8
 80039c2:	464b      	mov	r3, r9
 80039c4:	1891      	adds	r1, r2, r2
 80039c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80039c8:	415b      	adcs	r3, r3
 80039ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80039d0:	4641      	mov	r1, r8
 80039d2:	eb12 0a01 	adds.w	sl, r2, r1
 80039d6:	4649      	mov	r1, r9
 80039d8:	eb43 0b01 	adc.w	fp, r3, r1
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039f0:	4692      	mov	sl, r2
 80039f2:	469b      	mov	fp, r3
 80039f4:	4643      	mov	r3, r8
 80039f6:	eb1a 0303 	adds.w	r3, sl, r3
 80039fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039fe:	464b      	mov	r3, r9
 8003a00:	eb4b 0303 	adc.w	r3, fp, r3
 8003a04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a14:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	18db      	adds	r3, r3, r3
 8003a20:	643b      	str	r3, [r7, #64]	; 0x40
 8003a22:	4613      	mov	r3, r2
 8003a24:	eb42 0303 	adc.w	r3, r2, r3
 8003a28:	647b      	str	r3, [r7, #68]	; 0x44
 8003a2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a32:	f7fc fc35 	bl	80002a0 <__aeabi_uldivmod>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	4b3b      	ldr	r3, [pc, #236]	; (8003b2c <UART_SetConfig+0x2d4>)
 8003a3e:	fba3 2301 	umull	r2, r3, r3, r1
 8003a42:	095b      	lsrs	r3, r3, #5
 8003a44:	2264      	movs	r2, #100	; 0x64
 8003a46:	fb02 f303 	mul.w	r3, r2, r3
 8003a4a:	1acb      	subs	r3, r1, r3
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a52:	4b36      	ldr	r3, [pc, #216]	; (8003b2c <UART_SetConfig+0x2d4>)
 8003a54:	fba3 2302 	umull	r2, r3, r3, r2
 8003a58:	095b      	lsrs	r3, r3, #5
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a60:	441c      	add	r4, r3
 8003a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a66:	2200      	movs	r2, #0
 8003a68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a6c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a74:	4642      	mov	r2, r8
 8003a76:	464b      	mov	r3, r9
 8003a78:	1891      	adds	r1, r2, r2
 8003a7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a7c:	415b      	adcs	r3, r3
 8003a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a84:	4641      	mov	r1, r8
 8003a86:	1851      	adds	r1, r2, r1
 8003a88:	6339      	str	r1, [r7, #48]	; 0x30
 8003a8a:	4649      	mov	r1, r9
 8003a8c:	414b      	adcs	r3, r1
 8003a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a9c:	4659      	mov	r1, fp
 8003a9e:	00cb      	lsls	r3, r1, #3
 8003aa0:	4651      	mov	r1, sl
 8003aa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aa6:	4651      	mov	r1, sl
 8003aa8:	00ca      	lsls	r2, r1, #3
 8003aaa:	4610      	mov	r0, r2
 8003aac:	4619      	mov	r1, r3
 8003aae:	4603      	mov	r3, r0
 8003ab0:	4642      	mov	r2, r8
 8003ab2:	189b      	adds	r3, r3, r2
 8003ab4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ab8:	464b      	mov	r3, r9
 8003aba:	460a      	mov	r2, r1
 8003abc:	eb42 0303 	adc.w	r3, r2, r3
 8003ac0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ad0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ad4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ad8:	460b      	mov	r3, r1
 8003ada:	18db      	adds	r3, r3, r3
 8003adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ade:	4613      	mov	r3, r2
 8003ae0:	eb42 0303 	adc.w	r3, r2, r3
 8003ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ae6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003aea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003aee:	f7fc fbd7 	bl	80002a0 <__aeabi_uldivmod>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4b0d      	ldr	r3, [pc, #52]	; (8003b2c <UART_SetConfig+0x2d4>)
 8003af8:	fba3 1302 	umull	r1, r3, r3, r2
 8003afc:	095b      	lsrs	r3, r3, #5
 8003afe:	2164      	movs	r1, #100	; 0x64
 8003b00:	fb01 f303 	mul.w	r3, r1, r3
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	3332      	adds	r3, #50	; 0x32
 8003b0a:	4a08      	ldr	r2, [pc, #32]	; (8003b2c <UART_SetConfig+0x2d4>)
 8003b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b10:	095b      	lsrs	r3, r3, #5
 8003b12:	f003 0207 	and.w	r2, r3, #7
 8003b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4422      	add	r2, r4
 8003b1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b20:	e105      	b.n	8003d2e <UART_SetConfig+0x4d6>
 8003b22:	bf00      	nop
 8003b24:	40011000 	.word	0x40011000
 8003b28:	40011400 	.word	0x40011400
 8003b2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b34:	2200      	movs	r2, #0
 8003b36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b42:	4642      	mov	r2, r8
 8003b44:	464b      	mov	r3, r9
 8003b46:	1891      	adds	r1, r2, r2
 8003b48:	6239      	str	r1, [r7, #32]
 8003b4a:	415b      	adcs	r3, r3
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b52:	4641      	mov	r1, r8
 8003b54:	1854      	adds	r4, r2, r1
 8003b56:	4649      	mov	r1, r9
 8003b58:	eb43 0501 	adc.w	r5, r3, r1
 8003b5c:	f04f 0200 	mov.w	r2, #0
 8003b60:	f04f 0300 	mov.w	r3, #0
 8003b64:	00eb      	lsls	r3, r5, #3
 8003b66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b6a:	00e2      	lsls	r2, r4, #3
 8003b6c:	4614      	mov	r4, r2
 8003b6e:	461d      	mov	r5, r3
 8003b70:	4643      	mov	r3, r8
 8003b72:	18e3      	adds	r3, r4, r3
 8003b74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b78:	464b      	mov	r3, r9
 8003b7a:	eb45 0303 	adc.w	r3, r5, r3
 8003b7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	f04f 0300 	mov.w	r3, #0
 8003b9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b9e:	4629      	mov	r1, r5
 8003ba0:	008b      	lsls	r3, r1, #2
 8003ba2:	4621      	mov	r1, r4
 8003ba4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ba8:	4621      	mov	r1, r4
 8003baa:	008a      	lsls	r2, r1, #2
 8003bac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003bb0:	f7fc fb76 	bl	80002a0 <__aeabi_uldivmod>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	4b60      	ldr	r3, [pc, #384]	; (8003d3c <UART_SetConfig+0x4e4>)
 8003bba:	fba3 2302 	umull	r2, r3, r3, r2
 8003bbe:	095b      	lsrs	r3, r3, #5
 8003bc0:	011c      	lsls	r4, r3, #4
 8003bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bcc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003bd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003bd4:	4642      	mov	r2, r8
 8003bd6:	464b      	mov	r3, r9
 8003bd8:	1891      	adds	r1, r2, r2
 8003bda:	61b9      	str	r1, [r7, #24]
 8003bdc:	415b      	adcs	r3, r3
 8003bde:	61fb      	str	r3, [r7, #28]
 8003be0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003be4:	4641      	mov	r1, r8
 8003be6:	1851      	adds	r1, r2, r1
 8003be8:	6139      	str	r1, [r7, #16]
 8003bea:	4649      	mov	r1, r9
 8003bec:	414b      	adcs	r3, r1
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	f04f 0300 	mov.w	r3, #0
 8003bf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bfc:	4659      	mov	r1, fp
 8003bfe:	00cb      	lsls	r3, r1, #3
 8003c00:	4651      	mov	r1, sl
 8003c02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c06:	4651      	mov	r1, sl
 8003c08:	00ca      	lsls	r2, r1, #3
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4603      	mov	r3, r0
 8003c10:	4642      	mov	r2, r8
 8003c12:	189b      	adds	r3, r3, r2
 8003c14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c18:	464b      	mov	r3, r9
 8003c1a:	460a      	mov	r2, r1
 8003c1c:	eb42 0303 	adc.w	r3, r2, r3
 8003c20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c3c:	4649      	mov	r1, r9
 8003c3e:	008b      	lsls	r3, r1, #2
 8003c40:	4641      	mov	r1, r8
 8003c42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c46:	4641      	mov	r1, r8
 8003c48:	008a      	lsls	r2, r1, #2
 8003c4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c4e:	f7fc fb27 	bl	80002a0 <__aeabi_uldivmod>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4b39      	ldr	r3, [pc, #228]	; (8003d3c <UART_SetConfig+0x4e4>)
 8003c58:	fba3 1302 	umull	r1, r3, r3, r2
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	2164      	movs	r1, #100	; 0x64
 8003c60:	fb01 f303 	mul.w	r3, r1, r3
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	3332      	adds	r3, #50	; 0x32
 8003c6a:	4a34      	ldr	r2, [pc, #208]	; (8003d3c <UART_SetConfig+0x4e4>)
 8003c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c76:	441c      	add	r4, r3
 8003c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	673b      	str	r3, [r7, #112]	; 0x70
 8003c80:	677a      	str	r2, [r7, #116]	; 0x74
 8003c82:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c86:	4642      	mov	r2, r8
 8003c88:	464b      	mov	r3, r9
 8003c8a:	1891      	adds	r1, r2, r2
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	415b      	adcs	r3, r3
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c96:	4641      	mov	r1, r8
 8003c98:	1851      	adds	r1, r2, r1
 8003c9a:	6039      	str	r1, [r7, #0]
 8003c9c:	4649      	mov	r1, r9
 8003c9e:	414b      	adcs	r3, r1
 8003ca0:	607b      	str	r3, [r7, #4]
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	f04f 0300 	mov.w	r3, #0
 8003caa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003cae:	4659      	mov	r1, fp
 8003cb0:	00cb      	lsls	r3, r1, #3
 8003cb2:	4651      	mov	r1, sl
 8003cb4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cb8:	4651      	mov	r1, sl
 8003cba:	00ca      	lsls	r2, r1, #3
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	4642      	mov	r2, r8
 8003cc4:	189b      	adds	r3, r3, r2
 8003cc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cc8:	464b      	mov	r3, r9
 8003cca:	460a      	mov	r2, r1
 8003ccc:	eb42 0303 	adc.w	r3, r2, r3
 8003cd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	663b      	str	r3, [r7, #96]	; 0x60
 8003cdc:	667a      	str	r2, [r7, #100]	; 0x64
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	f04f 0300 	mov.w	r3, #0
 8003ce6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003cea:	4649      	mov	r1, r9
 8003cec:	008b      	lsls	r3, r1, #2
 8003cee:	4641      	mov	r1, r8
 8003cf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cf4:	4641      	mov	r1, r8
 8003cf6:	008a      	lsls	r2, r1, #2
 8003cf8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003cfc:	f7fc fad0 	bl	80002a0 <__aeabi_uldivmod>
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4b0d      	ldr	r3, [pc, #52]	; (8003d3c <UART_SetConfig+0x4e4>)
 8003d06:	fba3 1302 	umull	r1, r3, r3, r2
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	2164      	movs	r1, #100	; 0x64
 8003d0e:	fb01 f303 	mul.w	r3, r1, r3
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	3332      	adds	r3, #50	; 0x32
 8003d18:	4a08      	ldr	r2, [pc, #32]	; (8003d3c <UART_SetConfig+0x4e4>)
 8003d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	f003 020f 	and.w	r2, r3, #15
 8003d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4422      	add	r2, r4
 8003d2c:	609a      	str	r2, [r3, #8]
}
 8003d2e:	bf00      	nop
 8003d30:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d34:	46bd      	mov	sp, r7
 8003d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d3a:	bf00      	nop
 8003d3c:	51eb851f 	.word	0x51eb851f

08003d40 <__errno>:
 8003d40:	4b01      	ldr	r3, [pc, #4]	; (8003d48 <__errno+0x8>)
 8003d42:	6818      	ldr	r0, [r3, #0]
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	200001d0 	.word	0x200001d0

08003d4c <__libc_init_array>:
 8003d4c:	b570      	push	{r4, r5, r6, lr}
 8003d4e:	4d0d      	ldr	r5, [pc, #52]	; (8003d84 <__libc_init_array+0x38>)
 8003d50:	4c0d      	ldr	r4, [pc, #52]	; (8003d88 <__libc_init_array+0x3c>)
 8003d52:	1b64      	subs	r4, r4, r5
 8003d54:	10a4      	asrs	r4, r4, #2
 8003d56:	2600      	movs	r6, #0
 8003d58:	42a6      	cmp	r6, r4
 8003d5a:	d109      	bne.n	8003d70 <__libc_init_array+0x24>
 8003d5c:	4d0b      	ldr	r5, [pc, #44]	; (8003d8c <__libc_init_array+0x40>)
 8003d5e:	4c0c      	ldr	r4, [pc, #48]	; (8003d90 <__libc_init_array+0x44>)
 8003d60:	f001 f88e 	bl	8004e80 <_init>
 8003d64:	1b64      	subs	r4, r4, r5
 8003d66:	10a4      	asrs	r4, r4, #2
 8003d68:	2600      	movs	r6, #0
 8003d6a:	42a6      	cmp	r6, r4
 8003d6c:	d105      	bne.n	8003d7a <__libc_init_array+0x2e>
 8003d6e:	bd70      	pop	{r4, r5, r6, pc}
 8003d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d74:	4798      	blx	r3
 8003d76:	3601      	adds	r6, #1
 8003d78:	e7ee      	b.n	8003d58 <__libc_init_array+0xc>
 8003d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d7e:	4798      	blx	r3
 8003d80:	3601      	adds	r6, #1
 8003d82:	e7f2      	b.n	8003d6a <__libc_init_array+0x1e>
 8003d84:	08004ff8 	.word	0x08004ff8
 8003d88:	08004ff8 	.word	0x08004ff8
 8003d8c:	08004ff8 	.word	0x08004ff8
 8003d90:	08004ffc 	.word	0x08004ffc

08003d94 <memset>:
 8003d94:	4402      	add	r2, r0
 8003d96:	4603      	mov	r3, r0
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d100      	bne.n	8003d9e <memset+0xa>
 8003d9c:	4770      	bx	lr
 8003d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003da2:	e7f9      	b.n	8003d98 <memset+0x4>

08003da4 <_puts_r>:
 8003da4:	b570      	push	{r4, r5, r6, lr}
 8003da6:	460e      	mov	r6, r1
 8003da8:	4605      	mov	r5, r0
 8003daa:	b118      	cbz	r0, 8003db4 <_puts_r+0x10>
 8003dac:	6983      	ldr	r3, [r0, #24]
 8003dae:	b90b      	cbnz	r3, 8003db4 <_puts_r+0x10>
 8003db0:	f000 fa68 	bl	8004284 <__sinit>
 8003db4:	69ab      	ldr	r3, [r5, #24]
 8003db6:	68ac      	ldr	r4, [r5, #8]
 8003db8:	b913      	cbnz	r3, 8003dc0 <_puts_r+0x1c>
 8003dba:	4628      	mov	r0, r5
 8003dbc:	f000 fa62 	bl	8004284 <__sinit>
 8003dc0:	4b2c      	ldr	r3, [pc, #176]	; (8003e74 <_puts_r+0xd0>)
 8003dc2:	429c      	cmp	r4, r3
 8003dc4:	d120      	bne.n	8003e08 <_puts_r+0x64>
 8003dc6:	686c      	ldr	r4, [r5, #4]
 8003dc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dca:	07db      	lsls	r3, r3, #31
 8003dcc:	d405      	bmi.n	8003dda <_puts_r+0x36>
 8003dce:	89a3      	ldrh	r3, [r4, #12]
 8003dd0:	0598      	lsls	r0, r3, #22
 8003dd2:	d402      	bmi.n	8003dda <_puts_r+0x36>
 8003dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dd6:	f000 faf3 	bl	80043c0 <__retarget_lock_acquire_recursive>
 8003dda:	89a3      	ldrh	r3, [r4, #12]
 8003ddc:	0719      	lsls	r1, r3, #28
 8003dde:	d51d      	bpl.n	8003e1c <_puts_r+0x78>
 8003de0:	6923      	ldr	r3, [r4, #16]
 8003de2:	b1db      	cbz	r3, 8003e1c <_puts_r+0x78>
 8003de4:	3e01      	subs	r6, #1
 8003de6:	68a3      	ldr	r3, [r4, #8]
 8003de8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003dec:	3b01      	subs	r3, #1
 8003dee:	60a3      	str	r3, [r4, #8]
 8003df0:	bb39      	cbnz	r1, 8003e42 <_puts_r+0x9e>
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	da38      	bge.n	8003e68 <_puts_r+0xc4>
 8003df6:	4622      	mov	r2, r4
 8003df8:	210a      	movs	r1, #10
 8003dfa:	4628      	mov	r0, r5
 8003dfc:	f000 f868 	bl	8003ed0 <__swbuf_r>
 8003e00:	3001      	adds	r0, #1
 8003e02:	d011      	beq.n	8003e28 <_puts_r+0x84>
 8003e04:	250a      	movs	r5, #10
 8003e06:	e011      	b.n	8003e2c <_puts_r+0x88>
 8003e08:	4b1b      	ldr	r3, [pc, #108]	; (8003e78 <_puts_r+0xd4>)
 8003e0a:	429c      	cmp	r4, r3
 8003e0c:	d101      	bne.n	8003e12 <_puts_r+0x6e>
 8003e0e:	68ac      	ldr	r4, [r5, #8]
 8003e10:	e7da      	b.n	8003dc8 <_puts_r+0x24>
 8003e12:	4b1a      	ldr	r3, [pc, #104]	; (8003e7c <_puts_r+0xd8>)
 8003e14:	429c      	cmp	r4, r3
 8003e16:	bf08      	it	eq
 8003e18:	68ec      	ldreq	r4, [r5, #12]
 8003e1a:	e7d5      	b.n	8003dc8 <_puts_r+0x24>
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	4628      	mov	r0, r5
 8003e20:	f000 f8a8 	bl	8003f74 <__swsetup_r>
 8003e24:	2800      	cmp	r0, #0
 8003e26:	d0dd      	beq.n	8003de4 <_puts_r+0x40>
 8003e28:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003e2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e2e:	07da      	lsls	r2, r3, #31
 8003e30:	d405      	bmi.n	8003e3e <_puts_r+0x9a>
 8003e32:	89a3      	ldrh	r3, [r4, #12]
 8003e34:	059b      	lsls	r3, r3, #22
 8003e36:	d402      	bmi.n	8003e3e <_puts_r+0x9a>
 8003e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e3a:	f000 fac2 	bl	80043c2 <__retarget_lock_release_recursive>
 8003e3e:	4628      	mov	r0, r5
 8003e40:	bd70      	pop	{r4, r5, r6, pc}
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	da04      	bge.n	8003e50 <_puts_r+0xac>
 8003e46:	69a2      	ldr	r2, [r4, #24]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	dc06      	bgt.n	8003e5a <_puts_r+0xb6>
 8003e4c:	290a      	cmp	r1, #10
 8003e4e:	d004      	beq.n	8003e5a <_puts_r+0xb6>
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	6022      	str	r2, [r4, #0]
 8003e56:	7019      	strb	r1, [r3, #0]
 8003e58:	e7c5      	b.n	8003de6 <_puts_r+0x42>
 8003e5a:	4622      	mov	r2, r4
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	f000 f837 	bl	8003ed0 <__swbuf_r>
 8003e62:	3001      	adds	r0, #1
 8003e64:	d1bf      	bne.n	8003de6 <_puts_r+0x42>
 8003e66:	e7df      	b.n	8003e28 <_puts_r+0x84>
 8003e68:	6823      	ldr	r3, [r4, #0]
 8003e6a:	250a      	movs	r5, #10
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	6022      	str	r2, [r4, #0]
 8003e70:	701d      	strb	r5, [r3, #0]
 8003e72:	e7db      	b.n	8003e2c <_puts_r+0x88>
 8003e74:	08004f7c 	.word	0x08004f7c
 8003e78:	08004f9c 	.word	0x08004f9c
 8003e7c:	08004f5c 	.word	0x08004f5c

08003e80 <puts>:
 8003e80:	4b02      	ldr	r3, [pc, #8]	; (8003e8c <puts+0xc>)
 8003e82:	4601      	mov	r1, r0
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	f7ff bf8d 	b.w	8003da4 <_puts_r>
 8003e8a:	bf00      	nop
 8003e8c:	200001d0 	.word	0x200001d0

08003e90 <siprintf>:
 8003e90:	b40e      	push	{r1, r2, r3}
 8003e92:	b500      	push	{lr}
 8003e94:	b09c      	sub	sp, #112	; 0x70
 8003e96:	ab1d      	add	r3, sp, #116	; 0x74
 8003e98:	9002      	str	r0, [sp, #8]
 8003e9a:	9006      	str	r0, [sp, #24]
 8003e9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ea0:	4809      	ldr	r0, [pc, #36]	; (8003ec8 <siprintf+0x38>)
 8003ea2:	9107      	str	r1, [sp, #28]
 8003ea4:	9104      	str	r1, [sp, #16]
 8003ea6:	4909      	ldr	r1, [pc, #36]	; (8003ecc <siprintf+0x3c>)
 8003ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003eac:	9105      	str	r1, [sp, #20]
 8003eae:	6800      	ldr	r0, [r0, #0]
 8003eb0:	9301      	str	r3, [sp, #4]
 8003eb2:	a902      	add	r1, sp, #8
 8003eb4:	f000 fc28 	bl	8004708 <_svfiprintf_r>
 8003eb8:	9b02      	ldr	r3, [sp, #8]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	701a      	strb	r2, [r3, #0]
 8003ebe:	b01c      	add	sp, #112	; 0x70
 8003ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ec4:	b003      	add	sp, #12
 8003ec6:	4770      	bx	lr
 8003ec8:	200001d0 	.word	0x200001d0
 8003ecc:	ffff0208 	.word	0xffff0208

08003ed0 <__swbuf_r>:
 8003ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed2:	460e      	mov	r6, r1
 8003ed4:	4614      	mov	r4, r2
 8003ed6:	4605      	mov	r5, r0
 8003ed8:	b118      	cbz	r0, 8003ee2 <__swbuf_r+0x12>
 8003eda:	6983      	ldr	r3, [r0, #24]
 8003edc:	b90b      	cbnz	r3, 8003ee2 <__swbuf_r+0x12>
 8003ede:	f000 f9d1 	bl	8004284 <__sinit>
 8003ee2:	4b21      	ldr	r3, [pc, #132]	; (8003f68 <__swbuf_r+0x98>)
 8003ee4:	429c      	cmp	r4, r3
 8003ee6:	d12b      	bne.n	8003f40 <__swbuf_r+0x70>
 8003ee8:	686c      	ldr	r4, [r5, #4]
 8003eea:	69a3      	ldr	r3, [r4, #24]
 8003eec:	60a3      	str	r3, [r4, #8]
 8003eee:	89a3      	ldrh	r3, [r4, #12]
 8003ef0:	071a      	lsls	r2, r3, #28
 8003ef2:	d52f      	bpl.n	8003f54 <__swbuf_r+0x84>
 8003ef4:	6923      	ldr	r3, [r4, #16]
 8003ef6:	b36b      	cbz	r3, 8003f54 <__swbuf_r+0x84>
 8003ef8:	6923      	ldr	r3, [r4, #16]
 8003efa:	6820      	ldr	r0, [r4, #0]
 8003efc:	1ac0      	subs	r0, r0, r3
 8003efe:	6963      	ldr	r3, [r4, #20]
 8003f00:	b2f6      	uxtb	r6, r6
 8003f02:	4283      	cmp	r3, r0
 8003f04:	4637      	mov	r7, r6
 8003f06:	dc04      	bgt.n	8003f12 <__swbuf_r+0x42>
 8003f08:	4621      	mov	r1, r4
 8003f0a:	4628      	mov	r0, r5
 8003f0c:	f000 f926 	bl	800415c <_fflush_r>
 8003f10:	bb30      	cbnz	r0, 8003f60 <__swbuf_r+0x90>
 8003f12:	68a3      	ldr	r3, [r4, #8]
 8003f14:	3b01      	subs	r3, #1
 8003f16:	60a3      	str	r3, [r4, #8]
 8003f18:	6823      	ldr	r3, [r4, #0]
 8003f1a:	1c5a      	adds	r2, r3, #1
 8003f1c:	6022      	str	r2, [r4, #0]
 8003f1e:	701e      	strb	r6, [r3, #0]
 8003f20:	6963      	ldr	r3, [r4, #20]
 8003f22:	3001      	adds	r0, #1
 8003f24:	4283      	cmp	r3, r0
 8003f26:	d004      	beq.n	8003f32 <__swbuf_r+0x62>
 8003f28:	89a3      	ldrh	r3, [r4, #12]
 8003f2a:	07db      	lsls	r3, r3, #31
 8003f2c:	d506      	bpl.n	8003f3c <__swbuf_r+0x6c>
 8003f2e:	2e0a      	cmp	r6, #10
 8003f30:	d104      	bne.n	8003f3c <__swbuf_r+0x6c>
 8003f32:	4621      	mov	r1, r4
 8003f34:	4628      	mov	r0, r5
 8003f36:	f000 f911 	bl	800415c <_fflush_r>
 8003f3a:	b988      	cbnz	r0, 8003f60 <__swbuf_r+0x90>
 8003f3c:	4638      	mov	r0, r7
 8003f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f40:	4b0a      	ldr	r3, [pc, #40]	; (8003f6c <__swbuf_r+0x9c>)
 8003f42:	429c      	cmp	r4, r3
 8003f44:	d101      	bne.n	8003f4a <__swbuf_r+0x7a>
 8003f46:	68ac      	ldr	r4, [r5, #8]
 8003f48:	e7cf      	b.n	8003eea <__swbuf_r+0x1a>
 8003f4a:	4b09      	ldr	r3, [pc, #36]	; (8003f70 <__swbuf_r+0xa0>)
 8003f4c:	429c      	cmp	r4, r3
 8003f4e:	bf08      	it	eq
 8003f50:	68ec      	ldreq	r4, [r5, #12]
 8003f52:	e7ca      	b.n	8003eea <__swbuf_r+0x1a>
 8003f54:	4621      	mov	r1, r4
 8003f56:	4628      	mov	r0, r5
 8003f58:	f000 f80c 	bl	8003f74 <__swsetup_r>
 8003f5c:	2800      	cmp	r0, #0
 8003f5e:	d0cb      	beq.n	8003ef8 <__swbuf_r+0x28>
 8003f60:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003f64:	e7ea      	b.n	8003f3c <__swbuf_r+0x6c>
 8003f66:	bf00      	nop
 8003f68:	08004f7c 	.word	0x08004f7c
 8003f6c:	08004f9c 	.word	0x08004f9c
 8003f70:	08004f5c 	.word	0x08004f5c

08003f74 <__swsetup_r>:
 8003f74:	4b32      	ldr	r3, [pc, #200]	; (8004040 <__swsetup_r+0xcc>)
 8003f76:	b570      	push	{r4, r5, r6, lr}
 8003f78:	681d      	ldr	r5, [r3, #0]
 8003f7a:	4606      	mov	r6, r0
 8003f7c:	460c      	mov	r4, r1
 8003f7e:	b125      	cbz	r5, 8003f8a <__swsetup_r+0x16>
 8003f80:	69ab      	ldr	r3, [r5, #24]
 8003f82:	b913      	cbnz	r3, 8003f8a <__swsetup_r+0x16>
 8003f84:	4628      	mov	r0, r5
 8003f86:	f000 f97d 	bl	8004284 <__sinit>
 8003f8a:	4b2e      	ldr	r3, [pc, #184]	; (8004044 <__swsetup_r+0xd0>)
 8003f8c:	429c      	cmp	r4, r3
 8003f8e:	d10f      	bne.n	8003fb0 <__swsetup_r+0x3c>
 8003f90:	686c      	ldr	r4, [r5, #4]
 8003f92:	89a3      	ldrh	r3, [r4, #12]
 8003f94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f98:	0719      	lsls	r1, r3, #28
 8003f9a:	d42c      	bmi.n	8003ff6 <__swsetup_r+0x82>
 8003f9c:	06dd      	lsls	r5, r3, #27
 8003f9e:	d411      	bmi.n	8003fc4 <__swsetup_r+0x50>
 8003fa0:	2309      	movs	r3, #9
 8003fa2:	6033      	str	r3, [r6, #0]
 8003fa4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003fa8:	81a3      	strh	r3, [r4, #12]
 8003faa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fae:	e03e      	b.n	800402e <__swsetup_r+0xba>
 8003fb0:	4b25      	ldr	r3, [pc, #148]	; (8004048 <__swsetup_r+0xd4>)
 8003fb2:	429c      	cmp	r4, r3
 8003fb4:	d101      	bne.n	8003fba <__swsetup_r+0x46>
 8003fb6:	68ac      	ldr	r4, [r5, #8]
 8003fb8:	e7eb      	b.n	8003f92 <__swsetup_r+0x1e>
 8003fba:	4b24      	ldr	r3, [pc, #144]	; (800404c <__swsetup_r+0xd8>)
 8003fbc:	429c      	cmp	r4, r3
 8003fbe:	bf08      	it	eq
 8003fc0:	68ec      	ldreq	r4, [r5, #12]
 8003fc2:	e7e6      	b.n	8003f92 <__swsetup_r+0x1e>
 8003fc4:	0758      	lsls	r0, r3, #29
 8003fc6:	d512      	bpl.n	8003fee <__swsetup_r+0x7a>
 8003fc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fca:	b141      	cbz	r1, 8003fde <__swsetup_r+0x6a>
 8003fcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fd0:	4299      	cmp	r1, r3
 8003fd2:	d002      	beq.n	8003fda <__swsetup_r+0x66>
 8003fd4:	4630      	mov	r0, r6
 8003fd6:	f000 fa5b 	bl	8004490 <_free_r>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	6363      	str	r3, [r4, #52]	; 0x34
 8003fde:	89a3      	ldrh	r3, [r4, #12]
 8003fe0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003fe4:	81a3      	strh	r3, [r4, #12]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	6063      	str	r3, [r4, #4]
 8003fea:	6923      	ldr	r3, [r4, #16]
 8003fec:	6023      	str	r3, [r4, #0]
 8003fee:	89a3      	ldrh	r3, [r4, #12]
 8003ff0:	f043 0308 	orr.w	r3, r3, #8
 8003ff4:	81a3      	strh	r3, [r4, #12]
 8003ff6:	6923      	ldr	r3, [r4, #16]
 8003ff8:	b94b      	cbnz	r3, 800400e <__swsetup_r+0x9a>
 8003ffa:	89a3      	ldrh	r3, [r4, #12]
 8003ffc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004004:	d003      	beq.n	800400e <__swsetup_r+0x9a>
 8004006:	4621      	mov	r1, r4
 8004008:	4630      	mov	r0, r6
 800400a:	f000 fa01 	bl	8004410 <__smakebuf_r>
 800400e:	89a0      	ldrh	r0, [r4, #12]
 8004010:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004014:	f010 0301 	ands.w	r3, r0, #1
 8004018:	d00a      	beq.n	8004030 <__swsetup_r+0xbc>
 800401a:	2300      	movs	r3, #0
 800401c:	60a3      	str	r3, [r4, #8]
 800401e:	6963      	ldr	r3, [r4, #20]
 8004020:	425b      	negs	r3, r3
 8004022:	61a3      	str	r3, [r4, #24]
 8004024:	6923      	ldr	r3, [r4, #16]
 8004026:	b943      	cbnz	r3, 800403a <__swsetup_r+0xc6>
 8004028:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800402c:	d1ba      	bne.n	8003fa4 <__swsetup_r+0x30>
 800402e:	bd70      	pop	{r4, r5, r6, pc}
 8004030:	0781      	lsls	r1, r0, #30
 8004032:	bf58      	it	pl
 8004034:	6963      	ldrpl	r3, [r4, #20]
 8004036:	60a3      	str	r3, [r4, #8]
 8004038:	e7f4      	b.n	8004024 <__swsetup_r+0xb0>
 800403a:	2000      	movs	r0, #0
 800403c:	e7f7      	b.n	800402e <__swsetup_r+0xba>
 800403e:	bf00      	nop
 8004040:	200001d0 	.word	0x200001d0
 8004044:	08004f7c 	.word	0x08004f7c
 8004048:	08004f9c 	.word	0x08004f9c
 800404c:	08004f5c 	.word	0x08004f5c

08004050 <__sflush_r>:
 8004050:	898a      	ldrh	r2, [r1, #12]
 8004052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004056:	4605      	mov	r5, r0
 8004058:	0710      	lsls	r0, r2, #28
 800405a:	460c      	mov	r4, r1
 800405c:	d458      	bmi.n	8004110 <__sflush_r+0xc0>
 800405e:	684b      	ldr	r3, [r1, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	dc05      	bgt.n	8004070 <__sflush_r+0x20>
 8004064:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004066:	2b00      	cmp	r3, #0
 8004068:	dc02      	bgt.n	8004070 <__sflush_r+0x20>
 800406a:	2000      	movs	r0, #0
 800406c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004070:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004072:	2e00      	cmp	r6, #0
 8004074:	d0f9      	beq.n	800406a <__sflush_r+0x1a>
 8004076:	2300      	movs	r3, #0
 8004078:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800407c:	682f      	ldr	r7, [r5, #0]
 800407e:	602b      	str	r3, [r5, #0]
 8004080:	d032      	beq.n	80040e8 <__sflush_r+0x98>
 8004082:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004084:	89a3      	ldrh	r3, [r4, #12]
 8004086:	075a      	lsls	r2, r3, #29
 8004088:	d505      	bpl.n	8004096 <__sflush_r+0x46>
 800408a:	6863      	ldr	r3, [r4, #4]
 800408c:	1ac0      	subs	r0, r0, r3
 800408e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004090:	b10b      	cbz	r3, 8004096 <__sflush_r+0x46>
 8004092:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004094:	1ac0      	subs	r0, r0, r3
 8004096:	2300      	movs	r3, #0
 8004098:	4602      	mov	r2, r0
 800409a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800409c:	6a21      	ldr	r1, [r4, #32]
 800409e:	4628      	mov	r0, r5
 80040a0:	47b0      	blx	r6
 80040a2:	1c43      	adds	r3, r0, #1
 80040a4:	89a3      	ldrh	r3, [r4, #12]
 80040a6:	d106      	bne.n	80040b6 <__sflush_r+0x66>
 80040a8:	6829      	ldr	r1, [r5, #0]
 80040aa:	291d      	cmp	r1, #29
 80040ac:	d82c      	bhi.n	8004108 <__sflush_r+0xb8>
 80040ae:	4a2a      	ldr	r2, [pc, #168]	; (8004158 <__sflush_r+0x108>)
 80040b0:	40ca      	lsrs	r2, r1
 80040b2:	07d6      	lsls	r6, r2, #31
 80040b4:	d528      	bpl.n	8004108 <__sflush_r+0xb8>
 80040b6:	2200      	movs	r2, #0
 80040b8:	6062      	str	r2, [r4, #4]
 80040ba:	04d9      	lsls	r1, r3, #19
 80040bc:	6922      	ldr	r2, [r4, #16]
 80040be:	6022      	str	r2, [r4, #0]
 80040c0:	d504      	bpl.n	80040cc <__sflush_r+0x7c>
 80040c2:	1c42      	adds	r2, r0, #1
 80040c4:	d101      	bne.n	80040ca <__sflush_r+0x7a>
 80040c6:	682b      	ldr	r3, [r5, #0]
 80040c8:	b903      	cbnz	r3, 80040cc <__sflush_r+0x7c>
 80040ca:	6560      	str	r0, [r4, #84]	; 0x54
 80040cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040ce:	602f      	str	r7, [r5, #0]
 80040d0:	2900      	cmp	r1, #0
 80040d2:	d0ca      	beq.n	800406a <__sflush_r+0x1a>
 80040d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040d8:	4299      	cmp	r1, r3
 80040da:	d002      	beq.n	80040e2 <__sflush_r+0x92>
 80040dc:	4628      	mov	r0, r5
 80040de:	f000 f9d7 	bl	8004490 <_free_r>
 80040e2:	2000      	movs	r0, #0
 80040e4:	6360      	str	r0, [r4, #52]	; 0x34
 80040e6:	e7c1      	b.n	800406c <__sflush_r+0x1c>
 80040e8:	6a21      	ldr	r1, [r4, #32]
 80040ea:	2301      	movs	r3, #1
 80040ec:	4628      	mov	r0, r5
 80040ee:	47b0      	blx	r6
 80040f0:	1c41      	adds	r1, r0, #1
 80040f2:	d1c7      	bne.n	8004084 <__sflush_r+0x34>
 80040f4:	682b      	ldr	r3, [r5, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0c4      	beq.n	8004084 <__sflush_r+0x34>
 80040fa:	2b1d      	cmp	r3, #29
 80040fc:	d001      	beq.n	8004102 <__sflush_r+0xb2>
 80040fe:	2b16      	cmp	r3, #22
 8004100:	d101      	bne.n	8004106 <__sflush_r+0xb6>
 8004102:	602f      	str	r7, [r5, #0]
 8004104:	e7b1      	b.n	800406a <__sflush_r+0x1a>
 8004106:	89a3      	ldrh	r3, [r4, #12]
 8004108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800410c:	81a3      	strh	r3, [r4, #12]
 800410e:	e7ad      	b.n	800406c <__sflush_r+0x1c>
 8004110:	690f      	ldr	r7, [r1, #16]
 8004112:	2f00      	cmp	r7, #0
 8004114:	d0a9      	beq.n	800406a <__sflush_r+0x1a>
 8004116:	0793      	lsls	r3, r2, #30
 8004118:	680e      	ldr	r6, [r1, #0]
 800411a:	bf08      	it	eq
 800411c:	694b      	ldreq	r3, [r1, #20]
 800411e:	600f      	str	r7, [r1, #0]
 8004120:	bf18      	it	ne
 8004122:	2300      	movne	r3, #0
 8004124:	eba6 0807 	sub.w	r8, r6, r7
 8004128:	608b      	str	r3, [r1, #8]
 800412a:	f1b8 0f00 	cmp.w	r8, #0
 800412e:	dd9c      	ble.n	800406a <__sflush_r+0x1a>
 8004130:	6a21      	ldr	r1, [r4, #32]
 8004132:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004134:	4643      	mov	r3, r8
 8004136:	463a      	mov	r2, r7
 8004138:	4628      	mov	r0, r5
 800413a:	47b0      	blx	r6
 800413c:	2800      	cmp	r0, #0
 800413e:	dc06      	bgt.n	800414e <__sflush_r+0xfe>
 8004140:	89a3      	ldrh	r3, [r4, #12]
 8004142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004146:	81a3      	strh	r3, [r4, #12]
 8004148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800414c:	e78e      	b.n	800406c <__sflush_r+0x1c>
 800414e:	4407      	add	r7, r0
 8004150:	eba8 0800 	sub.w	r8, r8, r0
 8004154:	e7e9      	b.n	800412a <__sflush_r+0xda>
 8004156:	bf00      	nop
 8004158:	20400001 	.word	0x20400001

0800415c <_fflush_r>:
 800415c:	b538      	push	{r3, r4, r5, lr}
 800415e:	690b      	ldr	r3, [r1, #16]
 8004160:	4605      	mov	r5, r0
 8004162:	460c      	mov	r4, r1
 8004164:	b913      	cbnz	r3, 800416c <_fflush_r+0x10>
 8004166:	2500      	movs	r5, #0
 8004168:	4628      	mov	r0, r5
 800416a:	bd38      	pop	{r3, r4, r5, pc}
 800416c:	b118      	cbz	r0, 8004176 <_fflush_r+0x1a>
 800416e:	6983      	ldr	r3, [r0, #24]
 8004170:	b90b      	cbnz	r3, 8004176 <_fflush_r+0x1a>
 8004172:	f000 f887 	bl	8004284 <__sinit>
 8004176:	4b14      	ldr	r3, [pc, #80]	; (80041c8 <_fflush_r+0x6c>)
 8004178:	429c      	cmp	r4, r3
 800417a:	d11b      	bne.n	80041b4 <_fflush_r+0x58>
 800417c:	686c      	ldr	r4, [r5, #4]
 800417e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0ef      	beq.n	8004166 <_fflush_r+0xa>
 8004186:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004188:	07d0      	lsls	r0, r2, #31
 800418a:	d404      	bmi.n	8004196 <_fflush_r+0x3a>
 800418c:	0599      	lsls	r1, r3, #22
 800418e:	d402      	bmi.n	8004196 <_fflush_r+0x3a>
 8004190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004192:	f000 f915 	bl	80043c0 <__retarget_lock_acquire_recursive>
 8004196:	4628      	mov	r0, r5
 8004198:	4621      	mov	r1, r4
 800419a:	f7ff ff59 	bl	8004050 <__sflush_r>
 800419e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041a0:	07da      	lsls	r2, r3, #31
 80041a2:	4605      	mov	r5, r0
 80041a4:	d4e0      	bmi.n	8004168 <_fflush_r+0xc>
 80041a6:	89a3      	ldrh	r3, [r4, #12]
 80041a8:	059b      	lsls	r3, r3, #22
 80041aa:	d4dd      	bmi.n	8004168 <_fflush_r+0xc>
 80041ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041ae:	f000 f908 	bl	80043c2 <__retarget_lock_release_recursive>
 80041b2:	e7d9      	b.n	8004168 <_fflush_r+0xc>
 80041b4:	4b05      	ldr	r3, [pc, #20]	; (80041cc <_fflush_r+0x70>)
 80041b6:	429c      	cmp	r4, r3
 80041b8:	d101      	bne.n	80041be <_fflush_r+0x62>
 80041ba:	68ac      	ldr	r4, [r5, #8]
 80041bc:	e7df      	b.n	800417e <_fflush_r+0x22>
 80041be:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <_fflush_r+0x74>)
 80041c0:	429c      	cmp	r4, r3
 80041c2:	bf08      	it	eq
 80041c4:	68ec      	ldreq	r4, [r5, #12]
 80041c6:	e7da      	b.n	800417e <_fflush_r+0x22>
 80041c8:	08004f7c 	.word	0x08004f7c
 80041cc:	08004f9c 	.word	0x08004f9c
 80041d0:	08004f5c 	.word	0x08004f5c

080041d4 <std>:
 80041d4:	2300      	movs	r3, #0
 80041d6:	b510      	push	{r4, lr}
 80041d8:	4604      	mov	r4, r0
 80041da:	e9c0 3300 	strd	r3, r3, [r0]
 80041de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041e2:	6083      	str	r3, [r0, #8]
 80041e4:	8181      	strh	r1, [r0, #12]
 80041e6:	6643      	str	r3, [r0, #100]	; 0x64
 80041e8:	81c2      	strh	r2, [r0, #14]
 80041ea:	6183      	str	r3, [r0, #24]
 80041ec:	4619      	mov	r1, r3
 80041ee:	2208      	movs	r2, #8
 80041f0:	305c      	adds	r0, #92	; 0x5c
 80041f2:	f7ff fdcf 	bl	8003d94 <memset>
 80041f6:	4b05      	ldr	r3, [pc, #20]	; (800420c <std+0x38>)
 80041f8:	6263      	str	r3, [r4, #36]	; 0x24
 80041fa:	4b05      	ldr	r3, [pc, #20]	; (8004210 <std+0x3c>)
 80041fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80041fe:	4b05      	ldr	r3, [pc, #20]	; (8004214 <std+0x40>)
 8004200:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004202:	4b05      	ldr	r3, [pc, #20]	; (8004218 <std+0x44>)
 8004204:	6224      	str	r4, [r4, #32]
 8004206:	6323      	str	r3, [r4, #48]	; 0x30
 8004208:	bd10      	pop	{r4, pc}
 800420a:	bf00      	nop
 800420c:	08004c51 	.word	0x08004c51
 8004210:	08004c73 	.word	0x08004c73
 8004214:	08004cab 	.word	0x08004cab
 8004218:	08004ccf 	.word	0x08004ccf

0800421c <_cleanup_r>:
 800421c:	4901      	ldr	r1, [pc, #4]	; (8004224 <_cleanup_r+0x8>)
 800421e:	f000 b8af 	b.w	8004380 <_fwalk_reent>
 8004222:	bf00      	nop
 8004224:	0800415d 	.word	0x0800415d

08004228 <__sfmoreglue>:
 8004228:	b570      	push	{r4, r5, r6, lr}
 800422a:	2268      	movs	r2, #104	; 0x68
 800422c:	1e4d      	subs	r5, r1, #1
 800422e:	4355      	muls	r5, r2
 8004230:	460e      	mov	r6, r1
 8004232:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004236:	f000 f997 	bl	8004568 <_malloc_r>
 800423a:	4604      	mov	r4, r0
 800423c:	b140      	cbz	r0, 8004250 <__sfmoreglue+0x28>
 800423e:	2100      	movs	r1, #0
 8004240:	e9c0 1600 	strd	r1, r6, [r0]
 8004244:	300c      	adds	r0, #12
 8004246:	60a0      	str	r0, [r4, #8]
 8004248:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800424c:	f7ff fda2 	bl	8003d94 <memset>
 8004250:	4620      	mov	r0, r4
 8004252:	bd70      	pop	{r4, r5, r6, pc}

08004254 <__sfp_lock_acquire>:
 8004254:	4801      	ldr	r0, [pc, #4]	; (800425c <__sfp_lock_acquire+0x8>)
 8004256:	f000 b8b3 	b.w	80043c0 <__retarget_lock_acquire_recursive>
 800425a:	bf00      	nop
 800425c:	20000395 	.word	0x20000395

08004260 <__sfp_lock_release>:
 8004260:	4801      	ldr	r0, [pc, #4]	; (8004268 <__sfp_lock_release+0x8>)
 8004262:	f000 b8ae 	b.w	80043c2 <__retarget_lock_release_recursive>
 8004266:	bf00      	nop
 8004268:	20000395 	.word	0x20000395

0800426c <__sinit_lock_acquire>:
 800426c:	4801      	ldr	r0, [pc, #4]	; (8004274 <__sinit_lock_acquire+0x8>)
 800426e:	f000 b8a7 	b.w	80043c0 <__retarget_lock_acquire_recursive>
 8004272:	bf00      	nop
 8004274:	20000396 	.word	0x20000396

08004278 <__sinit_lock_release>:
 8004278:	4801      	ldr	r0, [pc, #4]	; (8004280 <__sinit_lock_release+0x8>)
 800427a:	f000 b8a2 	b.w	80043c2 <__retarget_lock_release_recursive>
 800427e:	bf00      	nop
 8004280:	20000396 	.word	0x20000396

08004284 <__sinit>:
 8004284:	b510      	push	{r4, lr}
 8004286:	4604      	mov	r4, r0
 8004288:	f7ff fff0 	bl	800426c <__sinit_lock_acquire>
 800428c:	69a3      	ldr	r3, [r4, #24]
 800428e:	b11b      	cbz	r3, 8004298 <__sinit+0x14>
 8004290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004294:	f7ff bff0 	b.w	8004278 <__sinit_lock_release>
 8004298:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800429c:	6523      	str	r3, [r4, #80]	; 0x50
 800429e:	4b13      	ldr	r3, [pc, #76]	; (80042ec <__sinit+0x68>)
 80042a0:	4a13      	ldr	r2, [pc, #76]	; (80042f0 <__sinit+0x6c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80042a6:	42a3      	cmp	r3, r4
 80042a8:	bf04      	itt	eq
 80042aa:	2301      	moveq	r3, #1
 80042ac:	61a3      	streq	r3, [r4, #24]
 80042ae:	4620      	mov	r0, r4
 80042b0:	f000 f820 	bl	80042f4 <__sfp>
 80042b4:	6060      	str	r0, [r4, #4]
 80042b6:	4620      	mov	r0, r4
 80042b8:	f000 f81c 	bl	80042f4 <__sfp>
 80042bc:	60a0      	str	r0, [r4, #8]
 80042be:	4620      	mov	r0, r4
 80042c0:	f000 f818 	bl	80042f4 <__sfp>
 80042c4:	2200      	movs	r2, #0
 80042c6:	60e0      	str	r0, [r4, #12]
 80042c8:	2104      	movs	r1, #4
 80042ca:	6860      	ldr	r0, [r4, #4]
 80042cc:	f7ff ff82 	bl	80041d4 <std>
 80042d0:	68a0      	ldr	r0, [r4, #8]
 80042d2:	2201      	movs	r2, #1
 80042d4:	2109      	movs	r1, #9
 80042d6:	f7ff ff7d 	bl	80041d4 <std>
 80042da:	68e0      	ldr	r0, [r4, #12]
 80042dc:	2202      	movs	r2, #2
 80042de:	2112      	movs	r1, #18
 80042e0:	f7ff ff78 	bl	80041d4 <std>
 80042e4:	2301      	movs	r3, #1
 80042e6:	61a3      	str	r3, [r4, #24]
 80042e8:	e7d2      	b.n	8004290 <__sinit+0xc>
 80042ea:	bf00      	nop
 80042ec:	08004f58 	.word	0x08004f58
 80042f0:	0800421d 	.word	0x0800421d

080042f4 <__sfp>:
 80042f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f6:	4607      	mov	r7, r0
 80042f8:	f7ff ffac 	bl	8004254 <__sfp_lock_acquire>
 80042fc:	4b1e      	ldr	r3, [pc, #120]	; (8004378 <__sfp+0x84>)
 80042fe:	681e      	ldr	r6, [r3, #0]
 8004300:	69b3      	ldr	r3, [r6, #24]
 8004302:	b913      	cbnz	r3, 800430a <__sfp+0x16>
 8004304:	4630      	mov	r0, r6
 8004306:	f7ff ffbd 	bl	8004284 <__sinit>
 800430a:	3648      	adds	r6, #72	; 0x48
 800430c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004310:	3b01      	subs	r3, #1
 8004312:	d503      	bpl.n	800431c <__sfp+0x28>
 8004314:	6833      	ldr	r3, [r6, #0]
 8004316:	b30b      	cbz	r3, 800435c <__sfp+0x68>
 8004318:	6836      	ldr	r6, [r6, #0]
 800431a:	e7f7      	b.n	800430c <__sfp+0x18>
 800431c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004320:	b9d5      	cbnz	r5, 8004358 <__sfp+0x64>
 8004322:	4b16      	ldr	r3, [pc, #88]	; (800437c <__sfp+0x88>)
 8004324:	60e3      	str	r3, [r4, #12]
 8004326:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800432a:	6665      	str	r5, [r4, #100]	; 0x64
 800432c:	f000 f847 	bl	80043be <__retarget_lock_init_recursive>
 8004330:	f7ff ff96 	bl	8004260 <__sfp_lock_release>
 8004334:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004338:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800433c:	6025      	str	r5, [r4, #0]
 800433e:	61a5      	str	r5, [r4, #24]
 8004340:	2208      	movs	r2, #8
 8004342:	4629      	mov	r1, r5
 8004344:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004348:	f7ff fd24 	bl	8003d94 <memset>
 800434c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004350:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004354:	4620      	mov	r0, r4
 8004356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004358:	3468      	adds	r4, #104	; 0x68
 800435a:	e7d9      	b.n	8004310 <__sfp+0x1c>
 800435c:	2104      	movs	r1, #4
 800435e:	4638      	mov	r0, r7
 8004360:	f7ff ff62 	bl	8004228 <__sfmoreglue>
 8004364:	4604      	mov	r4, r0
 8004366:	6030      	str	r0, [r6, #0]
 8004368:	2800      	cmp	r0, #0
 800436a:	d1d5      	bne.n	8004318 <__sfp+0x24>
 800436c:	f7ff ff78 	bl	8004260 <__sfp_lock_release>
 8004370:	230c      	movs	r3, #12
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	e7ee      	b.n	8004354 <__sfp+0x60>
 8004376:	bf00      	nop
 8004378:	08004f58 	.word	0x08004f58
 800437c:	ffff0001 	.word	0xffff0001

08004380 <_fwalk_reent>:
 8004380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004384:	4606      	mov	r6, r0
 8004386:	4688      	mov	r8, r1
 8004388:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800438c:	2700      	movs	r7, #0
 800438e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004392:	f1b9 0901 	subs.w	r9, r9, #1
 8004396:	d505      	bpl.n	80043a4 <_fwalk_reent+0x24>
 8004398:	6824      	ldr	r4, [r4, #0]
 800439a:	2c00      	cmp	r4, #0
 800439c:	d1f7      	bne.n	800438e <_fwalk_reent+0xe>
 800439e:	4638      	mov	r0, r7
 80043a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043a4:	89ab      	ldrh	r3, [r5, #12]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d907      	bls.n	80043ba <_fwalk_reent+0x3a>
 80043aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043ae:	3301      	adds	r3, #1
 80043b0:	d003      	beq.n	80043ba <_fwalk_reent+0x3a>
 80043b2:	4629      	mov	r1, r5
 80043b4:	4630      	mov	r0, r6
 80043b6:	47c0      	blx	r8
 80043b8:	4307      	orrs	r7, r0
 80043ba:	3568      	adds	r5, #104	; 0x68
 80043bc:	e7e9      	b.n	8004392 <_fwalk_reent+0x12>

080043be <__retarget_lock_init_recursive>:
 80043be:	4770      	bx	lr

080043c0 <__retarget_lock_acquire_recursive>:
 80043c0:	4770      	bx	lr

080043c2 <__retarget_lock_release_recursive>:
 80043c2:	4770      	bx	lr

080043c4 <__swhatbuf_r>:
 80043c4:	b570      	push	{r4, r5, r6, lr}
 80043c6:	460e      	mov	r6, r1
 80043c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043cc:	2900      	cmp	r1, #0
 80043ce:	b096      	sub	sp, #88	; 0x58
 80043d0:	4614      	mov	r4, r2
 80043d2:	461d      	mov	r5, r3
 80043d4:	da08      	bge.n	80043e8 <__swhatbuf_r+0x24>
 80043d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	602a      	str	r2, [r5, #0]
 80043de:	061a      	lsls	r2, r3, #24
 80043e0:	d410      	bmi.n	8004404 <__swhatbuf_r+0x40>
 80043e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043e6:	e00e      	b.n	8004406 <__swhatbuf_r+0x42>
 80043e8:	466a      	mov	r2, sp
 80043ea:	f000 fc97 	bl	8004d1c <_fstat_r>
 80043ee:	2800      	cmp	r0, #0
 80043f0:	dbf1      	blt.n	80043d6 <__swhatbuf_r+0x12>
 80043f2:	9a01      	ldr	r2, [sp, #4]
 80043f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80043f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80043fc:	425a      	negs	r2, r3
 80043fe:	415a      	adcs	r2, r3
 8004400:	602a      	str	r2, [r5, #0]
 8004402:	e7ee      	b.n	80043e2 <__swhatbuf_r+0x1e>
 8004404:	2340      	movs	r3, #64	; 0x40
 8004406:	2000      	movs	r0, #0
 8004408:	6023      	str	r3, [r4, #0]
 800440a:	b016      	add	sp, #88	; 0x58
 800440c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004410 <__smakebuf_r>:
 8004410:	898b      	ldrh	r3, [r1, #12]
 8004412:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004414:	079d      	lsls	r5, r3, #30
 8004416:	4606      	mov	r6, r0
 8004418:	460c      	mov	r4, r1
 800441a:	d507      	bpl.n	800442c <__smakebuf_r+0x1c>
 800441c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004420:	6023      	str	r3, [r4, #0]
 8004422:	6123      	str	r3, [r4, #16]
 8004424:	2301      	movs	r3, #1
 8004426:	6163      	str	r3, [r4, #20]
 8004428:	b002      	add	sp, #8
 800442a:	bd70      	pop	{r4, r5, r6, pc}
 800442c:	ab01      	add	r3, sp, #4
 800442e:	466a      	mov	r2, sp
 8004430:	f7ff ffc8 	bl	80043c4 <__swhatbuf_r>
 8004434:	9900      	ldr	r1, [sp, #0]
 8004436:	4605      	mov	r5, r0
 8004438:	4630      	mov	r0, r6
 800443a:	f000 f895 	bl	8004568 <_malloc_r>
 800443e:	b948      	cbnz	r0, 8004454 <__smakebuf_r+0x44>
 8004440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004444:	059a      	lsls	r2, r3, #22
 8004446:	d4ef      	bmi.n	8004428 <__smakebuf_r+0x18>
 8004448:	f023 0303 	bic.w	r3, r3, #3
 800444c:	f043 0302 	orr.w	r3, r3, #2
 8004450:	81a3      	strh	r3, [r4, #12]
 8004452:	e7e3      	b.n	800441c <__smakebuf_r+0xc>
 8004454:	4b0d      	ldr	r3, [pc, #52]	; (800448c <__smakebuf_r+0x7c>)
 8004456:	62b3      	str	r3, [r6, #40]	; 0x28
 8004458:	89a3      	ldrh	r3, [r4, #12]
 800445a:	6020      	str	r0, [r4, #0]
 800445c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004460:	81a3      	strh	r3, [r4, #12]
 8004462:	9b00      	ldr	r3, [sp, #0]
 8004464:	6163      	str	r3, [r4, #20]
 8004466:	9b01      	ldr	r3, [sp, #4]
 8004468:	6120      	str	r0, [r4, #16]
 800446a:	b15b      	cbz	r3, 8004484 <__smakebuf_r+0x74>
 800446c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004470:	4630      	mov	r0, r6
 8004472:	f000 fc65 	bl	8004d40 <_isatty_r>
 8004476:	b128      	cbz	r0, 8004484 <__smakebuf_r+0x74>
 8004478:	89a3      	ldrh	r3, [r4, #12]
 800447a:	f023 0303 	bic.w	r3, r3, #3
 800447e:	f043 0301 	orr.w	r3, r3, #1
 8004482:	81a3      	strh	r3, [r4, #12]
 8004484:	89a0      	ldrh	r0, [r4, #12]
 8004486:	4305      	orrs	r5, r0
 8004488:	81a5      	strh	r5, [r4, #12]
 800448a:	e7cd      	b.n	8004428 <__smakebuf_r+0x18>
 800448c:	0800421d 	.word	0x0800421d

08004490 <_free_r>:
 8004490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004492:	2900      	cmp	r1, #0
 8004494:	d044      	beq.n	8004520 <_free_r+0x90>
 8004496:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800449a:	9001      	str	r0, [sp, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	f1a1 0404 	sub.w	r4, r1, #4
 80044a2:	bfb8      	it	lt
 80044a4:	18e4      	addlt	r4, r4, r3
 80044a6:	f000 fc95 	bl	8004dd4 <__malloc_lock>
 80044aa:	4a1e      	ldr	r2, [pc, #120]	; (8004524 <_free_r+0x94>)
 80044ac:	9801      	ldr	r0, [sp, #4]
 80044ae:	6813      	ldr	r3, [r2, #0]
 80044b0:	b933      	cbnz	r3, 80044c0 <_free_r+0x30>
 80044b2:	6063      	str	r3, [r4, #4]
 80044b4:	6014      	str	r4, [r2, #0]
 80044b6:	b003      	add	sp, #12
 80044b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044bc:	f000 bc90 	b.w	8004de0 <__malloc_unlock>
 80044c0:	42a3      	cmp	r3, r4
 80044c2:	d908      	bls.n	80044d6 <_free_r+0x46>
 80044c4:	6825      	ldr	r5, [r4, #0]
 80044c6:	1961      	adds	r1, r4, r5
 80044c8:	428b      	cmp	r3, r1
 80044ca:	bf01      	itttt	eq
 80044cc:	6819      	ldreq	r1, [r3, #0]
 80044ce:	685b      	ldreq	r3, [r3, #4]
 80044d0:	1949      	addeq	r1, r1, r5
 80044d2:	6021      	streq	r1, [r4, #0]
 80044d4:	e7ed      	b.n	80044b2 <_free_r+0x22>
 80044d6:	461a      	mov	r2, r3
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	b10b      	cbz	r3, 80044e0 <_free_r+0x50>
 80044dc:	42a3      	cmp	r3, r4
 80044de:	d9fa      	bls.n	80044d6 <_free_r+0x46>
 80044e0:	6811      	ldr	r1, [r2, #0]
 80044e2:	1855      	adds	r5, r2, r1
 80044e4:	42a5      	cmp	r5, r4
 80044e6:	d10b      	bne.n	8004500 <_free_r+0x70>
 80044e8:	6824      	ldr	r4, [r4, #0]
 80044ea:	4421      	add	r1, r4
 80044ec:	1854      	adds	r4, r2, r1
 80044ee:	42a3      	cmp	r3, r4
 80044f0:	6011      	str	r1, [r2, #0]
 80044f2:	d1e0      	bne.n	80044b6 <_free_r+0x26>
 80044f4:	681c      	ldr	r4, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	6053      	str	r3, [r2, #4]
 80044fa:	4421      	add	r1, r4
 80044fc:	6011      	str	r1, [r2, #0]
 80044fe:	e7da      	b.n	80044b6 <_free_r+0x26>
 8004500:	d902      	bls.n	8004508 <_free_r+0x78>
 8004502:	230c      	movs	r3, #12
 8004504:	6003      	str	r3, [r0, #0]
 8004506:	e7d6      	b.n	80044b6 <_free_r+0x26>
 8004508:	6825      	ldr	r5, [r4, #0]
 800450a:	1961      	adds	r1, r4, r5
 800450c:	428b      	cmp	r3, r1
 800450e:	bf04      	itt	eq
 8004510:	6819      	ldreq	r1, [r3, #0]
 8004512:	685b      	ldreq	r3, [r3, #4]
 8004514:	6063      	str	r3, [r4, #4]
 8004516:	bf04      	itt	eq
 8004518:	1949      	addeq	r1, r1, r5
 800451a:	6021      	streq	r1, [r4, #0]
 800451c:	6054      	str	r4, [r2, #4]
 800451e:	e7ca      	b.n	80044b6 <_free_r+0x26>
 8004520:	b003      	add	sp, #12
 8004522:	bd30      	pop	{r4, r5, pc}
 8004524:	20000398 	.word	0x20000398

08004528 <sbrk_aligned>:
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	4e0e      	ldr	r6, [pc, #56]	; (8004564 <sbrk_aligned+0x3c>)
 800452c:	460c      	mov	r4, r1
 800452e:	6831      	ldr	r1, [r6, #0]
 8004530:	4605      	mov	r5, r0
 8004532:	b911      	cbnz	r1, 800453a <sbrk_aligned+0x12>
 8004534:	f000 fb7c 	bl	8004c30 <_sbrk_r>
 8004538:	6030      	str	r0, [r6, #0]
 800453a:	4621      	mov	r1, r4
 800453c:	4628      	mov	r0, r5
 800453e:	f000 fb77 	bl	8004c30 <_sbrk_r>
 8004542:	1c43      	adds	r3, r0, #1
 8004544:	d00a      	beq.n	800455c <sbrk_aligned+0x34>
 8004546:	1cc4      	adds	r4, r0, #3
 8004548:	f024 0403 	bic.w	r4, r4, #3
 800454c:	42a0      	cmp	r0, r4
 800454e:	d007      	beq.n	8004560 <sbrk_aligned+0x38>
 8004550:	1a21      	subs	r1, r4, r0
 8004552:	4628      	mov	r0, r5
 8004554:	f000 fb6c 	bl	8004c30 <_sbrk_r>
 8004558:	3001      	adds	r0, #1
 800455a:	d101      	bne.n	8004560 <sbrk_aligned+0x38>
 800455c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004560:	4620      	mov	r0, r4
 8004562:	bd70      	pop	{r4, r5, r6, pc}
 8004564:	2000039c 	.word	0x2000039c

08004568 <_malloc_r>:
 8004568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800456c:	1ccd      	adds	r5, r1, #3
 800456e:	f025 0503 	bic.w	r5, r5, #3
 8004572:	3508      	adds	r5, #8
 8004574:	2d0c      	cmp	r5, #12
 8004576:	bf38      	it	cc
 8004578:	250c      	movcc	r5, #12
 800457a:	2d00      	cmp	r5, #0
 800457c:	4607      	mov	r7, r0
 800457e:	db01      	blt.n	8004584 <_malloc_r+0x1c>
 8004580:	42a9      	cmp	r1, r5
 8004582:	d905      	bls.n	8004590 <_malloc_r+0x28>
 8004584:	230c      	movs	r3, #12
 8004586:	603b      	str	r3, [r7, #0]
 8004588:	2600      	movs	r6, #0
 800458a:	4630      	mov	r0, r6
 800458c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004590:	4e2e      	ldr	r6, [pc, #184]	; (800464c <_malloc_r+0xe4>)
 8004592:	f000 fc1f 	bl	8004dd4 <__malloc_lock>
 8004596:	6833      	ldr	r3, [r6, #0]
 8004598:	461c      	mov	r4, r3
 800459a:	bb34      	cbnz	r4, 80045ea <_malloc_r+0x82>
 800459c:	4629      	mov	r1, r5
 800459e:	4638      	mov	r0, r7
 80045a0:	f7ff ffc2 	bl	8004528 <sbrk_aligned>
 80045a4:	1c43      	adds	r3, r0, #1
 80045a6:	4604      	mov	r4, r0
 80045a8:	d14d      	bne.n	8004646 <_malloc_r+0xde>
 80045aa:	6834      	ldr	r4, [r6, #0]
 80045ac:	4626      	mov	r6, r4
 80045ae:	2e00      	cmp	r6, #0
 80045b0:	d140      	bne.n	8004634 <_malloc_r+0xcc>
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	4631      	mov	r1, r6
 80045b6:	4638      	mov	r0, r7
 80045b8:	eb04 0803 	add.w	r8, r4, r3
 80045bc:	f000 fb38 	bl	8004c30 <_sbrk_r>
 80045c0:	4580      	cmp	r8, r0
 80045c2:	d13a      	bne.n	800463a <_malloc_r+0xd2>
 80045c4:	6821      	ldr	r1, [r4, #0]
 80045c6:	3503      	adds	r5, #3
 80045c8:	1a6d      	subs	r5, r5, r1
 80045ca:	f025 0503 	bic.w	r5, r5, #3
 80045ce:	3508      	adds	r5, #8
 80045d0:	2d0c      	cmp	r5, #12
 80045d2:	bf38      	it	cc
 80045d4:	250c      	movcc	r5, #12
 80045d6:	4629      	mov	r1, r5
 80045d8:	4638      	mov	r0, r7
 80045da:	f7ff ffa5 	bl	8004528 <sbrk_aligned>
 80045de:	3001      	adds	r0, #1
 80045e0:	d02b      	beq.n	800463a <_malloc_r+0xd2>
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	442b      	add	r3, r5
 80045e6:	6023      	str	r3, [r4, #0]
 80045e8:	e00e      	b.n	8004608 <_malloc_r+0xa0>
 80045ea:	6822      	ldr	r2, [r4, #0]
 80045ec:	1b52      	subs	r2, r2, r5
 80045ee:	d41e      	bmi.n	800462e <_malloc_r+0xc6>
 80045f0:	2a0b      	cmp	r2, #11
 80045f2:	d916      	bls.n	8004622 <_malloc_r+0xba>
 80045f4:	1961      	adds	r1, r4, r5
 80045f6:	42a3      	cmp	r3, r4
 80045f8:	6025      	str	r5, [r4, #0]
 80045fa:	bf18      	it	ne
 80045fc:	6059      	strne	r1, [r3, #4]
 80045fe:	6863      	ldr	r3, [r4, #4]
 8004600:	bf08      	it	eq
 8004602:	6031      	streq	r1, [r6, #0]
 8004604:	5162      	str	r2, [r4, r5]
 8004606:	604b      	str	r3, [r1, #4]
 8004608:	4638      	mov	r0, r7
 800460a:	f104 060b 	add.w	r6, r4, #11
 800460e:	f000 fbe7 	bl	8004de0 <__malloc_unlock>
 8004612:	f026 0607 	bic.w	r6, r6, #7
 8004616:	1d23      	adds	r3, r4, #4
 8004618:	1af2      	subs	r2, r6, r3
 800461a:	d0b6      	beq.n	800458a <_malloc_r+0x22>
 800461c:	1b9b      	subs	r3, r3, r6
 800461e:	50a3      	str	r3, [r4, r2]
 8004620:	e7b3      	b.n	800458a <_malloc_r+0x22>
 8004622:	6862      	ldr	r2, [r4, #4]
 8004624:	42a3      	cmp	r3, r4
 8004626:	bf0c      	ite	eq
 8004628:	6032      	streq	r2, [r6, #0]
 800462a:	605a      	strne	r2, [r3, #4]
 800462c:	e7ec      	b.n	8004608 <_malloc_r+0xa0>
 800462e:	4623      	mov	r3, r4
 8004630:	6864      	ldr	r4, [r4, #4]
 8004632:	e7b2      	b.n	800459a <_malloc_r+0x32>
 8004634:	4634      	mov	r4, r6
 8004636:	6876      	ldr	r6, [r6, #4]
 8004638:	e7b9      	b.n	80045ae <_malloc_r+0x46>
 800463a:	230c      	movs	r3, #12
 800463c:	603b      	str	r3, [r7, #0]
 800463e:	4638      	mov	r0, r7
 8004640:	f000 fbce 	bl	8004de0 <__malloc_unlock>
 8004644:	e7a1      	b.n	800458a <_malloc_r+0x22>
 8004646:	6025      	str	r5, [r4, #0]
 8004648:	e7de      	b.n	8004608 <_malloc_r+0xa0>
 800464a:	bf00      	nop
 800464c:	20000398 	.word	0x20000398

08004650 <__ssputs_r>:
 8004650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004654:	688e      	ldr	r6, [r1, #8]
 8004656:	429e      	cmp	r6, r3
 8004658:	4682      	mov	sl, r0
 800465a:	460c      	mov	r4, r1
 800465c:	4690      	mov	r8, r2
 800465e:	461f      	mov	r7, r3
 8004660:	d838      	bhi.n	80046d4 <__ssputs_r+0x84>
 8004662:	898a      	ldrh	r2, [r1, #12]
 8004664:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004668:	d032      	beq.n	80046d0 <__ssputs_r+0x80>
 800466a:	6825      	ldr	r5, [r4, #0]
 800466c:	6909      	ldr	r1, [r1, #16]
 800466e:	eba5 0901 	sub.w	r9, r5, r1
 8004672:	6965      	ldr	r5, [r4, #20]
 8004674:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004678:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800467c:	3301      	adds	r3, #1
 800467e:	444b      	add	r3, r9
 8004680:	106d      	asrs	r5, r5, #1
 8004682:	429d      	cmp	r5, r3
 8004684:	bf38      	it	cc
 8004686:	461d      	movcc	r5, r3
 8004688:	0553      	lsls	r3, r2, #21
 800468a:	d531      	bpl.n	80046f0 <__ssputs_r+0xa0>
 800468c:	4629      	mov	r1, r5
 800468e:	f7ff ff6b 	bl	8004568 <_malloc_r>
 8004692:	4606      	mov	r6, r0
 8004694:	b950      	cbnz	r0, 80046ac <__ssputs_r+0x5c>
 8004696:	230c      	movs	r3, #12
 8004698:	f8ca 3000 	str.w	r3, [sl]
 800469c:	89a3      	ldrh	r3, [r4, #12]
 800469e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046a2:	81a3      	strh	r3, [r4, #12]
 80046a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ac:	6921      	ldr	r1, [r4, #16]
 80046ae:	464a      	mov	r2, r9
 80046b0:	f000 fb68 	bl	8004d84 <memcpy>
 80046b4:	89a3      	ldrh	r3, [r4, #12]
 80046b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046be:	81a3      	strh	r3, [r4, #12]
 80046c0:	6126      	str	r6, [r4, #16]
 80046c2:	6165      	str	r5, [r4, #20]
 80046c4:	444e      	add	r6, r9
 80046c6:	eba5 0509 	sub.w	r5, r5, r9
 80046ca:	6026      	str	r6, [r4, #0]
 80046cc:	60a5      	str	r5, [r4, #8]
 80046ce:	463e      	mov	r6, r7
 80046d0:	42be      	cmp	r6, r7
 80046d2:	d900      	bls.n	80046d6 <__ssputs_r+0x86>
 80046d4:	463e      	mov	r6, r7
 80046d6:	6820      	ldr	r0, [r4, #0]
 80046d8:	4632      	mov	r2, r6
 80046da:	4641      	mov	r1, r8
 80046dc:	f000 fb60 	bl	8004da0 <memmove>
 80046e0:	68a3      	ldr	r3, [r4, #8]
 80046e2:	1b9b      	subs	r3, r3, r6
 80046e4:	60a3      	str	r3, [r4, #8]
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	4433      	add	r3, r6
 80046ea:	6023      	str	r3, [r4, #0]
 80046ec:	2000      	movs	r0, #0
 80046ee:	e7db      	b.n	80046a8 <__ssputs_r+0x58>
 80046f0:	462a      	mov	r2, r5
 80046f2:	f000 fb7b 	bl	8004dec <_realloc_r>
 80046f6:	4606      	mov	r6, r0
 80046f8:	2800      	cmp	r0, #0
 80046fa:	d1e1      	bne.n	80046c0 <__ssputs_r+0x70>
 80046fc:	6921      	ldr	r1, [r4, #16]
 80046fe:	4650      	mov	r0, sl
 8004700:	f7ff fec6 	bl	8004490 <_free_r>
 8004704:	e7c7      	b.n	8004696 <__ssputs_r+0x46>
	...

08004708 <_svfiprintf_r>:
 8004708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800470c:	4698      	mov	r8, r3
 800470e:	898b      	ldrh	r3, [r1, #12]
 8004710:	061b      	lsls	r3, r3, #24
 8004712:	b09d      	sub	sp, #116	; 0x74
 8004714:	4607      	mov	r7, r0
 8004716:	460d      	mov	r5, r1
 8004718:	4614      	mov	r4, r2
 800471a:	d50e      	bpl.n	800473a <_svfiprintf_r+0x32>
 800471c:	690b      	ldr	r3, [r1, #16]
 800471e:	b963      	cbnz	r3, 800473a <_svfiprintf_r+0x32>
 8004720:	2140      	movs	r1, #64	; 0x40
 8004722:	f7ff ff21 	bl	8004568 <_malloc_r>
 8004726:	6028      	str	r0, [r5, #0]
 8004728:	6128      	str	r0, [r5, #16]
 800472a:	b920      	cbnz	r0, 8004736 <_svfiprintf_r+0x2e>
 800472c:	230c      	movs	r3, #12
 800472e:	603b      	str	r3, [r7, #0]
 8004730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004734:	e0d1      	b.n	80048da <_svfiprintf_r+0x1d2>
 8004736:	2340      	movs	r3, #64	; 0x40
 8004738:	616b      	str	r3, [r5, #20]
 800473a:	2300      	movs	r3, #0
 800473c:	9309      	str	r3, [sp, #36]	; 0x24
 800473e:	2320      	movs	r3, #32
 8004740:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004744:	f8cd 800c 	str.w	r8, [sp, #12]
 8004748:	2330      	movs	r3, #48	; 0x30
 800474a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80048f4 <_svfiprintf_r+0x1ec>
 800474e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004752:	f04f 0901 	mov.w	r9, #1
 8004756:	4623      	mov	r3, r4
 8004758:	469a      	mov	sl, r3
 800475a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800475e:	b10a      	cbz	r2, 8004764 <_svfiprintf_r+0x5c>
 8004760:	2a25      	cmp	r2, #37	; 0x25
 8004762:	d1f9      	bne.n	8004758 <_svfiprintf_r+0x50>
 8004764:	ebba 0b04 	subs.w	fp, sl, r4
 8004768:	d00b      	beq.n	8004782 <_svfiprintf_r+0x7a>
 800476a:	465b      	mov	r3, fp
 800476c:	4622      	mov	r2, r4
 800476e:	4629      	mov	r1, r5
 8004770:	4638      	mov	r0, r7
 8004772:	f7ff ff6d 	bl	8004650 <__ssputs_r>
 8004776:	3001      	adds	r0, #1
 8004778:	f000 80aa 	beq.w	80048d0 <_svfiprintf_r+0x1c8>
 800477c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800477e:	445a      	add	r2, fp
 8004780:	9209      	str	r2, [sp, #36]	; 0x24
 8004782:	f89a 3000 	ldrb.w	r3, [sl]
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 80a2 	beq.w	80048d0 <_svfiprintf_r+0x1c8>
 800478c:	2300      	movs	r3, #0
 800478e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004792:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004796:	f10a 0a01 	add.w	sl, sl, #1
 800479a:	9304      	str	r3, [sp, #16]
 800479c:	9307      	str	r3, [sp, #28]
 800479e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047a2:	931a      	str	r3, [sp, #104]	; 0x68
 80047a4:	4654      	mov	r4, sl
 80047a6:	2205      	movs	r2, #5
 80047a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047ac:	4851      	ldr	r0, [pc, #324]	; (80048f4 <_svfiprintf_r+0x1ec>)
 80047ae:	f7fb fd27 	bl	8000200 <memchr>
 80047b2:	9a04      	ldr	r2, [sp, #16]
 80047b4:	b9d8      	cbnz	r0, 80047ee <_svfiprintf_r+0xe6>
 80047b6:	06d0      	lsls	r0, r2, #27
 80047b8:	bf44      	itt	mi
 80047ba:	2320      	movmi	r3, #32
 80047bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047c0:	0711      	lsls	r1, r2, #28
 80047c2:	bf44      	itt	mi
 80047c4:	232b      	movmi	r3, #43	; 0x2b
 80047c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047ca:	f89a 3000 	ldrb.w	r3, [sl]
 80047ce:	2b2a      	cmp	r3, #42	; 0x2a
 80047d0:	d015      	beq.n	80047fe <_svfiprintf_r+0xf6>
 80047d2:	9a07      	ldr	r2, [sp, #28]
 80047d4:	4654      	mov	r4, sl
 80047d6:	2000      	movs	r0, #0
 80047d8:	f04f 0c0a 	mov.w	ip, #10
 80047dc:	4621      	mov	r1, r4
 80047de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047e2:	3b30      	subs	r3, #48	; 0x30
 80047e4:	2b09      	cmp	r3, #9
 80047e6:	d94e      	bls.n	8004886 <_svfiprintf_r+0x17e>
 80047e8:	b1b0      	cbz	r0, 8004818 <_svfiprintf_r+0x110>
 80047ea:	9207      	str	r2, [sp, #28]
 80047ec:	e014      	b.n	8004818 <_svfiprintf_r+0x110>
 80047ee:	eba0 0308 	sub.w	r3, r0, r8
 80047f2:	fa09 f303 	lsl.w	r3, r9, r3
 80047f6:	4313      	orrs	r3, r2
 80047f8:	9304      	str	r3, [sp, #16]
 80047fa:	46a2      	mov	sl, r4
 80047fc:	e7d2      	b.n	80047a4 <_svfiprintf_r+0x9c>
 80047fe:	9b03      	ldr	r3, [sp, #12]
 8004800:	1d19      	adds	r1, r3, #4
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	9103      	str	r1, [sp, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	bfbb      	ittet	lt
 800480a:	425b      	neglt	r3, r3
 800480c:	f042 0202 	orrlt.w	r2, r2, #2
 8004810:	9307      	strge	r3, [sp, #28]
 8004812:	9307      	strlt	r3, [sp, #28]
 8004814:	bfb8      	it	lt
 8004816:	9204      	strlt	r2, [sp, #16]
 8004818:	7823      	ldrb	r3, [r4, #0]
 800481a:	2b2e      	cmp	r3, #46	; 0x2e
 800481c:	d10c      	bne.n	8004838 <_svfiprintf_r+0x130>
 800481e:	7863      	ldrb	r3, [r4, #1]
 8004820:	2b2a      	cmp	r3, #42	; 0x2a
 8004822:	d135      	bne.n	8004890 <_svfiprintf_r+0x188>
 8004824:	9b03      	ldr	r3, [sp, #12]
 8004826:	1d1a      	adds	r2, r3, #4
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	9203      	str	r2, [sp, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	bfb8      	it	lt
 8004830:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004834:	3402      	adds	r4, #2
 8004836:	9305      	str	r3, [sp, #20]
 8004838:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004904 <_svfiprintf_r+0x1fc>
 800483c:	7821      	ldrb	r1, [r4, #0]
 800483e:	2203      	movs	r2, #3
 8004840:	4650      	mov	r0, sl
 8004842:	f7fb fcdd 	bl	8000200 <memchr>
 8004846:	b140      	cbz	r0, 800485a <_svfiprintf_r+0x152>
 8004848:	2340      	movs	r3, #64	; 0x40
 800484a:	eba0 000a 	sub.w	r0, r0, sl
 800484e:	fa03 f000 	lsl.w	r0, r3, r0
 8004852:	9b04      	ldr	r3, [sp, #16]
 8004854:	4303      	orrs	r3, r0
 8004856:	3401      	adds	r4, #1
 8004858:	9304      	str	r3, [sp, #16]
 800485a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800485e:	4826      	ldr	r0, [pc, #152]	; (80048f8 <_svfiprintf_r+0x1f0>)
 8004860:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004864:	2206      	movs	r2, #6
 8004866:	f7fb fccb 	bl	8000200 <memchr>
 800486a:	2800      	cmp	r0, #0
 800486c:	d038      	beq.n	80048e0 <_svfiprintf_r+0x1d8>
 800486e:	4b23      	ldr	r3, [pc, #140]	; (80048fc <_svfiprintf_r+0x1f4>)
 8004870:	bb1b      	cbnz	r3, 80048ba <_svfiprintf_r+0x1b2>
 8004872:	9b03      	ldr	r3, [sp, #12]
 8004874:	3307      	adds	r3, #7
 8004876:	f023 0307 	bic.w	r3, r3, #7
 800487a:	3308      	adds	r3, #8
 800487c:	9303      	str	r3, [sp, #12]
 800487e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004880:	4433      	add	r3, r6
 8004882:	9309      	str	r3, [sp, #36]	; 0x24
 8004884:	e767      	b.n	8004756 <_svfiprintf_r+0x4e>
 8004886:	fb0c 3202 	mla	r2, ip, r2, r3
 800488a:	460c      	mov	r4, r1
 800488c:	2001      	movs	r0, #1
 800488e:	e7a5      	b.n	80047dc <_svfiprintf_r+0xd4>
 8004890:	2300      	movs	r3, #0
 8004892:	3401      	adds	r4, #1
 8004894:	9305      	str	r3, [sp, #20]
 8004896:	4619      	mov	r1, r3
 8004898:	f04f 0c0a 	mov.w	ip, #10
 800489c:	4620      	mov	r0, r4
 800489e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048a2:	3a30      	subs	r2, #48	; 0x30
 80048a4:	2a09      	cmp	r2, #9
 80048a6:	d903      	bls.n	80048b0 <_svfiprintf_r+0x1a8>
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d0c5      	beq.n	8004838 <_svfiprintf_r+0x130>
 80048ac:	9105      	str	r1, [sp, #20]
 80048ae:	e7c3      	b.n	8004838 <_svfiprintf_r+0x130>
 80048b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80048b4:	4604      	mov	r4, r0
 80048b6:	2301      	movs	r3, #1
 80048b8:	e7f0      	b.n	800489c <_svfiprintf_r+0x194>
 80048ba:	ab03      	add	r3, sp, #12
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	462a      	mov	r2, r5
 80048c0:	4b0f      	ldr	r3, [pc, #60]	; (8004900 <_svfiprintf_r+0x1f8>)
 80048c2:	a904      	add	r1, sp, #16
 80048c4:	4638      	mov	r0, r7
 80048c6:	f3af 8000 	nop.w
 80048ca:	1c42      	adds	r2, r0, #1
 80048cc:	4606      	mov	r6, r0
 80048ce:	d1d6      	bne.n	800487e <_svfiprintf_r+0x176>
 80048d0:	89ab      	ldrh	r3, [r5, #12]
 80048d2:	065b      	lsls	r3, r3, #25
 80048d4:	f53f af2c 	bmi.w	8004730 <_svfiprintf_r+0x28>
 80048d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048da:	b01d      	add	sp, #116	; 0x74
 80048dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e0:	ab03      	add	r3, sp, #12
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	462a      	mov	r2, r5
 80048e6:	4b06      	ldr	r3, [pc, #24]	; (8004900 <_svfiprintf_r+0x1f8>)
 80048e8:	a904      	add	r1, sp, #16
 80048ea:	4638      	mov	r0, r7
 80048ec:	f000 f87a 	bl	80049e4 <_printf_i>
 80048f0:	e7eb      	b.n	80048ca <_svfiprintf_r+0x1c2>
 80048f2:	bf00      	nop
 80048f4:	08004fbc 	.word	0x08004fbc
 80048f8:	08004fc6 	.word	0x08004fc6
 80048fc:	00000000 	.word	0x00000000
 8004900:	08004651 	.word	0x08004651
 8004904:	08004fc2 	.word	0x08004fc2

08004908 <_printf_common>:
 8004908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800490c:	4616      	mov	r6, r2
 800490e:	4699      	mov	r9, r3
 8004910:	688a      	ldr	r2, [r1, #8]
 8004912:	690b      	ldr	r3, [r1, #16]
 8004914:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004918:	4293      	cmp	r3, r2
 800491a:	bfb8      	it	lt
 800491c:	4613      	movlt	r3, r2
 800491e:	6033      	str	r3, [r6, #0]
 8004920:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004924:	4607      	mov	r7, r0
 8004926:	460c      	mov	r4, r1
 8004928:	b10a      	cbz	r2, 800492e <_printf_common+0x26>
 800492a:	3301      	adds	r3, #1
 800492c:	6033      	str	r3, [r6, #0]
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	0699      	lsls	r1, r3, #26
 8004932:	bf42      	ittt	mi
 8004934:	6833      	ldrmi	r3, [r6, #0]
 8004936:	3302      	addmi	r3, #2
 8004938:	6033      	strmi	r3, [r6, #0]
 800493a:	6825      	ldr	r5, [r4, #0]
 800493c:	f015 0506 	ands.w	r5, r5, #6
 8004940:	d106      	bne.n	8004950 <_printf_common+0x48>
 8004942:	f104 0a19 	add.w	sl, r4, #25
 8004946:	68e3      	ldr	r3, [r4, #12]
 8004948:	6832      	ldr	r2, [r6, #0]
 800494a:	1a9b      	subs	r3, r3, r2
 800494c:	42ab      	cmp	r3, r5
 800494e:	dc26      	bgt.n	800499e <_printf_common+0x96>
 8004950:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004954:	1e13      	subs	r3, r2, #0
 8004956:	6822      	ldr	r2, [r4, #0]
 8004958:	bf18      	it	ne
 800495a:	2301      	movne	r3, #1
 800495c:	0692      	lsls	r2, r2, #26
 800495e:	d42b      	bmi.n	80049b8 <_printf_common+0xb0>
 8004960:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004964:	4649      	mov	r1, r9
 8004966:	4638      	mov	r0, r7
 8004968:	47c0      	blx	r8
 800496a:	3001      	adds	r0, #1
 800496c:	d01e      	beq.n	80049ac <_printf_common+0xa4>
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	68e5      	ldr	r5, [r4, #12]
 8004972:	6832      	ldr	r2, [r6, #0]
 8004974:	f003 0306 	and.w	r3, r3, #6
 8004978:	2b04      	cmp	r3, #4
 800497a:	bf08      	it	eq
 800497c:	1aad      	subeq	r5, r5, r2
 800497e:	68a3      	ldr	r3, [r4, #8]
 8004980:	6922      	ldr	r2, [r4, #16]
 8004982:	bf0c      	ite	eq
 8004984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004988:	2500      	movne	r5, #0
 800498a:	4293      	cmp	r3, r2
 800498c:	bfc4      	itt	gt
 800498e:	1a9b      	subgt	r3, r3, r2
 8004990:	18ed      	addgt	r5, r5, r3
 8004992:	2600      	movs	r6, #0
 8004994:	341a      	adds	r4, #26
 8004996:	42b5      	cmp	r5, r6
 8004998:	d11a      	bne.n	80049d0 <_printf_common+0xc8>
 800499a:	2000      	movs	r0, #0
 800499c:	e008      	b.n	80049b0 <_printf_common+0xa8>
 800499e:	2301      	movs	r3, #1
 80049a0:	4652      	mov	r2, sl
 80049a2:	4649      	mov	r1, r9
 80049a4:	4638      	mov	r0, r7
 80049a6:	47c0      	blx	r8
 80049a8:	3001      	adds	r0, #1
 80049aa:	d103      	bne.n	80049b4 <_printf_common+0xac>
 80049ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b4:	3501      	adds	r5, #1
 80049b6:	e7c6      	b.n	8004946 <_printf_common+0x3e>
 80049b8:	18e1      	adds	r1, r4, r3
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	2030      	movs	r0, #48	; 0x30
 80049be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049c2:	4422      	add	r2, r4
 80049c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049cc:	3302      	adds	r3, #2
 80049ce:	e7c7      	b.n	8004960 <_printf_common+0x58>
 80049d0:	2301      	movs	r3, #1
 80049d2:	4622      	mov	r2, r4
 80049d4:	4649      	mov	r1, r9
 80049d6:	4638      	mov	r0, r7
 80049d8:	47c0      	blx	r8
 80049da:	3001      	adds	r0, #1
 80049dc:	d0e6      	beq.n	80049ac <_printf_common+0xa4>
 80049de:	3601      	adds	r6, #1
 80049e0:	e7d9      	b.n	8004996 <_printf_common+0x8e>
	...

080049e4 <_printf_i>:
 80049e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049e8:	7e0f      	ldrb	r7, [r1, #24]
 80049ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049ec:	2f78      	cmp	r7, #120	; 0x78
 80049ee:	4691      	mov	r9, r2
 80049f0:	4680      	mov	r8, r0
 80049f2:	460c      	mov	r4, r1
 80049f4:	469a      	mov	sl, r3
 80049f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049fa:	d807      	bhi.n	8004a0c <_printf_i+0x28>
 80049fc:	2f62      	cmp	r7, #98	; 0x62
 80049fe:	d80a      	bhi.n	8004a16 <_printf_i+0x32>
 8004a00:	2f00      	cmp	r7, #0
 8004a02:	f000 80d8 	beq.w	8004bb6 <_printf_i+0x1d2>
 8004a06:	2f58      	cmp	r7, #88	; 0x58
 8004a08:	f000 80a3 	beq.w	8004b52 <_printf_i+0x16e>
 8004a0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a14:	e03a      	b.n	8004a8c <_printf_i+0xa8>
 8004a16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a1a:	2b15      	cmp	r3, #21
 8004a1c:	d8f6      	bhi.n	8004a0c <_printf_i+0x28>
 8004a1e:	a101      	add	r1, pc, #4	; (adr r1, 8004a24 <_printf_i+0x40>)
 8004a20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a24:	08004a7d 	.word	0x08004a7d
 8004a28:	08004a91 	.word	0x08004a91
 8004a2c:	08004a0d 	.word	0x08004a0d
 8004a30:	08004a0d 	.word	0x08004a0d
 8004a34:	08004a0d 	.word	0x08004a0d
 8004a38:	08004a0d 	.word	0x08004a0d
 8004a3c:	08004a91 	.word	0x08004a91
 8004a40:	08004a0d 	.word	0x08004a0d
 8004a44:	08004a0d 	.word	0x08004a0d
 8004a48:	08004a0d 	.word	0x08004a0d
 8004a4c:	08004a0d 	.word	0x08004a0d
 8004a50:	08004b9d 	.word	0x08004b9d
 8004a54:	08004ac1 	.word	0x08004ac1
 8004a58:	08004b7f 	.word	0x08004b7f
 8004a5c:	08004a0d 	.word	0x08004a0d
 8004a60:	08004a0d 	.word	0x08004a0d
 8004a64:	08004bbf 	.word	0x08004bbf
 8004a68:	08004a0d 	.word	0x08004a0d
 8004a6c:	08004ac1 	.word	0x08004ac1
 8004a70:	08004a0d 	.word	0x08004a0d
 8004a74:	08004a0d 	.word	0x08004a0d
 8004a78:	08004b87 	.word	0x08004b87
 8004a7c:	682b      	ldr	r3, [r5, #0]
 8004a7e:	1d1a      	adds	r2, r3, #4
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	602a      	str	r2, [r5, #0]
 8004a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e0a3      	b.n	8004bd8 <_printf_i+0x1f4>
 8004a90:	6820      	ldr	r0, [r4, #0]
 8004a92:	6829      	ldr	r1, [r5, #0]
 8004a94:	0606      	lsls	r6, r0, #24
 8004a96:	f101 0304 	add.w	r3, r1, #4
 8004a9a:	d50a      	bpl.n	8004ab2 <_printf_i+0xce>
 8004a9c:	680e      	ldr	r6, [r1, #0]
 8004a9e:	602b      	str	r3, [r5, #0]
 8004aa0:	2e00      	cmp	r6, #0
 8004aa2:	da03      	bge.n	8004aac <_printf_i+0xc8>
 8004aa4:	232d      	movs	r3, #45	; 0x2d
 8004aa6:	4276      	negs	r6, r6
 8004aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aac:	485e      	ldr	r0, [pc, #376]	; (8004c28 <_printf_i+0x244>)
 8004aae:	230a      	movs	r3, #10
 8004ab0:	e019      	b.n	8004ae6 <_printf_i+0x102>
 8004ab2:	680e      	ldr	r6, [r1, #0]
 8004ab4:	602b      	str	r3, [r5, #0]
 8004ab6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004aba:	bf18      	it	ne
 8004abc:	b236      	sxthne	r6, r6
 8004abe:	e7ef      	b.n	8004aa0 <_printf_i+0xbc>
 8004ac0:	682b      	ldr	r3, [r5, #0]
 8004ac2:	6820      	ldr	r0, [r4, #0]
 8004ac4:	1d19      	adds	r1, r3, #4
 8004ac6:	6029      	str	r1, [r5, #0]
 8004ac8:	0601      	lsls	r1, r0, #24
 8004aca:	d501      	bpl.n	8004ad0 <_printf_i+0xec>
 8004acc:	681e      	ldr	r6, [r3, #0]
 8004ace:	e002      	b.n	8004ad6 <_printf_i+0xf2>
 8004ad0:	0646      	lsls	r6, r0, #25
 8004ad2:	d5fb      	bpl.n	8004acc <_printf_i+0xe8>
 8004ad4:	881e      	ldrh	r6, [r3, #0]
 8004ad6:	4854      	ldr	r0, [pc, #336]	; (8004c28 <_printf_i+0x244>)
 8004ad8:	2f6f      	cmp	r7, #111	; 0x6f
 8004ada:	bf0c      	ite	eq
 8004adc:	2308      	moveq	r3, #8
 8004ade:	230a      	movne	r3, #10
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ae6:	6865      	ldr	r5, [r4, #4]
 8004ae8:	60a5      	str	r5, [r4, #8]
 8004aea:	2d00      	cmp	r5, #0
 8004aec:	bfa2      	ittt	ge
 8004aee:	6821      	ldrge	r1, [r4, #0]
 8004af0:	f021 0104 	bicge.w	r1, r1, #4
 8004af4:	6021      	strge	r1, [r4, #0]
 8004af6:	b90e      	cbnz	r6, 8004afc <_printf_i+0x118>
 8004af8:	2d00      	cmp	r5, #0
 8004afa:	d04d      	beq.n	8004b98 <_printf_i+0x1b4>
 8004afc:	4615      	mov	r5, r2
 8004afe:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b02:	fb03 6711 	mls	r7, r3, r1, r6
 8004b06:	5dc7      	ldrb	r7, [r0, r7]
 8004b08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b0c:	4637      	mov	r7, r6
 8004b0e:	42bb      	cmp	r3, r7
 8004b10:	460e      	mov	r6, r1
 8004b12:	d9f4      	bls.n	8004afe <_printf_i+0x11a>
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d10b      	bne.n	8004b30 <_printf_i+0x14c>
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	07de      	lsls	r6, r3, #31
 8004b1c:	d508      	bpl.n	8004b30 <_printf_i+0x14c>
 8004b1e:	6923      	ldr	r3, [r4, #16]
 8004b20:	6861      	ldr	r1, [r4, #4]
 8004b22:	4299      	cmp	r1, r3
 8004b24:	bfde      	ittt	le
 8004b26:	2330      	movle	r3, #48	; 0x30
 8004b28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b2c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004b30:	1b52      	subs	r2, r2, r5
 8004b32:	6122      	str	r2, [r4, #16]
 8004b34:	f8cd a000 	str.w	sl, [sp]
 8004b38:	464b      	mov	r3, r9
 8004b3a:	aa03      	add	r2, sp, #12
 8004b3c:	4621      	mov	r1, r4
 8004b3e:	4640      	mov	r0, r8
 8004b40:	f7ff fee2 	bl	8004908 <_printf_common>
 8004b44:	3001      	adds	r0, #1
 8004b46:	d14c      	bne.n	8004be2 <_printf_i+0x1fe>
 8004b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b4c:	b004      	add	sp, #16
 8004b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b52:	4835      	ldr	r0, [pc, #212]	; (8004c28 <_printf_i+0x244>)
 8004b54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b58:	6829      	ldr	r1, [r5, #0]
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b60:	6029      	str	r1, [r5, #0]
 8004b62:	061d      	lsls	r5, r3, #24
 8004b64:	d514      	bpl.n	8004b90 <_printf_i+0x1ac>
 8004b66:	07df      	lsls	r7, r3, #31
 8004b68:	bf44      	itt	mi
 8004b6a:	f043 0320 	orrmi.w	r3, r3, #32
 8004b6e:	6023      	strmi	r3, [r4, #0]
 8004b70:	b91e      	cbnz	r6, 8004b7a <_printf_i+0x196>
 8004b72:	6823      	ldr	r3, [r4, #0]
 8004b74:	f023 0320 	bic.w	r3, r3, #32
 8004b78:	6023      	str	r3, [r4, #0]
 8004b7a:	2310      	movs	r3, #16
 8004b7c:	e7b0      	b.n	8004ae0 <_printf_i+0xfc>
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	f043 0320 	orr.w	r3, r3, #32
 8004b84:	6023      	str	r3, [r4, #0]
 8004b86:	2378      	movs	r3, #120	; 0x78
 8004b88:	4828      	ldr	r0, [pc, #160]	; (8004c2c <_printf_i+0x248>)
 8004b8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b8e:	e7e3      	b.n	8004b58 <_printf_i+0x174>
 8004b90:	0659      	lsls	r1, r3, #25
 8004b92:	bf48      	it	mi
 8004b94:	b2b6      	uxthmi	r6, r6
 8004b96:	e7e6      	b.n	8004b66 <_printf_i+0x182>
 8004b98:	4615      	mov	r5, r2
 8004b9a:	e7bb      	b.n	8004b14 <_printf_i+0x130>
 8004b9c:	682b      	ldr	r3, [r5, #0]
 8004b9e:	6826      	ldr	r6, [r4, #0]
 8004ba0:	6961      	ldr	r1, [r4, #20]
 8004ba2:	1d18      	adds	r0, r3, #4
 8004ba4:	6028      	str	r0, [r5, #0]
 8004ba6:	0635      	lsls	r5, r6, #24
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	d501      	bpl.n	8004bb0 <_printf_i+0x1cc>
 8004bac:	6019      	str	r1, [r3, #0]
 8004bae:	e002      	b.n	8004bb6 <_printf_i+0x1d2>
 8004bb0:	0670      	lsls	r0, r6, #25
 8004bb2:	d5fb      	bpl.n	8004bac <_printf_i+0x1c8>
 8004bb4:	8019      	strh	r1, [r3, #0]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	6123      	str	r3, [r4, #16]
 8004bba:	4615      	mov	r5, r2
 8004bbc:	e7ba      	b.n	8004b34 <_printf_i+0x150>
 8004bbe:	682b      	ldr	r3, [r5, #0]
 8004bc0:	1d1a      	adds	r2, r3, #4
 8004bc2:	602a      	str	r2, [r5, #0]
 8004bc4:	681d      	ldr	r5, [r3, #0]
 8004bc6:	6862      	ldr	r2, [r4, #4]
 8004bc8:	2100      	movs	r1, #0
 8004bca:	4628      	mov	r0, r5
 8004bcc:	f7fb fb18 	bl	8000200 <memchr>
 8004bd0:	b108      	cbz	r0, 8004bd6 <_printf_i+0x1f2>
 8004bd2:	1b40      	subs	r0, r0, r5
 8004bd4:	6060      	str	r0, [r4, #4]
 8004bd6:	6863      	ldr	r3, [r4, #4]
 8004bd8:	6123      	str	r3, [r4, #16]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004be0:	e7a8      	b.n	8004b34 <_printf_i+0x150>
 8004be2:	6923      	ldr	r3, [r4, #16]
 8004be4:	462a      	mov	r2, r5
 8004be6:	4649      	mov	r1, r9
 8004be8:	4640      	mov	r0, r8
 8004bea:	47d0      	blx	sl
 8004bec:	3001      	adds	r0, #1
 8004bee:	d0ab      	beq.n	8004b48 <_printf_i+0x164>
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	079b      	lsls	r3, r3, #30
 8004bf4:	d413      	bmi.n	8004c1e <_printf_i+0x23a>
 8004bf6:	68e0      	ldr	r0, [r4, #12]
 8004bf8:	9b03      	ldr	r3, [sp, #12]
 8004bfa:	4298      	cmp	r0, r3
 8004bfc:	bfb8      	it	lt
 8004bfe:	4618      	movlt	r0, r3
 8004c00:	e7a4      	b.n	8004b4c <_printf_i+0x168>
 8004c02:	2301      	movs	r3, #1
 8004c04:	4632      	mov	r2, r6
 8004c06:	4649      	mov	r1, r9
 8004c08:	4640      	mov	r0, r8
 8004c0a:	47d0      	blx	sl
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	d09b      	beq.n	8004b48 <_printf_i+0x164>
 8004c10:	3501      	adds	r5, #1
 8004c12:	68e3      	ldr	r3, [r4, #12]
 8004c14:	9903      	ldr	r1, [sp, #12]
 8004c16:	1a5b      	subs	r3, r3, r1
 8004c18:	42ab      	cmp	r3, r5
 8004c1a:	dcf2      	bgt.n	8004c02 <_printf_i+0x21e>
 8004c1c:	e7eb      	b.n	8004bf6 <_printf_i+0x212>
 8004c1e:	2500      	movs	r5, #0
 8004c20:	f104 0619 	add.w	r6, r4, #25
 8004c24:	e7f5      	b.n	8004c12 <_printf_i+0x22e>
 8004c26:	bf00      	nop
 8004c28:	08004fcd 	.word	0x08004fcd
 8004c2c:	08004fde 	.word	0x08004fde

08004c30 <_sbrk_r>:
 8004c30:	b538      	push	{r3, r4, r5, lr}
 8004c32:	4d06      	ldr	r5, [pc, #24]	; (8004c4c <_sbrk_r+0x1c>)
 8004c34:	2300      	movs	r3, #0
 8004c36:	4604      	mov	r4, r0
 8004c38:	4608      	mov	r0, r1
 8004c3a:	602b      	str	r3, [r5, #0]
 8004c3c:	f7fc fa50 	bl	80010e0 <_sbrk>
 8004c40:	1c43      	adds	r3, r0, #1
 8004c42:	d102      	bne.n	8004c4a <_sbrk_r+0x1a>
 8004c44:	682b      	ldr	r3, [r5, #0]
 8004c46:	b103      	cbz	r3, 8004c4a <_sbrk_r+0x1a>
 8004c48:	6023      	str	r3, [r4, #0]
 8004c4a:	bd38      	pop	{r3, r4, r5, pc}
 8004c4c:	200003a0 	.word	0x200003a0

08004c50 <__sread>:
 8004c50:	b510      	push	{r4, lr}
 8004c52:	460c      	mov	r4, r1
 8004c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c58:	f000 f8f8 	bl	8004e4c <_read_r>
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	bfab      	itete	ge
 8004c60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c62:	89a3      	ldrhlt	r3, [r4, #12]
 8004c64:	181b      	addge	r3, r3, r0
 8004c66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c6a:	bfac      	ite	ge
 8004c6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c6e:	81a3      	strhlt	r3, [r4, #12]
 8004c70:	bd10      	pop	{r4, pc}

08004c72 <__swrite>:
 8004c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c76:	461f      	mov	r7, r3
 8004c78:	898b      	ldrh	r3, [r1, #12]
 8004c7a:	05db      	lsls	r3, r3, #23
 8004c7c:	4605      	mov	r5, r0
 8004c7e:	460c      	mov	r4, r1
 8004c80:	4616      	mov	r6, r2
 8004c82:	d505      	bpl.n	8004c90 <__swrite+0x1e>
 8004c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c88:	2302      	movs	r3, #2
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f000 f868 	bl	8004d60 <_lseek_r>
 8004c90:	89a3      	ldrh	r3, [r4, #12]
 8004c92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c9a:	81a3      	strh	r3, [r4, #12]
 8004c9c:	4632      	mov	r2, r6
 8004c9e:	463b      	mov	r3, r7
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca6:	f000 b817 	b.w	8004cd8 <_write_r>

08004caa <__sseek>:
 8004caa:	b510      	push	{r4, lr}
 8004cac:	460c      	mov	r4, r1
 8004cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cb2:	f000 f855 	bl	8004d60 <_lseek_r>
 8004cb6:	1c43      	adds	r3, r0, #1
 8004cb8:	89a3      	ldrh	r3, [r4, #12]
 8004cba:	bf15      	itete	ne
 8004cbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8004cbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004cc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004cc6:	81a3      	strheq	r3, [r4, #12]
 8004cc8:	bf18      	it	ne
 8004cca:	81a3      	strhne	r3, [r4, #12]
 8004ccc:	bd10      	pop	{r4, pc}

08004cce <__sclose>:
 8004cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd2:	f000 b813 	b.w	8004cfc <_close_r>
	...

08004cd8 <_write_r>:
 8004cd8:	b538      	push	{r3, r4, r5, lr}
 8004cda:	4d07      	ldr	r5, [pc, #28]	; (8004cf8 <_write_r+0x20>)
 8004cdc:	4604      	mov	r4, r0
 8004cde:	4608      	mov	r0, r1
 8004ce0:	4611      	mov	r1, r2
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	602a      	str	r2, [r5, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	f7fc f9aa 	bl	8001040 <_write>
 8004cec:	1c43      	adds	r3, r0, #1
 8004cee:	d102      	bne.n	8004cf6 <_write_r+0x1e>
 8004cf0:	682b      	ldr	r3, [r5, #0]
 8004cf2:	b103      	cbz	r3, 8004cf6 <_write_r+0x1e>
 8004cf4:	6023      	str	r3, [r4, #0]
 8004cf6:	bd38      	pop	{r3, r4, r5, pc}
 8004cf8:	200003a0 	.word	0x200003a0

08004cfc <_close_r>:
 8004cfc:	b538      	push	{r3, r4, r5, lr}
 8004cfe:	4d06      	ldr	r5, [pc, #24]	; (8004d18 <_close_r+0x1c>)
 8004d00:	2300      	movs	r3, #0
 8004d02:	4604      	mov	r4, r0
 8004d04:	4608      	mov	r0, r1
 8004d06:	602b      	str	r3, [r5, #0]
 8004d08:	f7fc f9b6 	bl	8001078 <_close>
 8004d0c:	1c43      	adds	r3, r0, #1
 8004d0e:	d102      	bne.n	8004d16 <_close_r+0x1a>
 8004d10:	682b      	ldr	r3, [r5, #0]
 8004d12:	b103      	cbz	r3, 8004d16 <_close_r+0x1a>
 8004d14:	6023      	str	r3, [r4, #0]
 8004d16:	bd38      	pop	{r3, r4, r5, pc}
 8004d18:	200003a0 	.word	0x200003a0

08004d1c <_fstat_r>:
 8004d1c:	b538      	push	{r3, r4, r5, lr}
 8004d1e:	4d07      	ldr	r5, [pc, #28]	; (8004d3c <_fstat_r+0x20>)
 8004d20:	2300      	movs	r3, #0
 8004d22:	4604      	mov	r4, r0
 8004d24:	4608      	mov	r0, r1
 8004d26:	4611      	mov	r1, r2
 8004d28:	602b      	str	r3, [r5, #0]
 8004d2a:	f7fc f9b1 	bl	8001090 <_fstat>
 8004d2e:	1c43      	adds	r3, r0, #1
 8004d30:	d102      	bne.n	8004d38 <_fstat_r+0x1c>
 8004d32:	682b      	ldr	r3, [r5, #0]
 8004d34:	b103      	cbz	r3, 8004d38 <_fstat_r+0x1c>
 8004d36:	6023      	str	r3, [r4, #0]
 8004d38:	bd38      	pop	{r3, r4, r5, pc}
 8004d3a:	bf00      	nop
 8004d3c:	200003a0 	.word	0x200003a0

08004d40 <_isatty_r>:
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	4d06      	ldr	r5, [pc, #24]	; (8004d5c <_isatty_r+0x1c>)
 8004d44:	2300      	movs	r3, #0
 8004d46:	4604      	mov	r4, r0
 8004d48:	4608      	mov	r0, r1
 8004d4a:	602b      	str	r3, [r5, #0]
 8004d4c:	f7fc f9b0 	bl	80010b0 <_isatty>
 8004d50:	1c43      	adds	r3, r0, #1
 8004d52:	d102      	bne.n	8004d5a <_isatty_r+0x1a>
 8004d54:	682b      	ldr	r3, [r5, #0]
 8004d56:	b103      	cbz	r3, 8004d5a <_isatty_r+0x1a>
 8004d58:	6023      	str	r3, [r4, #0]
 8004d5a:	bd38      	pop	{r3, r4, r5, pc}
 8004d5c:	200003a0 	.word	0x200003a0

08004d60 <_lseek_r>:
 8004d60:	b538      	push	{r3, r4, r5, lr}
 8004d62:	4d07      	ldr	r5, [pc, #28]	; (8004d80 <_lseek_r+0x20>)
 8004d64:	4604      	mov	r4, r0
 8004d66:	4608      	mov	r0, r1
 8004d68:	4611      	mov	r1, r2
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	602a      	str	r2, [r5, #0]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	f7fc f9a9 	bl	80010c6 <_lseek>
 8004d74:	1c43      	adds	r3, r0, #1
 8004d76:	d102      	bne.n	8004d7e <_lseek_r+0x1e>
 8004d78:	682b      	ldr	r3, [r5, #0]
 8004d7a:	b103      	cbz	r3, 8004d7e <_lseek_r+0x1e>
 8004d7c:	6023      	str	r3, [r4, #0]
 8004d7e:	bd38      	pop	{r3, r4, r5, pc}
 8004d80:	200003a0 	.word	0x200003a0

08004d84 <memcpy>:
 8004d84:	440a      	add	r2, r1
 8004d86:	4291      	cmp	r1, r2
 8004d88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004d8c:	d100      	bne.n	8004d90 <memcpy+0xc>
 8004d8e:	4770      	bx	lr
 8004d90:	b510      	push	{r4, lr}
 8004d92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d9a:	4291      	cmp	r1, r2
 8004d9c:	d1f9      	bne.n	8004d92 <memcpy+0xe>
 8004d9e:	bd10      	pop	{r4, pc}

08004da0 <memmove>:
 8004da0:	4288      	cmp	r0, r1
 8004da2:	b510      	push	{r4, lr}
 8004da4:	eb01 0402 	add.w	r4, r1, r2
 8004da8:	d902      	bls.n	8004db0 <memmove+0x10>
 8004daa:	4284      	cmp	r4, r0
 8004dac:	4623      	mov	r3, r4
 8004dae:	d807      	bhi.n	8004dc0 <memmove+0x20>
 8004db0:	1e43      	subs	r3, r0, #1
 8004db2:	42a1      	cmp	r1, r4
 8004db4:	d008      	beq.n	8004dc8 <memmove+0x28>
 8004db6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dbe:	e7f8      	b.n	8004db2 <memmove+0x12>
 8004dc0:	4402      	add	r2, r0
 8004dc2:	4601      	mov	r1, r0
 8004dc4:	428a      	cmp	r2, r1
 8004dc6:	d100      	bne.n	8004dca <memmove+0x2a>
 8004dc8:	bd10      	pop	{r4, pc}
 8004dca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dd2:	e7f7      	b.n	8004dc4 <memmove+0x24>

08004dd4 <__malloc_lock>:
 8004dd4:	4801      	ldr	r0, [pc, #4]	; (8004ddc <__malloc_lock+0x8>)
 8004dd6:	f7ff baf3 	b.w	80043c0 <__retarget_lock_acquire_recursive>
 8004dda:	bf00      	nop
 8004ddc:	20000394 	.word	0x20000394

08004de0 <__malloc_unlock>:
 8004de0:	4801      	ldr	r0, [pc, #4]	; (8004de8 <__malloc_unlock+0x8>)
 8004de2:	f7ff baee 	b.w	80043c2 <__retarget_lock_release_recursive>
 8004de6:	bf00      	nop
 8004de8:	20000394 	.word	0x20000394

08004dec <_realloc_r>:
 8004dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004df0:	4680      	mov	r8, r0
 8004df2:	4614      	mov	r4, r2
 8004df4:	460e      	mov	r6, r1
 8004df6:	b921      	cbnz	r1, 8004e02 <_realloc_r+0x16>
 8004df8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dfc:	4611      	mov	r1, r2
 8004dfe:	f7ff bbb3 	b.w	8004568 <_malloc_r>
 8004e02:	b92a      	cbnz	r2, 8004e10 <_realloc_r+0x24>
 8004e04:	f7ff fb44 	bl	8004490 <_free_r>
 8004e08:	4625      	mov	r5, r4
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e10:	f000 f82e 	bl	8004e70 <_malloc_usable_size_r>
 8004e14:	4284      	cmp	r4, r0
 8004e16:	4607      	mov	r7, r0
 8004e18:	d802      	bhi.n	8004e20 <_realloc_r+0x34>
 8004e1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e1e:	d812      	bhi.n	8004e46 <_realloc_r+0x5a>
 8004e20:	4621      	mov	r1, r4
 8004e22:	4640      	mov	r0, r8
 8004e24:	f7ff fba0 	bl	8004568 <_malloc_r>
 8004e28:	4605      	mov	r5, r0
 8004e2a:	2800      	cmp	r0, #0
 8004e2c:	d0ed      	beq.n	8004e0a <_realloc_r+0x1e>
 8004e2e:	42bc      	cmp	r4, r7
 8004e30:	4622      	mov	r2, r4
 8004e32:	4631      	mov	r1, r6
 8004e34:	bf28      	it	cs
 8004e36:	463a      	movcs	r2, r7
 8004e38:	f7ff ffa4 	bl	8004d84 <memcpy>
 8004e3c:	4631      	mov	r1, r6
 8004e3e:	4640      	mov	r0, r8
 8004e40:	f7ff fb26 	bl	8004490 <_free_r>
 8004e44:	e7e1      	b.n	8004e0a <_realloc_r+0x1e>
 8004e46:	4635      	mov	r5, r6
 8004e48:	e7df      	b.n	8004e0a <_realloc_r+0x1e>
	...

08004e4c <_read_r>:
 8004e4c:	b538      	push	{r3, r4, r5, lr}
 8004e4e:	4d07      	ldr	r5, [pc, #28]	; (8004e6c <_read_r+0x20>)
 8004e50:	4604      	mov	r4, r0
 8004e52:	4608      	mov	r0, r1
 8004e54:	4611      	mov	r1, r2
 8004e56:	2200      	movs	r2, #0
 8004e58:	602a      	str	r2, [r5, #0]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	f7fc f8d3 	bl	8001006 <_read>
 8004e60:	1c43      	adds	r3, r0, #1
 8004e62:	d102      	bne.n	8004e6a <_read_r+0x1e>
 8004e64:	682b      	ldr	r3, [r5, #0]
 8004e66:	b103      	cbz	r3, 8004e6a <_read_r+0x1e>
 8004e68:	6023      	str	r3, [r4, #0]
 8004e6a:	bd38      	pop	{r3, r4, r5, pc}
 8004e6c:	200003a0 	.word	0x200003a0

08004e70 <_malloc_usable_size_r>:
 8004e70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e74:	1f18      	subs	r0, r3, #4
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	bfbc      	itt	lt
 8004e7a:	580b      	ldrlt	r3, [r1, r0]
 8004e7c:	18c0      	addlt	r0, r0, r3
 8004e7e:	4770      	bx	lr

08004e80 <_init>:
 8004e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e82:	bf00      	nop
 8004e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e86:	bc08      	pop	{r3}
 8004e88:	469e      	mov	lr, r3
 8004e8a:	4770      	bx	lr

08004e8c <_fini>:
 8004e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8e:	bf00      	nop
 8004e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e92:	bc08      	pop	{r3}
 8004e94:	469e      	mov	lr, r3
 8004e96:	4770      	bx	lr
