
lab-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005148  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  080052f8  080052f8  000152f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800546c  0800546c  0002023c  2**0
                  CONTENTS
  4 .ARM          00000008  0800546c  0800546c  0001546c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005474  08005474  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005474  08005474  00015474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005478  08005478  00015478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  0800547c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002023c  2**0
                  CONTENTS
 10 .bss          0000021c  2000023c  2000023c  0002023c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000458  20000458  0002023c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e07a  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e64  00000000  00000000  0002e2e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  00030150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000be0  00000000  00000000  00030df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023800  00000000  00000000  000319d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e891  00000000  00000000  000551d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7d96  00000000  00000000  00063a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013b7ff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004094  00000000  00000000  0013b850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080052e0 	.word	0x080052e0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000240 	.word	0x20000240
 80001ec:	080052e0 	.word	0x080052e0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b087      	sub	sp, #28
 80005a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
 80005ae:	4b2c      	ldr	r3, [pc, #176]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a2b      	ldr	r2, [pc, #172]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b29      	ldr	r3, [pc, #164]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c2:	617b      	str	r3, [r7, #20]
 80005c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	4b25      	ldr	r3, [pc, #148]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a24      	ldr	r2, [pc, #144]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005d0:	f043 0310 	orr.w	r3, r3, #16
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b22      	ldr	r3, [pc, #136]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0310 	and.w	r3, r3, #16
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a1d      	ldr	r2, [pc, #116]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0308 	and.w	r3, r3, #8
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b17      	ldr	r3, [pc, #92]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a16      	ldr	r2, [pc, #88]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a0f      	ldr	r2, [pc, #60]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <MX_GPIO_Init+0xbc>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_GPIO_Init+0xbc>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a08      	ldr	r2, [pc, #32]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_GPIO_Init+0xbc>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]

}
 8000652:	bf00      	nop
 8000654:	371c      	adds	r7, #28
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800

08000664 <init_led_pwm>:
bool guess_status[] = {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false};
uint8_t cur_note_ptr = 0;
uint8_t cur_guess = 0;


void init_led_pwm(void) {
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
	htim4.Instance->ARR = led_arr_value;
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <init_led_pwm+0x18>)
 800066a:	881a      	ldrh	r2, [r3, #0]
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <init_led_pwm+0x1c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	20000000 	.word	0x20000000
 8000680:	200002c4 	.word	0x200002c4

08000684 <is_digit>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern void initialise_monitor_handles(void);

bool is_digit(char *c) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	return '1' <= *c && *c <= '9';
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b30      	cmp	r3, #48	; 0x30
 8000692:	d905      	bls.n	80006a0 <is_digit+0x1c>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b39      	cmp	r3, #57	; 0x39
 800069a:	d801      	bhi.n	80006a0 <is_digit+0x1c>
 800069c:	2301      	movs	r3, #1
 800069e:	e000      	b.n	80006a2 <is_digit+0x1e>
 80006a0:	2300      	movs	r3, #0
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <uart_write>:

void uart_write(char *data) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	uint16_t size = strlen(data);
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff fd97 	bl	80001f0 <strlen>
 80006c2:	4603      	mov	r3, r0
 80006c4:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart6, (uint8_t *) data, size, 100);
 80006c6:	89fa      	ldrh	r2, [r7, #14]
 80006c8:	2364      	movs	r3, #100	; 0x64
 80006ca:	6879      	ldr	r1, [r7, #4]
 80006cc:	4803      	ldr	r0, [pc, #12]	; (80006dc <uart_write+0x28>)
 80006ce:	f002 feac 	bl	800342a <HAL_UART_Transmit>
}
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000354 	.word	0x20000354

080006e0 <uart_write_newline>:

void uart_write_newline(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	uart_write(newline);
 80006e4:	4802      	ldr	r0, [pc, #8]	; (80006f0 <uart_write_newline+0x10>)
 80006e6:	f7ff ffe5 	bl	80006b4 <uart_write>
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000004 	.word	0x20000004

080006f4 <process_char>:

bool process_char(char *c) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	if (is_digit(&c[0]) || ENTER_ASCII == c[0])
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f7ff ffc1 	bl	8000684 <is_digit>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d103      	bne.n	8000710 <process_char+0x1c>
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b0d      	cmp	r3, #13
 800070e:	d101      	bne.n	8000714 <process_char+0x20>
		return true;
 8000710:	2301      	movs	r3, #1
 8000712:	e011      	b.n	8000738 <process_char+0x44>
	if (('a' == c[0] || '+' == c[0]) && game_mode == INFO)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b61      	cmp	r3, #97	; 0x61
 800071a:	d003      	beq.n	8000724 <process_char+0x30>
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b2b      	cmp	r3, #43	; 0x2b
 8000722:	d105      	bne.n	8000730 <process_char+0x3c>
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <process_char+0x4c>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d101      	bne.n	8000730 <process_char+0x3c>
		return true;
 800072c:	2301      	movs	r3, #1
 800072e:	e003      	b.n	8000738 <process_char+0x44>
	c[0] = '\0';
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
	return false;
 8000736:	2300      	movs	r3, #0
}
 8000738:	4618      	mov	r0, r3
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	2000025e 	.word	0x2000025e

08000744 <uart_read_char>:

void uart_read_char(void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_UART_Receive(&huart6, (uint8_t *) buf_char, sizeof(char), 100);
 800074a:	2364      	movs	r3, #100	; 0x64
 800074c:	2201      	movs	r2, #1
 800074e:	490b      	ldr	r1, [pc, #44]	; (800077c <uart_read_char+0x38>)
 8000750:	480b      	ldr	r0, [pc, #44]	; (8000780 <uart_read_char+0x3c>)
 8000752:	f002 fefc 	bl	800354e <HAL_UART_Receive>
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
	if (HAL_OK == status && process_char(buf_char))
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d108      	bne.n	8000772 <uart_read_char+0x2e>
 8000760:	4806      	ldr	r0, [pc, #24]	; (800077c <uart_read_char+0x38>)
 8000762:	f7ff ffc7 	bl	80006f4 <process_char>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d002      	beq.n	8000772 <uart_read_char+0x2e>
		uart_write(buf_char);
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <uart_read_char+0x38>)
 800076e:	f7ff ffa1 	bl	80006b4 <uart_write>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	2000025c 	.word	0x2000025c
 8000780:	20000354 	.word	0x20000354

08000784 <play_sound>:

void play_sound(uint32_t *frequency) {
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	htim1.Instance->ARR = (1000000 / (*frequency)) - 1; // Set The PWM Frequency
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a09      	ldr	r2, [pc, #36]	; (80007b8 <play_sound+0x34>)
 8000792:	fbb2 f2f3 	udiv	r2, r2, r3
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <play_sound+0x38>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	3a01      	subs	r2, #1
 800079c:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1.Instance->CCR1 = (htim1.Instance->ARR >> 1); // Set Duty Cycle 50%
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <play_sound+0x38>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <play_sound+0x38>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	0852      	lsrs	r2, r2, #1
 80007aa:	635a      	str	r2, [r3, #52]	; 0x34
//	printf("ARR = %lu | F = %lu\n", htim1.Instance->ARR, 60000000 / (htim1.Instance->PSC + 1) / (htim1.Instance->ARR + 1));
}
 80007ac:	bf00      	nop
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	000f4240 	.word	0x000f4240
 80007bc:	2000027c 	.word	0x2000027c

080007c0 <mute>:

void mute(void) {
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
	htim1.Instance->CCR1 = 0;
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <mute+0x18>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2200      	movs	r2, #0
 80007ca:	635a      	str	r2, [r3, #52]	; 0x34
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	2000027c 	.word	0x2000027c

080007dc <disable_all_leds>:

void disable_all_leds(void) {
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
	htim4.Instance->CCR2 = 0;
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <disable_all_leds+0x28>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2200      	movs	r2, #0
 80007e6:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance->CCR3 = 0;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <disable_all_leds+0x28>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2200      	movs	r2, #0
 80007ee:	63da      	str	r2, [r3, #60]	; 0x3c
	htim4.Instance->CCR4 = 0;
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <disable_all_leds+0x28>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2200      	movs	r2, #0
 80007f6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	200002c4 	.word	0x200002c4

08000808 <light_led>:

void light_led(LED *led, LEDBrightness *brightness) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
	disable_all_leds();
 8000812:	f7ff ffe3 	bl	80007dc <disable_all_leds>
	uint16_t ccr_value = CLOCK_SCALED_FREQUENCY / LED_PWM_FREQUENCY * (*brightness) / 100;
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	b29b      	uxth	r3, r3
 800081c:	461a      	mov	r2, r3
 800081e:	0092      	lsls	r2, r2, #2
 8000820:	4413      	add	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	81fb      	strh	r3, [r7, #14]
	switch (*led) {
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b02      	cmp	r3, #2
 800082c:	d010      	beq.n	8000850 <light_led+0x48>
 800082e:	2b02      	cmp	r3, #2
 8000830:	dc13      	bgt.n	800085a <light_led+0x52>
 8000832:	2b00      	cmp	r3, #0
 8000834:	d002      	beq.n	800083c <light_led+0x34>
 8000836:	2b01      	cmp	r3, #1
 8000838:	d005      	beq.n	8000846 <light_led+0x3e>
			break;
		case RED:
			htim4.Instance->CCR4 = ccr_value;
			break;
	}
}
 800083a:	e00e      	b.n	800085a <light_led+0x52>
			htim4.Instance->CCR2 = ccr_value;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <light_led+0x5c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	89fa      	ldrh	r2, [r7, #14]
 8000842:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8000844:	e009      	b.n	800085a <light_led+0x52>
			htim4.Instance->CCR3 = ccr_value;
 8000846:	4b07      	ldr	r3, [pc, #28]	; (8000864 <light_led+0x5c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	89fa      	ldrh	r2, [r7, #14]
 800084c:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800084e:	e004      	b.n	800085a <light_led+0x52>
			htim4.Instance->CCR4 = ccr_value;
 8000850:	4b04      	ldr	r3, [pc, #16]	; (8000864 <light_led+0x5c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	89fa      	ldrh	r2, [r7, #14]
 8000856:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000858:	bf00      	nop
}
 800085a:	bf00      	nop
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200002c4 	.word	0x200002c4

08000868 <play_note>:

void play_note(Note *note) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	switch (note_mode) {
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <play_note+0x5c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d01b      	beq.n	80008b0 <play_note+0x48>
 8000878:	2b02      	cmp	r3, #2
 800087a:	dc1f      	bgt.n	80008bc <play_note+0x54>
 800087c:	2b00      	cmp	r3, #0
 800087e:	d002      	beq.n	8000886 <play_note+0x1e>
 8000880:	2b01      	cmp	r3, #1
 8000882:	d00d      	beq.n	80008a0 <play_note+0x38>
			break;
		case SOUND_ONLY:
			play_sound(&note->frequency);
			break;
	}
}
 8000884:	e01a      	b.n	80008bc <play_note+0x54>
			play_sound(&note->frequency);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3304      	adds	r3, #4
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ff7a 	bl	8000784 <play_sound>
			light_led(&note->led, &note->brightness);
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	3301      	adds	r3, #1
 8000896:	4619      	mov	r1, r3
 8000898:	4610      	mov	r0, r2
 800089a:	f7ff ffb5 	bl	8000808 <light_led>
			break;
 800089e:	e00d      	b.n	80008bc <play_note+0x54>
			light_led(&note->led, &note->brightness);
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3301      	adds	r3, #1
 80008a6:	4619      	mov	r1, r3
 80008a8:	4610      	mov	r0, r2
 80008aa:	f7ff ffad 	bl	8000808 <light_led>
			break;
 80008ae:	e005      	b.n	80008bc <play_note+0x54>
			play_sound(&note->frequency);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3304      	adds	r3, #4
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff65 	bl	8000784 <play_sound>
			break;
 80008ba:	bf00      	nop
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	2000025f 	.word	0x2000025f

080008c8 <stop_note>:

void stop_note(void) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	mute();
 80008cc:	f7ff ff78 	bl	80007c0 <mute>
	disable_all_leds();
 80008d0:	f7ff ff84 	bl	80007dc <disable_all_leds>
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <uart_write_note_info>:

void uart_write_note_info(Note *note) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b0c6      	sub	sp, #280	; 0x118
 80008dc:	af02      	add	r7, sp, #8
 80008de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80008e6:	6018      	str	r0, [r3, #0]
	char buf[256];
	char *colour = note->led == GREEN ? "green" : (note->led == YELLOW ? "yellow" : "red");
 80008e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d00b      	beq.n	8000910 <uart_write_note_info+0x38>
 80008f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d101      	bne.n	800090c <uart_write_note_info+0x34>
 8000908:	4b1c      	ldr	r3, [pc, #112]	; (800097c <uart_write_note_info+0xa4>)
 800090a:	e002      	b.n	8000912 <uart_write_note_info+0x3a>
 800090c:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <uart_write_note_info+0xa8>)
 800090e:	e000      	b.n	8000912 <uart_write_note_info+0x3a>
 8000910:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <uart_write_note_info+0xac>)
 8000912:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t brightness = note->brightness == LOW ? 20 : (note->brightness == MEDIUM ? 50 : 100);
 8000916:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800091a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	785b      	ldrb	r3, [r3, #1]
 8000922:	2b14      	cmp	r3, #20
 8000924:	d00b      	beq.n	800093e <uart_write_note_info+0x66>
 8000926:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800092a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	785b      	ldrb	r3, [r3, #1]
 8000932:	2b32      	cmp	r3, #50	; 0x32
 8000934:	d101      	bne.n	800093a <uart_write_note_info+0x62>
 8000936:	2332      	movs	r3, #50	; 0x32
 8000938:	e002      	b.n	8000940 <uart_write_note_info+0x68>
 800093a:	2364      	movs	r3, #100	; 0x64
 800093c:	e000      	b.n	8000940 <uart_write_note_info+0x68>
 800093e:	2314      	movs	r3, #20
 8000940:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b

	sprintf(buf, "\n\rNote colour: %s\n\rNote brightness: %d\n\rNote frequency: %lu\n\r", colour, brightness, note->frequency);
 8000944:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 8000948:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800094c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	f107 0008 	add.w	r0, r7, #8
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	4613      	mov	r3, r2
 800095c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000960:	4909      	ldr	r1, [pc, #36]	; (8000988 <uart_write_note_info+0xb0>)
 8000962:	f003 fe61 	bl	8004628 <siprintf>

	uart_write(buf);
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fea2 	bl	80006b4 <uart_write>
}
 8000970:	bf00      	nop
 8000972:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	080052f8 	.word	0x080052f8
 8000980:	08005300 	.word	0x08005300
 8000984:	08005304 	.word	0x08005304
 8000988:	0800530c 	.word	0x0800530c

0800098c <countdown_start_game>:

void countdown_start_game(void) {
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	uart_write(countdown_prepare_msg);
 8000990:	480c      	ldr	r0, [pc, #48]	; (80009c4 <countdown_start_game+0x38>)
 8000992:	f7ff fe8f 	bl	80006b4 <uart_write>
	uart_write(countdown_3_msg);
 8000996:	480c      	ldr	r0, [pc, #48]	; (80009c8 <countdown_start_game+0x3c>)
 8000998:	f7ff fe8c 	bl	80006b4 <uart_write>
	HAL_Delay(1000);
 800099c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009a0:	f000 fe6c 	bl	800167c <HAL_Delay>
	uart_write(countdown_2_msg);
 80009a4:	4809      	ldr	r0, [pc, #36]	; (80009cc <countdown_start_game+0x40>)
 80009a6:	f7ff fe85 	bl	80006b4 <uart_write>
	HAL_Delay(1000);
 80009aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ae:	f000 fe65 	bl	800167c <HAL_Delay>
	uart_write(countdown_1_msg);
 80009b2:	4807      	ldr	r0, [pc, #28]	; (80009d0 <countdown_start_game+0x44>)
 80009b4:	f7ff fe7e 	bl	80006b4 <uart_write>
	HAL_Delay(1000);
 80009b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009bc:	f000 fe5e 	bl	800167c <HAL_Delay>
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200000f0 	.word	0x200000f0
 80009c8:	20000108 	.word	0x20000108
 80009cc:	20000120 	.word	0x20000120
 80009d0:	20000138 	.word	0x20000138

080009d4 <stop_timer>:

void stop_timer(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim6);
 80009d8:	4804      	ldr	r0, [pc, #16]	; (80009ec <stop_timer+0x18>)
 80009da:	f001 fe49 	bl	8002670 <HAL_TIM_Base_Stop_IT>
	htim6.Instance->ARR = 0;
 80009de:	4b03      	ldr	r3, [pc, #12]	; (80009ec <stop_timer+0x18>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2200      	movs	r2, #0
 80009e4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2000030c 	.word	0x2000030c

080009f0 <set_timer_ms>:

void set_timer_ms(uint32_t ms) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	htim6.Instance->ARR = ms - 1;
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <set_timer_ms+0x20>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	3a01      	subs	r2, #1
 8000a00:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_Base_Start_IT(&htim6);
 8000a02:	4803      	ldr	r0, [pc, #12]	; (8000a10 <set_timer_ms+0x20>)
 8000a04:	f001 fdc4 	bl	8002590 <HAL_TIM_Base_Start_IT>
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	2000030c 	.word	0x2000030c

08000a14 <finish_game>:

void finish_game(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b0c2      	sub	sp, #264	; 0x108
 8000a18:	af00      	add	r7, sp, #0
	stop_timer();
 8000a1a:	f7ff ffdb 	bl	80009d4 <stop_timer>
	stop_note();
 8000a1e:	f7ff ff53 	bl	80008c8 <stop_note>

	uart_write_newline();
 8000a22:	f7ff fe5d 	bl	80006e0 <uart_write_newline>
	uart_write(game_finished_msg);
 8000a26:	482c      	ldr	r0, [pc, #176]	; (8000ad8 <finish_game+0xc4>)
 8000a28:	f7ff fe44 	bl	80006b4 <uart_write>

	char buf[256];
	uint8_t points = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	for (uint8_t i = 0; i < note_sequence_length; i++) {
 8000a32:	2300      	movs	r3, #0
 8000a34:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8000a38:	e02f      	b.n	8000a9a <finish_game+0x86>
		sprintf(buf, "Note %d: %s\n\r", i + 1, guess_status[i] ? "correct" : "wrong");
 8000a3a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000a3e:	1c5a      	adds	r2, r3, #1
 8000a40:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000a44:	4925      	ldr	r1, [pc, #148]	; (8000adc <finish_game+0xc8>)
 8000a46:	5ccb      	ldrb	r3, [r1, r3]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <finish_game+0x3c>
 8000a4c:	4b24      	ldr	r3, [pc, #144]	; (8000ae0 <finish_game+0xcc>)
 8000a4e:	e000      	b.n	8000a52 <finish_game+0x3e>
 8000a50:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <finish_game+0xd0>)
 8000a52:	1d38      	adds	r0, r7, #4
 8000a54:	4924      	ldr	r1, [pc, #144]	; (8000ae8 <finish_game+0xd4>)
 8000a56:	f003 fde7 	bl	8004628 <siprintf>
		uart_write(buf);
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fe29 	bl	80006b4 <uart_write>
		points += (guess_status[i] * (4 - difficulty));
 8000a62:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000a66:	4a1d      	ldr	r2, [pc, #116]	; (8000adc <finish_game+0xc8>)
 8000a68:	5cd3      	ldrb	r3, [r2, r3]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <finish_game+0xd8>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	f1c3 0304 	rsb	r3, r3, #4
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	fb12 f303 	smulbb	r3, r2, r3
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8000a80:	4413      	add	r3, r2
 8000a82:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

		guess_status[i] = false;
 8000a86:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000a8a:	4a14      	ldr	r2, [pc, #80]	; (8000adc <finish_game+0xc8>)
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < note_sequence_length; i++) {
 8000a90:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000a94:	3301      	adds	r3, #1
 8000a96:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <finish_game+0xdc>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d3c9      	bcc.n	8000a3a <finish_game+0x26>
	}

	sprintf(buf, "Your score: %d\n\r", points);
 8000aa6:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	4911      	ldr	r1, [pc, #68]	; (8000af4 <finish_game+0xe0>)
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f003 fdba 	bl	8004628 <siprintf>
	uart_write(buf);
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fdfc 	bl	80006b4 <uart_write>

	cur_note_ptr = 0;
 8000abc:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <finish_game+0xe4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
	cur_guess = 0;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <finish_game+0xe8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
	game_started = false;
 8000ac8:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <finish_game+0xec>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	2000001c 	.word	0x2000001c
 8000adc:	20000260 	.word	0x20000260
 8000ae0:	0800534c 	.word	0x0800534c
 8000ae4:	08005354 	.word	0x08005354
 8000ae8:	0800535c 	.word	0x0800535c
 8000aec:	20000161 	.word	0x20000161
 8000af0:	200001ac 	.word	0x200001ac
 8000af4:	0800536c 	.word	0x0800536c
 8000af8:	20000274 	.word	0x20000274
 8000afc:	20000275 	.word	0x20000275
 8000b00:	20000258 	.word	0x20000258

08000b04 <switch_game_mode>:

void switch_game_mode(void) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	switch (game_mode) {
 8000b08:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <switch_game_mode+0x90>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d002      	beq.n	8000b16 <switch_game_mode+0x12>
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d022      	beq.n	8000b5a <switch_game_mode+0x56>
			if (cur_note_ptr < note_sequence_length && cur_guess == note_sequence[cur_note_ptr])
				guess_status[cur_note_ptr] = true;
			finish_game();
			break;
	}
}
 8000b14:	e03c      	b.n	8000b90 <switch_game_mode+0x8c>
			game_mode = PLAY;
 8000b16:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <switch_game_mode+0x90>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	701a      	strb	r2, [r3, #0]
			countdown_start_game();
 8000b1c:	f7ff ff36 	bl	800098c <countdown_start_game>
			uart_write(game_started_msg);
 8000b20:	481d      	ldr	r0, [pc, #116]	; (8000b98 <switch_game_mode+0x94>)
 8000b22:	f7ff fdc7 	bl	80006b4 <uart_write>
			uart_write(guess_note_msg);
 8000b26:	481d      	ldr	r0, [pc, #116]	; (8000b9c <switch_game_mode+0x98>)
 8000b28:	f7ff fdc4 	bl	80006b4 <uart_write>
			play_note(&notes[note_sequence[cur_note_ptr] - 1]);
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <switch_game_mode+0x9c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <switch_game_mode+0xa0>)
 8000b34:	5c9b      	ldrb	r3, [r3, r2]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	4a1b      	ldr	r2, [pc, #108]	; (8000ba8 <switch_game_mode+0xa4>)
 8000b3c:	4413      	add	r3, r2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fe92 	bl	8000868 <play_note>
			set_timer_ms(difficulty * 1000);
 8000b44:	4b19      	ldr	r3, [pc, #100]	; (8000bac <switch_game_mode+0xa8>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4e:	fb02 f303 	mul.w	r3, r2, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff ff4c 	bl	80009f0 <set_timer_ms>
			break;
 8000b58:	e01a      	b.n	8000b90 <switch_game_mode+0x8c>
			game_mode = INFO;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <switch_game_mode+0x90>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
			if (cur_note_ptr < note_sequence_length && cur_guess == note_sequence[cur_note_ptr])
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <switch_game_mode+0x9c>)
 8000b62:	781a      	ldrb	r2, [r3, #0]
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <switch_game_mode+0xac>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d20e      	bcs.n	8000b8a <switch_game_mode+0x86>
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <switch_game_mode+0x9c>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <switch_game_mode+0xa0>)
 8000b74:	5c9a      	ldrb	r2, [r3, r2]
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <switch_game_mode+0xb0>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d105      	bne.n	8000b8a <switch_game_mode+0x86>
				guess_status[cur_note_ptr] = true;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <switch_game_mode+0x9c>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <switch_game_mode+0xb4>)
 8000b86:	2101      	movs	r1, #1
 8000b88:	5499      	strb	r1, [r3, r2]
			finish_game();
 8000b8a:	f7ff ff43 	bl	8000a14 <finish_game>
			break;
 8000b8e:	bf00      	nop
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	2000025e 	.word	0x2000025e
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	20000150 	.word	0x20000150
 8000ba0:	20000274 	.word	0x20000274
 8000ba4:	200001b0 	.word	0x200001b0
 8000ba8:	20000164 	.word	0x20000164
 8000bac:	20000161 	.word	0x20000161
 8000bb0:	200001ac 	.word	0x200001ac
 8000bb4:	20000275 	.word	0x20000275
 8000bb8:	20000260 	.word	0x20000260

08000bbc <switch_note_mode>:

void switch_note_mode(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	stop_note();
 8000bc0:	f7ff fe82 	bl	80008c8 <stop_note>
	switch (note_mode) {
 8000bc4:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <switch_note_mode+0x4c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d014      	beq.n	8000bf6 <switch_note_mode+0x3a>
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	dc19      	bgt.n	8000c04 <switch_note_mode+0x48>
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d002      	beq.n	8000bda <switch_note_mode+0x1e>
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d007      	beq.n	8000be8 <switch_note_mode+0x2c>
		case SOUND_ONLY:
			note_mode = ALL;
			uart_write(note_mode_all_msg);
			break;
	}
}
 8000bd8:	e014      	b.n	8000c04 <switch_note_mode+0x48>
			note_mode = LED_ONLY;
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <switch_note_mode+0x4c>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	701a      	strb	r2, [r3, #0]
			uart_write(note_mode_led_msg);
 8000be0:	480a      	ldr	r0, [pc, #40]	; (8000c0c <switch_note_mode+0x50>)
 8000be2:	f7ff fd67 	bl	80006b4 <uart_write>
			break;
 8000be6:	e00d      	b.n	8000c04 <switch_note_mode+0x48>
			note_mode = SOUND_ONLY;
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <switch_note_mode+0x4c>)
 8000bea:	2202      	movs	r2, #2
 8000bec:	701a      	strb	r2, [r3, #0]
			uart_write(note_mode_sound_msg);
 8000bee:	4808      	ldr	r0, [pc, #32]	; (8000c10 <switch_note_mode+0x54>)
 8000bf0:	f7ff fd60 	bl	80006b4 <uart_write>
			break;
 8000bf4:	e006      	b.n	8000c04 <switch_note_mode+0x48>
			note_mode = ALL;
 8000bf6:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <switch_note_mode+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
			uart_write(note_mode_all_msg);
 8000bfc:	4805      	ldr	r0, [pc, #20]	; (8000c14 <switch_note_mode+0x58>)
 8000bfe:	f7ff fd59 	bl	80006b4 <uart_write>
			break;
 8000c02:	bf00      	nop
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	2000025f 	.word	0x2000025f
 8000c0c:	2000004c 	.word	0x2000004c
 8000c10:	2000006c 	.word	0x2000006c
 8000c14:	20000030 	.word	0x20000030

08000c18 <switch_difficulty>:

void switch_difficulty(void) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	switch (difficulty) {
 8000c1c:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <switch_difficulty+0x48>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b03      	cmp	r3, #3
 8000c22:	d006      	beq.n	8000c32 <switch_difficulty+0x1a>
 8000c24:	2b03      	cmp	r3, #3
 8000c26:	dc19      	bgt.n	8000c5c <switch_difficulty+0x44>
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d010      	beq.n	8000c4e <switch_difficulty+0x36>
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d007      	beq.n	8000c40 <switch_difficulty+0x28>
		case HARD:
			difficulty= EASY;
			uart_write(difficulty_easy_msg);
			break;
	}
}
 8000c30:	e014      	b.n	8000c5c <switch_difficulty+0x44>
			difficulty= NORMAL;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <switch_difficulty+0x48>)
 8000c34:	2202      	movs	r2, #2
 8000c36:	701a      	strb	r2, [r3, #0]
			uart_write(difficulty_normal_msg);
 8000c38:	480a      	ldr	r0, [pc, #40]	; (8000c64 <switch_difficulty+0x4c>)
 8000c3a:	f7ff fd3b 	bl	80006b4 <uart_write>
			break;
 8000c3e:	e00d      	b.n	8000c5c <switch_difficulty+0x44>
			difficulty= HARD;
 8000c40:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <switch_difficulty+0x48>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	701a      	strb	r2, [r3, #0]
			uart_write(difficulty_hard_msg);
 8000c46:	4808      	ldr	r0, [pc, #32]	; (8000c68 <switch_difficulty+0x50>)
 8000c48:	f7ff fd34 	bl	80006b4 <uart_write>
			break;
 8000c4c:	e006      	b.n	8000c5c <switch_difficulty+0x44>
			difficulty= EASY;
 8000c4e:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <switch_difficulty+0x48>)
 8000c50:	2203      	movs	r2, #3
 8000c52:	701a      	strb	r2, [r3, #0]
			uart_write(difficulty_easy_msg);
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <switch_difficulty+0x54>)
 8000c56:	f7ff fd2d 	bl	80006b4 <uart_write>
			break;
 8000c5a:	bf00      	nop
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000161 	.word	0x20000161
 8000c64:	200000b0 	.word	0x200000b0
 8000c68:	200000d0 	.word	0x200000d0
 8000c6c:	20000090 	.word	0x20000090

08000c70 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a28      	ldr	r2, [pc, #160]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d14b      	bne.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0xaa>
		if (game_mode == INFO) {
 8000c82:	4b28      	ldr	r3, [pc, #160]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d107      	bne.n	8000c9a <HAL_TIM_PeriodElapsedCallback+0x2a>
			printf("INFO CALLBACK\n");
 8000c8a:	4827      	ldr	r0, [pc, #156]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000c8c:	f003 fcb4 	bl	80045f8 <puts>
			stop_note();
 8000c90:	f7ff fe1a 	bl	80008c8 <stop_note>
			stop_timer();
 8000c94:	f7ff fe9e 	bl	80009d4 <stop_timer>
			return;
 8000c98:	e03f      	b.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0xaa>
		}

		printf("GAME CALLBACK\n");
 8000c9a:	4824      	ldr	r0, [pc, #144]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000c9c:	f003 fcac 	bl	80045f8 <puts>
		if (!game_started) {
 8000ca0:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	f083 0301 	eor.w	r3, r3, #1
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <HAL_TIM_PeriodElapsedCallback+0x46>
			game_started = true;
 8000cae:	4b20      	ldr	r3, [pc, #128]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
			return;
 8000cb4:	e031      	b.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0xaa>
		}

		if (cur_guess == note_sequence[cur_note_ptr])
 8000cb6:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000cbe:	5c9a      	ldrb	r2, [r3, r2]
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d105      	bne.n	8000cd4 <HAL_TIM_PeriodElapsedCallback+0x64>
			guess_status[cur_note_ptr] = true;
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	5499      	strb	r1, [r3, r2]

		cur_guess = 0;
 8000cd4:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
		cur_note_ptr++;
 8000cda:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000ce4:	701a      	strb	r2, [r3, #0]

		if (cur_note_ptr == note_sequence_length) {
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000ce8:	781a      	ldrb	r2, [r3, #0]
 8000cea:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d102      	bne.n	8000cf8 <HAL_TIM_PeriodElapsedCallback+0x88>
			switch_game_mode();
 8000cf2:	f7ff ff07 	bl	8000b04 <switch_game_mode>
 8000cf6:	e010      	b.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0xaa>
		} else {
			uart_write_newline();
 8000cf8:	f7ff fcf2 	bl	80006e0 <uart_write_newline>
			uart_write(guess_note_msg);
 8000cfc:	4812      	ldr	r0, [pc, #72]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000cfe:	f7ff fcd9 	bl	80006b4 <uart_write>
			play_note(&notes[note_sequence[cur_note_ptr] - 1]);
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	461a      	mov	r2, r3
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d0a:	5c9b      	ldrb	r3, [r3, r2]
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000d12:	4413      	add	r3, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fda7 	bl	8000868 <play_note>
		}
	}
}
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40001000 	.word	0x40001000
 8000d24:	2000025e 	.word	0x2000025e
 8000d28:	08005380 	.word	0x08005380
 8000d2c:	08005390 	.word	0x08005390
 8000d30:	20000258 	.word	0x20000258
 8000d34:	20000274 	.word	0x20000274
 8000d38:	200001b0 	.word	0x200001b0
 8000d3c:	20000275 	.word	0x20000275
 8000d40:	20000260 	.word	0x20000260
 8000d44:	200001ac 	.word	0x200001ac
 8000d48:	20000150 	.word	0x20000150
 8000d4c:	20000164 	.word	0x20000164

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000d56:	f003 f9a5 	bl	80040a4 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5a:	f000 fc1d 	bl	8001598 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5e:	f000 f87d 	bl	8000e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d62:	f7ff fc1f 	bl	80005a4 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000d66:	f000 fa13 	bl	8001190 <MX_TIM4_Init>
  MX_TIM6_Init();
 8000d6a:	f000 fa7f 	bl	800126c <MX_TIM6_Init>
  MX_USART6_UART_Init();
 8000d6e:	f000 fb77 	bl	8001460 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8000d72:	f000 f989 	bl	8001088 <MX_TIM1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000d76:	2104      	movs	r1, #4
 8000d78:	4832      	ldr	r0, [pc, #200]	; (8000e44 <main+0xf4>)
 8000d7a:	f001 fcf7 	bl	800276c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000d7e:	2108      	movs	r1, #8
 8000d80:	4830      	ldr	r0, [pc, #192]	; (8000e44 <main+0xf4>)
 8000d82:	f001 fcf3 	bl	800276c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000d86:	210c      	movs	r1, #12
 8000d88:	482e      	ldr	r0, [pc, #184]	; (8000e44 <main+0xf4>)
 8000d8a:	f001 fcef 	bl	800276c <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim1);
 8000d8e:	482e      	ldr	r0, [pc, #184]	; (8000e48 <main+0xf8>)
 8000d90:	f001 fbfe 	bl	8002590 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d94:	2100      	movs	r1, #0
 8000d96:	482c      	ldr	r0, [pc, #176]	; (8000e48 <main+0xf8>)
 8000d98:	f001 fce8 	bl	800276c <HAL_TIM_PWM_Start>

  init_led_pwm();
 8000d9c:	f7ff fc62 	bl	8000664 <init_led_pwm>
  stop_timer();
 8000da0:	f7ff fe18 	bl	80009d4 <stop_timer>

  while (1)
  {
	  buf_char[0] = '\0';
 8000da4:	4b29      	ldr	r3, [pc, #164]	; (8000e4c <main+0xfc>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
	  uart_read_char();
 8000daa:	f7ff fccb 	bl	8000744 <uart_read_char>
	  if (buf_char[0] == '\0')
 8000dae:	4b27      	ldr	r3, [pc, #156]	; (8000e4c <main+0xfc>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d044      	beq.n	8000e40 <main+0xf0>
		  continue;

	  if (buf_char[0] == ENTER_ASCII) {
 8000db6:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <main+0xfc>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b0d      	cmp	r3, #13
 8000dbc:	d102      	bne.n	8000dc4 <main+0x74>
		  switch_game_mode();
 8000dbe:	f7ff fea1 	bl	8000b04 <switch_game_mode>
		  continue;
 8000dc2:	e03e      	b.n	8000e42 <main+0xf2>
	  }

	  if (is_digit(&buf_char[0])) {
 8000dc4:	4821      	ldr	r0, [pc, #132]	; (8000e4c <main+0xfc>)
 8000dc6:	f7ff fc5d 	bl	8000684 <is_digit>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d021      	beq.n	8000e14 <main+0xc4>
		  if (game_mode == INFO) {
 8000dd0:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <main+0x100>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d116      	bne.n	8000e06 <main+0xb6>
			  uint8_t id = buf_char[0] - '0' - 1;
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <main+0xfc>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	3b31      	subs	r3, #49	; 0x31
 8000dde:	71fb      	strb	r3, [r7, #7]
			  play_note(&notes[id]);
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	4a1b      	ldr	r2, [pc, #108]	; (8000e54 <main+0x104>)
 8000de6:	4413      	add	r3, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fd3d 	bl	8000868 <play_note>
			  uart_write_note_info(&notes[id]);
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	4a18      	ldr	r2, [pc, #96]	; (8000e54 <main+0x104>)
 8000df4:	4413      	add	r3, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fd6e 	bl	80008d8 <uart_write_note_info>

//			  stop_timer();
			  set_timer_ms(1000);
 8000dfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e00:	f7ff fdf6 	bl	80009f0 <set_timer_ms>
		  } else {
			  cur_guess = buf_char[0] - '0';
		  }
		  continue;
 8000e04:	e01d      	b.n	8000e42 <main+0xf2>
			  cur_guess = buf_char[0] - '0';
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <main+0xfc>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	3b30      	subs	r3, #48	; 0x30
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <main+0x108>)
 8000e10:	701a      	strb	r2, [r3, #0]
		  continue;
 8000e12:	e016      	b.n	8000e42 <main+0xf2>
	  }

	  if (buf_char[0] == 'a' && game_mode == INFO) {
 8000e14:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <main+0xfc>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b61      	cmp	r3, #97	; 0x61
 8000e1a:	d106      	bne.n	8000e2a <main+0xda>
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <main+0x100>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d102      	bne.n	8000e2a <main+0xda>
		  switch_note_mode();
 8000e24:	f7ff feca 	bl	8000bbc <switch_note_mode>
		  continue;
 8000e28:	e00b      	b.n	8000e42 <main+0xf2>
	  }

	  if (buf_char[0] == '+' && game_mode == INFO) {
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <main+0xfc>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b2b      	cmp	r3, #43	; 0x2b
 8000e30:	d1b8      	bne.n	8000da4 <main+0x54>
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <main+0x100>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1b4      	bne.n	8000da4 <main+0x54>
		  switch_difficulty();
 8000e3a:	f7ff feed 	bl	8000c18 <switch_difficulty>
		  continue;
 8000e3e:	e000      	b.n	8000e42 <main+0xf2>
		  continue;
 8000e40:	bf00      	nop
	  buf_char[0] = '\0';
 8000e42:	e7af      	b.n	8000da4 <main+0x54>
 8000e44:	200002c4 	.word	0x200002c4
 8000e48:	2000027c 	.word	0x2000027c
 8000e4c:	2000025c 	.word	0x2000025c
 8000e50:	2000025e 	.word	0x2000025e
 8000e54:	20000164 	.word	0x20000164
 8000e58:	20000275 	.word	0x20000275

08000e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b094      	sub	sp, #80	; 0x50
 8000e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e62:	f107 0320 	add.w	r3, r7, #32
 8000e66:	2230      	movs	r2, #48	; 0x30
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f003 fab9 	bl	80043e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	4b29      	ldr	r3, [pc, #164]	; (8000f2c <SystemClock_Config+0xd0>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	4a28      	ldr	r2, [pc, #160]	; (8000f2c <SystemClock_Config+0xd0>)
 8000e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e90:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <SystemClock_Config+0xd0>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <SystemClock_Config+0xd4>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ea8:	4a21      	ldr	r2, [pc, #132]	; (8000f30 <SystemClock_Config+0xd4>)
 8000eaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <SystemClock_Config+0xd4>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ec0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ece:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000ed0:	230f      	movs	r3, #15
 8000ed2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000ed4:	2348      	movs	r3, #72	; 0x48
 8000ed6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000edc:	2304      	movs	r3, #4
 8000ede:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee0:	f107 0320 	add.w	r3, r7, #32
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 feab 	bl	8001c40 <HAL_RCC_OscConfig>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ef0:	f000 f820 	bl	8000f34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef4:	230f      	movs	r3, #15
 8000ef6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	2101      	movs	r1, #1
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 f90c 	bl	8002130 <HAL_RCC_ClockConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f1e:	f000 f809 	bl	8000f34 <Error_Handler>
  }
}
 8000f22:	bf00      	nop
 8000f24:	3750      	adds	r7, #80	; 0x50
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40007000 	.word	0x40007000

08000f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f38:	b672      	cpsid	i
}
 8000f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <Error_Handler+0x8>
	...

08000f40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <HAL_MspInit+0x4c>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	4a0f      	ldr	r2, [pc, #60]	; (8000f8c <HAL_MspInit+0x4c>)
 8000f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f54:	6453      	str	r3, [r2, #68]	; 0x44
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <HAL_MspInit+0x4c>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	603b      	str	r3, [r7, #0]
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <HAL_MspInit+0x4c>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <HAL_MspInit+0x4c>)
 8000f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f70:	6413      	str	r3, [r2, #64]	; 0x40
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_MspInit+0x4c>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40023800 	.word	0x40023800

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <NMI_Handler+0x4>

08000f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <HardFault_Handler+0x4>

08000f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <MemManage_Handler+0x4>

08000fa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <BusFault_Handler+0x4>

08000fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <UsageFault_Handler+0x4>

08000fae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fdc:	f000 fb2e 	bl	800163c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <TIM6_DAC_IRQHandler+0x10>)
 8000fea:	f001 fc87 	bl	80028fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000030c 	.word	0x2000030c

08000ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001000:	4a14      	ldr	r2, [pc, #80]	; (8001054 <_sbrk+0x5c>)
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <_sbrk+0x60>)
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <_sbrk+0x64>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d102      	bne.n	800101a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <_sbrk+0x64>)
 8001016:	4a12      	ldr	r2, [pc, #72]	; (8001060 <_sbrk+0x68>)
 8001018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	429a      	cmp	r2, r3
 8001026:	d207      	bcs.n	8001038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001028:	f003 f8b8 	bl	800419c <__errno>
 800102c:	4603      	mov	r3, r0
 800102e:	220c      	movs	r2, #12
 8001030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001036:	e009      	b.n	800104c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <_sbrk+0x64>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103e:	4b07      	ldr	r3, [pc, #28]	; (800105c <_sbrk+0x64>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	4a05      	ldr	r2, [pc, #20]	; (800105c <_sbrk+0x64>)
 8001048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800104a:	68fb      	ldr	r3, [r7, #12]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20030000 	.word	0x20030000
 8001058:	00000400 	.word	0x00000400
 800105c:	20000278 	.word	0x20000278
 8001060:	20000458 	.word	0x20000458

08001064 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <SystemInit+0x20>)
 800106a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106e:	4a05      	ldr	r2, [pc, #20]	; (8001084 <SystemInit+0x20>)
 8001070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b092      	sub	sp, #72	; 0x48
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800108e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
 80010a8:	615a      	str	r2, [r3, #20]
 80010aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2220      	movs	r2, #32
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f003 f995 	bl	80043e2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010b8:	4b33      	ldr	r3, [pc, #204]	; (8001188 <MX_TIM1_Init+0x100>)
 80010ba:	4a34      	ldr	r2, [pc, #208]	; (800118c <MX_TIM1_Init+0x104>)
 80010bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 59;
 80010be:	4b32      	ldr	r3, [pc, #200]	; (8001188 <MX_TIM1_Init+0x100>)
 80010c0:	223b      	movs	r2, #59	; 0x3b
 80010c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c4:	4b30      	ldr	r3, [pc, #192]	; (8001188 <MX_TIM1_Init+0x100>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80010ca:	4b2f      	ldr	r3, [pc, #188]	; (8001188 <MX_TIM1_Init+0x100>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d0:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <MX_TIM1_Init+0x100>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010d6:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <MX_TIM1_Init+0x100>)
 80010d8:	2200      	movs	r2, #0
 80010da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010dc:	4b2a      	ldr	r3, [pc, #168]	; (8001188 <MX_TIM1_Init+0x100>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010e2:	4829      	ldr	r0, [pc, #164]	; (8001188 <MX_TIM1_Init+0x100>)
 80010e4:	f001 faf3 	bl	80026ce <HAL_TIM_PWM_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80010ee:	f7ff ff21 	bl	8000f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f2:	2300      	movs	r3, #0
 80010f4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010fe:	4619      	mov	r1, r3
 8001100:	4821      	ldr	r0, [pc, #132]	; (8001188 <MX_TIM1_Init+0x100>)
 8001102:	f002 f863 	bl	80031cc <HAL_TIMEx_MasterConfigSynchronization>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 800110c:	f7ff ff12 	bl	8000f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001110:	2360      	movs	r3, #96	; 0x60
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 32769;
 8001114:	f248 0301 	movw	r3, #32769	; 0x8001
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800111a:	2300      	movs	r3, #0
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800111e:	2300      	movs	r3, #0
 8001120:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800112e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001132:	2200      	movs	r2, #0
 8001134:	4619      	mov	r1, r3
 8001136:	4814      	ldr	r0, [pc, #80]	; (8001188 <MX_TIM1_Init+0x100>)
 8001138:	f001 fce8 	bl	8002b0c <HAL_TIM_PWM_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001142:	f7ff fef7 	bl	8000f34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800115a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	4619      	mov	r1, r3
 8001168:	4807      	ldr	r0, [pc, #28]	; (8001188 <MX_TIM1_Init+0x100>)
 800116a:	f002 f8ab 	bl	80032c4 <HAL_TIMEx_ConfigBreakDeadTime>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001174:	f7ff fede 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001178:	4803      	ldr	r0, [pc, #12]	; (8001188 <MX_TIM1_Init+0x100>)
 800117a:	f000 f90d 	bl	8001398 <HAL_TIM_MspPostInit>

}
 800117e:	bf00      	nop
 8001180:	3748      	adds	r7, #72	; 0x48
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2000027c 	.word	0x2000027c
 800118c:	40010000 	.word	0x40010000

08001190 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001196:	f107 0320 	add.w	r3, r7, #32
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]
 80011ae:	615a      	str	r2, [r3, #20]
 80011b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011b2:	4b2c      	ldr	r3, [pc, #176]	; (8001264 <MX_TIM4_Init+0xd4>)
 80011b4:	4a2c      	ldr	r2, [pc, #176]	; (8001268 <MX_TIM4_Init+0xd8>)
 80011b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 59;
 80011b8:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <MX_TIM4_Init+0xd4>)
 80011ba:	223b      	movs	r2, #59	; 0x3b
 80011bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011be:	4b29      	ldr	r3, [pc, #164]	; (8001264 <MX_TIM4_Init+0xd4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80011c4:	4b27      	ldr	r3, [pc, #156]	; (8001264 <MX_TIM4_Init+0xd4>)
 80011c6:	2263      	movs	r2, #99	; 0x63
 80011c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ca:	4b26      	ldr	r3, [pc, #152]	; (8001264 <MX_TIM4_Init+0xd4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d0:	4b24      	ldr	r3, [pc, #144]	; (8001264 <MX_TIM4_Init+0xd4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80011d6:	4823      	ldr	r0, [pc, #140]	; (8001264 <MX_TIM4_Init+0xd4>)
 80011d8:	f001 fa79 	bl	80026ce <HAL_TIM_PWM_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80011e2:	f7ff fea7 	bl	8000f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011ee:	f107 0320 	add.w	r3, r7, #32
 80011f2:	4619      	mov	r1, r3
 80011f4:	481b      	ldr	r0, [pc, #108]	; (8001264 <MX_TIM4_Init+0xd4>)
 80011f6:	f001 ffe9 	bl	80031cc <HAL_TIMEx_MasterConfigSynchronization>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001200:	f7ff fe98 	bl	8000f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001204:	2360      	movs	r3, #96	; 0x60
 8001206:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	2204      	movs	r2, #4
 8001218:	4619      	mov	r1, r3
 800121a:	4812      	ldr	r0, [pc, #72]	; (8001264 <MX_TIM4_Init+0xd4>)
 800121c:	f001 fc76 	bl	8002b0c <HAL_TIM_PWM_ConfigChannel>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001226:	f7ff fe85 	bl	8000f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2208      	movs	r2, #8
 800122e:	4619      	mov	r1, r3
 8001230:	480c      	ldr	r0, [pc, #48]	; (8001264 <MX_TIM4_Init+0xd4>)
 8001232:	f001 fc6b 	bl	8002b0c <HAL_TIM_PWM_ConfigChannel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800123c:	f7ff fe7a 	bl	8000f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	220c      	movs	r2, #12
 8001244:	4619      	mov	r1, r3
 8001246:	4807      	ldr	r0, [pc, #28]	; (8001264 <MX_TIM4_Init+0xd4>)
 8001248:	f001 fc60 	bl	8002b0c <HAL_TIM_PWM_ConfigChannel>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 8001252:	f7ff fe6f 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001256:	4803      	ldr	r0, [pc, #12]	; (8001264 <MX_TIM4_Init+0xd4>)
 8001258:	f000 f89e 	bl	8001398 <HAL_TIM_MspPostInit>

}
 800125c:	bf00      	nop
 800125e:	3728      	adds	r7, #40	; 0x28
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	200002c4 	.word	0x200002c4
 8001268:	40000800 	.word	0x40000800

0800126c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001272:	463b      	mov	r3, r7
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <MX_TIM6_Init+0x64>)
 800127c:	4a15      	ldr	r2, [pc, #84]	; (80012d4 <MX_TIM6_Init+0x68>)
 800127e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 59999;
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <MX_TIM6_Init+0x64>)
 8001282:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001286:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <MX_TIM6_Init+0x64>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <MX_TIM6_Init+0x64>)
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001294:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <MX_TIM6_Init+0x64>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800129a:	480d      	ldr	r0, [pc, #52]	; (80012d0 <MX_TIM6_Init+0x64>)
 800129c:	f001 f928 	bl	80024f0 <HAL_TIM_Base_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80012a6:	f7ff fe45 	bl	8000f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012b2:	463b      	mov	r3, r7
 80012b4:	4619      	mov	r1, r3
 80012b6:	4806      	ldr	r0, [pc, #24]	; (80012d0 <MX_TIM6_Init+0x64>)
 80012b8:	f001 ff88 	bl	80031cc <HAL_TIMEx_MasterConfigSynchronization>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80012c2:	f7ff fe37 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000030c 	.word	0x2000030c
 80012d4:	40001000 	.word	0x40001000

080012d8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a15      	ldr	r2, [pc, #84]	; (800133c <HAL_TIM_PWM_MspInit+0x64>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d10e      	bne.n	8001308 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b14      	ldr	r3, [pc, #80]	; (8001340 <HAL_TIM_PWM_MspInit+0x68>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	4a13      	ldr	r2, [pc, #76]	; (8001340 <HAL_TIM_PWM_MspInit+0x68>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6453      	str	r3, [r2, #68]	; 0x44
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <HAL_TIM_PWM_MspInit+0x68>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001306:	e012      	b.n	800132e <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM4)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <HAL_TIM_PWM_MspInit+0x6c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d10d      	bne.n	800132e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_TIM_PWM_MspInit+0x68>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	4a09      	ldr	r2, [pc, #36]	; (8001340 <HAL_TIM_PWM_MspInit+0x68>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	6413      	str	r3, [r2, #64]	; 0x40
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <HAL_TIM_PWM_MspInit+0x68>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
}
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40010000 	.word	0x40010000
 8001340:	40023800 	.word	0x40023800
 8001344:	40000800 	.word	0x40000800

08001348 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <HAL_TIM_Base_MspInit+0x48>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d115      	bne.n	8001386 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <HAL_TIM_Base_MspInit+0x4c>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	4a0c      	ldr	r2, [pc, #48]	; (8001394 <HAL_TIM_Base_MspInit+0x4c>)
 8001364:	f043 0310 	orr.w	r3, r3, #16
 8001368:	6413      	str	r3, [r2, #64]	; 0x40
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_TIM_Base_MspInit+0x4c>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f003 0310 	and.w	r3, r3, #16
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	2036      	movs	r0, #54	; 0x36
 800137c:	f000 fa7d 	bl	800187a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001380:	2036      	movs	r0, #54	; 0x36
 8001382:	f000 fa96 	bl	80018b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40001000 	.word	0x40001000
 8001394:	40023800 	.word	0x40023800

08001398 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a25      	ldr	r2, [pc, #148]	; (800144c <HAL_TIM_MspPostInit+0xb4>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d11f      	bne.n	80013fa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	4b24      	ldr	r3, [pc, #144]	; (8001450 <HAL_TIM_MspPostInit+0xb8>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a23      	ldr	r2, [pc, #140]	; (8001450 <HAL_TIM_MspPostInit+0xb8>)
 80013c4:	f043 0310 	orr.w	r3, r3, #16
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b21      	ldr	r3, [pc, #132]	; (8001450 <HAL_TIM_MspPostInit+0xb8>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0310 	and.w	r3, r3, #16
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2300      	movs	r3, #0
 80013e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	4818      	ldr	r0, [pc, #96]	; (8001454 <HAL_TIM_MspPostInit+0xbc>)
 80013f4:	f000 fa78 	bl	80018e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80013f8:	e023      	b.n	8001442 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM4)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a16      	ldr	r2, [pc, #88]	; (8001458 <HAL_TIM_MspPostInit+0xc0>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d11e      	bne.n	8001442 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <HAL_TIM_MspPostInit+0xb8>)
 800140a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140c:	4a10      	ldr	r2, [pc, #64]	; (8001450 <HAL_TIM_MspPostInit+0xb8>)
 800140e:	f043 0308 	orr.w	r3, r3, #8
 8001412:	6313      	str	r3, [r2, #48]	; 0x30
 8001414:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <HAL_TIM_MspPostInit+0xb8>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	f003 0308 	and.w	r3, r3, #8
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001420:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001432:	2302      	movs	r3, #2
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	4807      	ldr	r0, [pc, #28]	; (800145c <HAL_TIM_MspPostInit+0xc4>)
 800143e:	f000 fa53 	bl	80018e8 <HAL_GPIO_Init>
}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	; 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40010000 	.word	0x40010000
 8001450:	40023800 	.word	0x40023800
 8001454:	40021000 	.word	0x40021000
 8001458:	40000800 	.word	0x40000800
 800145c:	40020c00 	.word	0x40020c00

08001460 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_USART6_UART_Init+0x4c>)
 8001466:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <MX_USART6_UART_Init+0x50>)
 8001468:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <MX_USART6_UART_Init+0x4c>)
 800146c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001470:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_USART6_UART_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <MX_USART6_UART_Init+0x4c>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <MX_USART6_UART_Init+0x4c>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_USART6_UART_Init+0x4c>)
 8001486:	220c      	movs	r2, #12
 8001488:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <MX_USART6_UART_Init+0x4c>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_USART6_UART_Init+0x4c>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_USART6_UART_Init+0x4c>)
 8001498:	f001 ff7a 	bl	8003390 <HAL_UART_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80014a2:	f7ff fd47 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000354 	.word	0x20000354
 80014b0:	40011400 	.word	0x40011400

080014b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a19      	ldr	r2, [pc, #100]	; (8001538 <HAL_UART_MspInit+0x84>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d12b      	bne.n	800152e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <HAL_UART_MspInit+0x88>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	4a17      	ldr	r2, [pc, #92]	; (800153c <HAL_UART_MspInit+0x88>)
 80014e0:	f043 0320 	orr.w	r3, r3, #32
 80014e4:	6453      	str	r3, [r2, #68]	; 0x44
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_UART_MspInit+0x88>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	f003 0320 	and.w	r3, r3, #32
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <HAL_UART_MspInit+0x88>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a10      	ldr	r2, [pc, #64]	; (800153c <HAL_UART_MspInit+0x88>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <HAL_UART_MspInit+0x88>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800150e:	23c0      	movs	r3, #192	; 0xc0
 8001510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151a:	2303      	movs	r3, #3
 800151c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800151e:	2308      	movs	r3, #8
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	4805      	ldr	r0, [pc, #20]	; (8001540 <HAL_UART_MspInit+0x8c>)
 800152a:	f000 f9dd 	bl	80018e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800152e:	bf00      	nop
 8001530:	3728      	adds	r7, #40	; 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40011400 	.word	0x40011400
 800153c:	40023800 	.word	0x40023800
 8001540:	40020800 	.word	0x40020800

08001544 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001544:	f8df d034 	ldr.w	sp, [pc, #52]	; 800157c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001548:	480d      	ldr	r0, [pc, #52]	; (8001580 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800154a:	490e      	ldr	r1, [pc, #56]	; (8001584 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800154c:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001550:	e002      	b.n	8001558 <LoopCopyDataInit>

08001552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001556:	3304      	adds	r3, #4

08001558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800155c:	d3f9      	bcc.n	8001552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155e:	4a0b      	ldr	r2, [pc, #44]	; (800158c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001560:	4c0b      	ldr	r4, [pc, #44]	; (8001590 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001564:	e001      	b.n	800156a <LoopFillZerobss>

08001566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001568:	3204      	adds	r2, #4

0800156a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800156c:	d3fb      	bcc.n	8001566 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800156e:	f7ff fd79 	bl	8001064 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001572:	f002 ff0f 	bl	8004394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001576:	f7ff fbeb 	bl	8000d50 <main>
  bx  lr    
 800157a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800157c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001584:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 8001588:	0800547c 	.word	0x0800547c
  ldr r2, =_sbss
 800158c:	2000023c 	.word	0x2000023c
  ldr r4, =_ebss
 8001590:	20000458 	.word	0x20000458

08001594 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001594:	e7fe      	b.n	8001594 <ADC_IRQHandler>
	...

08001598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800159c:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_Init+0x40>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0d      	ldr	r2, [pc, #52]	; (80015d8 <HAL_Init+0x40>)
 80015a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_Init+0x40>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <HAL_Init+0x40>)
 80015ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <HAL_Init+0x40>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a07      	ldr	r2, [pc, #28]	; (80015d8 <HAL_Init+0x40>)
 80015ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c0:	2003      	movs	r0, #3
 80015c2:	f000 f94f 	bl	8001864 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015c6:	200f      	movs	r0, #15
 80015c8:	f000 f808 	bl	80015dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015cc:	f7ff fcb8 	bl	8000f40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023c00 	.word	0x40023c00

080015dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_InitTick+0x54>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_InitTick+0x58>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4619      	mov	r1, r3
 80015ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 f967 	bl	80018ce <HAL_SYSTICK_Config>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e00e      	b.n	8001628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b0f      	cmp	r3, #15
 800160e:	d80a      	bhi.n	8001626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001610:	2200      	movs	r2, #0
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001618:	f000 f92f 	bl	800187a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800161c:	4a06      	ldr	r2, [pc, #24]	; (8001638 <HAL_InitTick+0x5c>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	e000      	b.n	8001628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	200001c4 	.word	0x200001c4
 8001634:	200001cc 	.word	0x200001cc
 8001638:	200001c8 	.word	0x200001c8

0800163c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_IncTick+0x20>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_IncTick+0x24>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4413      	add	r3, r2
 800164c:	4a04      	ldr	r2, [pc, #16]	; (8001660 <HAL_IncTick+0x24>)
 800164e:	6013      	str	r3, [r2, #0]
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	200001cc 	.word	0x200001cc
 8001660:	20000398 	.word	0x20000398

08001664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return uwTick;
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <HAL_GetTick+0x14>)
 800166a:	681b      	ldr	r3, [r3, #0]
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000398 	.word	0x20000398

0800167c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001684:	f7ff ffee 	bl	8001664 <HAL_GetTick>
 8001688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001694:	d005      	beq.n	80016a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001696:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <HAL_Delay+0x44>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4413      	add	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016a2:	bf00      	nop
 80016a4:	f7ff ffde 	bl	8001664 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d8f7      	bhi.n	80016a4 <HAL_Delay+0x28>
  {
  }
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200001cc 	.word	0x200001cc

080016c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e0:	4013      	ands	r3, r2
 80016e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f6:	4a04      	ldr	r2, [pc, #16]	; (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	60d3      	str	r3, [r2, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <__NVIC_GetPriorityGrouping+0x18>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	f003 0307 	and.w	r3, r3, #7
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	2b00      	cmp	r3, #0
 8001738:	db0b      	blt.n	8001752 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	f003 021f 	and.w	r2, r3, #31
 8001740:	4907      	ldr	r1, [pc, #28]	; (8001760 <__NVIC_EnableIRQ+0x38>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	2001      	movs	r0, #1
 800174a:	fa00 f202 	lsl.w	r2, r0, r2
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000e100 	.word	0xe000e100

08001764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	6039      	str	r1, [r7, #0]
 800176e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001774:	2b00      	cmp	r3, #0
 8001776:	db0a      	blt.n	800178e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	b2da      	uxtb	r2, r3
 800177c:	490c      	ldr	r1, [pc, #48]	; (80017b0 <__NVIC_SetPriority+0x4c>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	0112      	lsls	r2, r2, #4
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	440b      	add	r3, r1
 8001788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800178c:	e00a      	b.n	80017a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4908      	ldr	r1, [pc, #32]	; (80017b4 <__NVIC_SetPriority+0x50>)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	3b04      	subs	r3, #4
 800179c:	0112      	lsls	r2, r2, #4
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	440b      	add	r3, r1
 80017a2:	761a      	strb	r2, [r3, #24]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000e100 	.word	0xe000e100
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b089      	sub	sp, #36	; 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f1c3 0307 	rsb	r3, r3, #7
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	bf28      	it	cs
 80017d6:	2304      	movcs	r3, #4
 80017d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3304      	adds	r3, #4
 80017de:	2b06      	cmp	r3, #6
 80017e0:	d902      	bls.n	80017e8 <NVIC_EncodePriority+0x30>
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3b03      	subs	r3, #3
 80017e6:	e000      	b.n	80017ea <NVIC_EncodePriority+0x32>
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43da      	mvns	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	401a      	ands	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001800:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fa01 f303 	lsl.w	r3, r1, r3
 800180a:	43d9      	mvns	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	4313      	orrs	r3, r2
         );
}
 8001812:	4618      	mov	r0, r3
 8001814:	3724      	adds	r7, #36	; 0x24
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001830:	d301      	bcc.n	8001836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001832:	2301      	movs	r3, #1
 8001834:	e00f      	b.n	8001856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001836:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <SysTick_Config+0x40>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3b01      	subs	r3, #1
 800183c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183e:	210f      	movs	r1, #15
 8001840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001844:	f7ff ff8e 	bl	8001764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <SysTick_Config+0x40>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <SysTick_Config+0x40>)
 8001850:	2207      	movs	r2, #7
 8001852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	e000e010 	.word	0xe000e010

08001864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff ff29 	bl	80016c4 <__NVIC_SetPriorityGrouping>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800188c:	f7ff ff3e 	bl	800170c <__NVIC_GetPriorityGrouping>
 8001890:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	6978      	ldr	r0, [r7, #20]
 8001898:	f7ff ff8e 	bl	80017b8 <NVIC_EncodePriority>
 800189c:	4602      	mov	r2, r0
 800189e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff5d 	bl	8001764 <__NVIC_SetPriority>
}
 80018aa:	bf00      	nop
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff31 	bl	8001728 <__NVIC_EnableIRQ>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ffa2 	bl	8001820 <SysTick_Config>
 80018dc:	4603      	mov	r3, r0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b089      	sub	sp, #36	; 0x24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
 8001902:	e177      	b.n	8001bf4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001904:	2201      	movs	r2, #1
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	429a      	cmp	r2, r3
 800191e:	f040 8166 	bne.w	8001bee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	2b01      	cmp	r3, #1
 800192c:	d005      	beq.n	800193a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001936:	2b02      	cmp	r3, #2
 8001938:	d130      	bne.n	800199c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	2203      	movs	r2, #3
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001970:	2201      	movs	r2, #1
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	f003 0201 	and.w	r2, r3, #1
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	d017      	beq.n	80019d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	2203      	movs	r2, #3
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d123      	bne.n	8001a2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	08da      	lsrs	r2, r3, #3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3208      	adds	r2, #8
 80019ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	220f      	movs	r2, #15
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	691a      	ldr	r2, [r3, #16]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	08da      	lsrs	r2, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3208      	adds	r2, #8
 8001a26:	69b9      	ldr	r1, [r7, #24]
 8001a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	2203      	movs	r2, #3
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0203 	and.w	r2, r3, #3
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80c0 	beq.w	8001bee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	4b66      	ldr	r3, [pc, #408]	; (8001c0c <HAL_GPIO_Init+0x324>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	4a65      	ldr	r2, [pc, #404]	; (8001c0c <HAL_GPIO_Init+0x324>)
 8001a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7e:	4b63      	ldr	r3, [pc, #396]	; (8001c0c <HAL_GPIO_Init+0x324>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a8a:	4a61      	ldr	r2, [pc, #388]	; (8001c10 <HAL_GPIO_Init+0x328>)
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	3302      	adds	r3, #2
 8001a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	220f      	movs	r2, #15
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a58      	ldr	r2, [pc, #352]	; (8001c14 <HAL_GPIO_Init+0x32c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d037      	beq.n	8001b26 <HAL_GPIO_Init+0x23e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a57      	ldr	r2, [pc, #348]	; (8001c18 <HAL_GPIO_Init+0x330>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d031      	beq.n	8001b22 <HAL_GPIO_Init+0x23a>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a56      	ldr	r2, [pc, #344]	; (8001c1c <HAL_GPIO_Init+0x334>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d02b      	beq.n	8001b1e <HAL_GPIO_Init+0x236>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a55      	ldr	r2, [pc, #340]	; (8001c20 <HAL_GPIO_Init+0x338>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d025      	beq.n	8001b1a <HAL_GPIO_Init+0x232>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a54      	ldr	r2, [pc, #336]	; (8001c24 <HAL_GPIO_Init+0x33c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d01f      	beq.n	8001b16 <HAL_GPIO_Init+0x22e>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a53      	ldr	r2, [pc, #332]	; (8001c28 <HAL_GPIO_Init+0x340>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d019      	beq.n	8001b12 <HAL_GPIO_Init+0x22a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a52      	ldr	r2, [pc, #328]	; (8001c2c <HAL_GPIO_Init+0x344>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d013      	beq.n	8001b0e <HAL_GPIO_Init+0x226>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a51      	ldr	r2, [pc, #324]	; (8001c30 <HAL_GPIO_Init+0x348>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d00d      	beq.n	8001b0a <HAL_GPIO_Init+0x222>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a50      	ldr	r2, [pc, #320]	; (8001c34 <HAL_GPIO_Init+0x34c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d007      	beq.n	8001b06 <HAL_GPIO_Init+0x21e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a4f      	ldr	r2, [pc, #316]	; (8001c38 <HAL_GPIO_Init+0x350>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d101      	bne.n	8001b02 <HAL_GPIO_Init+0x21a>
 8001afe:	2309      	movs	r3, #9
 8001b00:	e012      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b02:	230a      	movs	r3, #10
 8001b04:	e010      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b06:	2308      	movs	r3, #8
 8001b08:	e00e      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b0a:	2307      	movs	r3, #7
 8001b0c:	e00c      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b0e:	2306      	movs	r3, #6
 8001b10:	e00a      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b12:	2305      	movs	r3, #5
 8001b14:	e008      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b16:	2304      	movs	r3, #4
 8001b18:	e006      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e004      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e002      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b26:	2300      	movs	r3, #0
 8001b28:	69fa      	ldr	r2, [r7, #28]
 8001b2a:	f002 0203 	and.w	r2, r2, #3
 8001b2e:	0092      	lsls	r2, r2, #2
 8001b30:	4093      	lsls	r3, r2
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b38:	4935      	ldr	r1, [pc, #212]	; (8001c10 <HAL_GPIO_Init+0x328>)
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	089b      	lsrs	r3, r3, #2
 8001b3e:	3302      	adds	r3, #2
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b46:	4b3d      	ldr	r3, [pc, #244]	; (8001c3c <HAL_GPIO_Init+0x354>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b6a:	4a34      	ldr	r2, [pc, #208]	; (8001c3c <HAL_GPIO_Init+0x354>)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b70:	4b32      	ldr	r3, [pc, #200]	; (8001c3c <HAL_GPIO_Init+0x354>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b94:	4a29      	ldr	r2, [pc, #164]	; (8001c3c <HAL_GPIO_Init+0x354>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b9a:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <HAL_GPIO_Init+0x354>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bbe:	4a1f      	ldr	r2, [pc, #124]	; (8001c3c <HAL_GPIO_Init+0x354>)
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <HAL_GPIO_Init+0x354>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001be8:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <HAL_GPIO_Init+0x354>)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	61fb      	str	r3, [r7, #28]
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	2b0f      	cmp	r3, #15
 8001bf8:	f67f ae84 	bls.w	8001904 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3724      	adds	r7, #36	; 0x24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40013800 	.word	0x40013800
 8001c14:	40020000 	.word	0x40020000
 8001c18:	40020400 	.word	0x40020400
 8001c1c:	40020800 	.word	0x40020800
 8001c20:	40020c00 	.word	0x40020c00
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40021400 	.word	0x40021400
 8001c2c:	40021800 	.word	0x40021800
 8001c30:	40021c00 	.word	0x40021c00
 8001c34:	40022000 	.word	0x40022000
 8001c38:	40022400 	.word	0x40022400
 8001c3c:	40013c00 	.word	0x40013c00

08001c40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e267      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d075      	beq.n	8001d4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c5e:	4b88      	ldr	r3, [pc, #544]	; (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 030c 	and.w	r3, r3, #12
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d00c      	beq.n	8001c84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c6a:	4b85      	ldr	r3, [pc, #532]	; (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d112      	bne.n	8001c9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c76:	4b82      	ldr	r3, [pc, #520]	; (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c82:	d10b      	bne.n	8001c9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c84:	4b7e      	ldr	r3, [pc, #504]	; (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d05b      	beq.n	8001d48 <HAL_RCC_OscConfig+0x108>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d157      	bne.n	8001d48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e242      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca4:	d106      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x74>
 8001ca6:	4b76      	ldr	r3, [pc, #472]	; (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a75      	ldr	r2, [pc, #468]	; (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	e01d      	b.n	8001cf0 <HAL_RCC_OscConfig+0xb0>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x98>
 8001cbe:	4b70      	ldr	r3, [pc, #448]	; (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a6f      	ldr	r2, [pc, #444]	; (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	4b6d      	ldr	r3, [pc, #436]	; (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a6c      	ldr	r2, [pc, #432]	; (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e00b      	b.n	8001cf0 <HAL_RCC_OscConfig+0xb0>
 8001cd8:	4b69      	ldr	r3, [pc, #420]	; (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a68      	ldr	r2, [pc, #416]	; (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	4b66      	ldr	r3, [pc, #408]	; (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a65      	ldr	r2, [pc, #404]	; (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d013      	beq.n	8001d20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf8:	f7ff fcb4 	bl	8001664 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d00:	f7ff fcb0 	bl	8001664 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	; 0x64
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e207      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d12:	4b5b      	ldr	r3, [pc, #364]	; (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0xc0>
 8001d1e:	e014      	b.n	8001d4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7ff fca0 	bl	8001664 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d28:	f7ff fc9c 	bl	8001664 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b64      	cmp	r3, #100	; 0x64
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e1f3      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3a:	4b51      	ldr	r3, [pc, #324]	; (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0xe8>
 8001d46:	e000      	b.n	8001d4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d063      	beq.n	8001e1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d56:	4b4a      	ldr	r3, [pc, #296]	; (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00b      	beq.n	8001d7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d62:	4b47      	ldr	r3, [pc, #284]	; (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d11c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d6e:	4b44      	ldr	r3, [pc, #272]	; (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d116      	bne.n	8001da8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7a:	4b41      	ldr	r3, [pc, #260]	; (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d005      	beq.n	8001d92 <HAL_RCC_OscConfig+0x152>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d001      	beq.n	8001d92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e1c7      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d92:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	4937      	ldr	r1, [pc, #220]	; (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da6:	e03a      	b.n	8001e1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d020      	beq.n	8001df2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db0:	4b34      	ldr	r3, [pc, #208]	; (8001e84 <HAL_RCC_OscConfig+0x244>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db6:	f7ff fc55 	bl	8001664 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dbe:	f7ff fc51 	bl	8001664 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e1a8      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd0:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ddc:	4b28      	ldr	r3, [pc, #160]	; (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4925      	ldr	r1, [pc, #148]	; (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	600b      	str	r3, [r1, #0]
 8001df0:	e015      	b.n	8001e1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df2:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <HAL_RCC_OscConfig+0x244>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7ff fc34 	bl	8001664 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e00:	f7ff fc30 	bl	8001664 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e187      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e12:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d036      	beq.n	8001e98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d016      	beq.n	8001e60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <HAL_RCC_OscConfig+0x248>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e38:	f7ff fc14 	bl	8001664 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e40:	f7ff fc10 	bl	8001664 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e167      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_RCC_OscConfig+0x240>)
 8001e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0x200>
 8001e5e:	e01b      	b.n	8001e98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <HAL_RCC_OscConfig+0x248>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e66:	f7ff fbfd 	bl	8001664 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e6c:	e00e      	b.n	8001e8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e6e:	f7ff fbf9 	bl	8001664 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d907      	bls.n	8001e8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e150      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
 8001e80:	40023800 	.word	0x40023800
 8001e84:	42470000 	.word	0x42470000
 8001e88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e8c:	4b88      	ldr	r3, [pc, #544]	; (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1ea      	bne.n	8001e6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 8097 	beq.w	8001fd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eaa:	4b81      	ldr	r3, [pc, #516]	; (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10f      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	4b7d      	ldr	r3, [pc, #500]	; (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	4a7c      	ldr	r2, [pc, #496]	; (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec6:	4b7a      	ldr	r3, [pc, #488]	; (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed6:	4b77      	ldr	r3, [pc, #476]	; (80020b4 <HAL_RCC_OscConfig+0x474>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d118      	bne.n	8001f14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ee2:	4b74      	ldr	r3, [pc, #464]	; (80020b4 <HAL_RCC_OscConfig+0x474>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a73      	ldr	r2, [pc, #460]	; (80020b4 <HAL_RCC_OscConfig+0x474>)
 8001ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eee:	f7ff fbb9 	bl	8001664 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef6:	f7ff fbb5 	bl	8001664 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e10c      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f08:	4b6a      	ldr	r3, [pc, #424]	; (80020b4 <HAL_RCC_OscConfig+0x474>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d106      	bne.n	8001f2a <HAL_RCC_OscConfig+0x2ea>
 8001f1c:	4b64      	ldr	r3, [pc, #400]	; (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f20:	4a63      	ldr	r2, [pc, #396]	; (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6713      	str	r3, [r2, #112]	; 0x70
 8001f28:	e01c      	b.n	8001f64 <HAL_RCC_OscConfig+0x324>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b05      	cmp	r3, #5
 8001f30:	d10c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x30c>
 8001f32:	4b5f      	ldr	r3, [pc, #380]	; (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f36:	4a5e      	ldr	r2, [pc, #376]	; (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001f38:	f043 0304 	orr.w	r3, r3, #4
 8001f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f3e:	4b5c      	ldr	r3, [pc, #368]	; (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f42:	4a5b      	ldr	r2, [pc, #364]	; (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4a:	e00b      	b.n	8001f64 <HAL_RCC_OscConfig+0x324>
 8001f4c:	4b58      	ldr	r3, [pc, #352]	; (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f50:	4a57      	ldr	r2, [pc, #348]	; (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001f52:	f023 0301 	bic.w	r3, r3, #1
 8001f56:	6713      	str	r3, [r2, #112]	; 0x70
 8001f58:	4b55      	ldr	r3, [pc, #340]	; (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5c:	4a54      	ldr	r2, [pc, #336]	; (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001f5e:	f023 0304 	bic.w	r3, r3, #4
 8001f62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d015      	beq.n	8001f98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6c:	f7ff fb7a 	bl	8001664 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f74:	f7ff fb76 	bl	8001664 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e0cb      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8a:	4b49      	ldr	r3, [pc, #292]	; (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0ee      	beq.n	8001f74 <HAL_RCC_OscConfig+0x334>
 8001f96:	e014      	b.n	8001fc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f98:	f7ff fb64 	bl	8001664 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f9e:	e00a      	b.n	8001fb6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa0:	f7ff fb60 	bl	8001664 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e0b5      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb6:	4b3e      	ldr	r3, [pc, #248]	; (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1ee      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fc2:	7dfb      	ldrb	r3, [r7, #23]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d105      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc8:	4b39      	ldr	r3, [pc, #228]	; (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	4a38      	ldr	r2, [pc, #224]	; (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80a1 	beq.w	8002120 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fde:	4b34      	ldr	r3, [pc, #208]	; (80020b0 <HAL_RCC_OscConfig+0x470>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	d05c      	beq.n	80020a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d141      	bne.n	8002076 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff2:	4b31      	ldr	r3, [pc, #196]	; (80020b8 <HAL_RCC_OscConfig+0x478>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff8:	f7ff fb34 	bl	8001664 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002000:	f7ff fb30 	bl	8001664 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e087      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002012:	4b27      	ldr	r3, [pc, #156]	; (80020b0 <HAL_RCC_OscConfig+0x470>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69da      	ldr	r2, [r3, #28]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	019b      	lsls	r3, r3, #6
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002034:	085b      	lsrs	r3, r3, #1
 8002036:	3b01      	subs	r3, #1
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002040:	061b      	lsls	r3, r3, #24
 8002042:	491b      	ldr	r1, [pc, #108]	; (80020b0 <HAL_RCC_OscConfig+0x470>)
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002048:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <HAL_RCC_OscConfig+0x478>)
 800204a:	2201      	movs	r2, #1
 800204c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204e:	f7ff fb09 	bl	8001664 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002056:	f7ff fb05 	bl	8001664 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e05c      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002068:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <HAL_RCC_OscConfig+0x470>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0f0      	beq.n	8002056 <HAL_RCC_OscConfig+0x416>
 8002074:	e054      	b.n	8002120 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <HAL_RCC_OscConfig+0x478>)
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207c:	f7ff faf2 	bl	8001664 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002084:	f7ff faee 	bl	8001664 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e045      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_RCC_OscConfig+0x470>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x444>
 80020a2:	e03d      	b.n	8002120 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d107      	bne.n	80020bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e038      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40007000 	.word	0x40007000
 80020b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020bc:	4b1b      	ldr	r3, [pc, #108]	; (800212c <HAL_RCC_OscConfig+0x4ec>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d028      	beq.n	800211c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d121      	bne.n	800211c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d11a      	bne.n	800211c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020ec:	4013      	ands	r3, r2
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d111      	bne.n	800211c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002102:	085b      	lsrs	r3, r3, #1
 8002104:	3b01      	subs	r3, #1
 8002106:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002108:	429a      	cmp	r2, r3
 800210a:	d107      	bne.n	800211c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002116:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002118:	429a      	cmp	r2, r3
 800211a:	d001      	beq.n	8002120 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e000      	b.n	8002122 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40023800 	.word	0x40023800

08002130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0cc      	b.n	80022de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002144:	4b68      	ldr	r3, [pc, #416]	; (80022e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 030f 	and.w	r3, r3, #15
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d90c      	bls.n	800216c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002152:	4b65      	ldr	r3, [pc, #404]	; (80022e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b63      	ldr	r3, [pc, #396]	; (80022e8 <HAL_RCC_ClockConfig+0x1b8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d001      	beq.n	800216c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0b8      	b.n	80022de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d020      	beq.n	80021ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002184:	4b59      	ldr	r3, [pc, #356]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	4a58      	ldr	r2, [pc, #352]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800218e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0308 	and.w	r3, r3, #8
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800219c:	4b53      	ldr	r3, [pc, #332]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	4a52      	ldr	r2, [pc, #328]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a8:	4b50      	ldr	r3, [pc, #320]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	494d      	ldr	r1, [pc, #308]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d044      	beq.n	8002250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d107      	bne.n	80021de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ce:	4b47      	ldr	r3, [pc, #284]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d119      	bne.n	800220e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e07f      	b.n	80022de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d003      	beq.n	80021ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d107      	bne.n	80021fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ee:	4b3f      	ldr	r3, [pc, #252]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e06f      	b.n	80022de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fe:	4b3b      	ldr	r3, [pc, #236]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e067      	b.n	80022de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800220e:	4b37      	ldr	r3, [pc, #220]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f023 0203 	bic.w	r2, r3, #3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	4934      	ldr	r1, [pc, #208]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 800221c:	4313      	orrs	r3, r2
 800221e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002220:	f7ff fa20 	bl	8001664 <HAL_GetTick>
 8002224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002226:	e00a      	b.n	800223e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002228:	f7ff fa1c 	bl	8001664 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	f241 3288 	movw	r2, #5000	; 0x1388
 8002236:	4293      	cmp	r3, r2
 8002238:	d901      	bls.n	800223e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e04f      	b.n	80022de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223e:	4b2b      	ldr	r3, [pc, #172]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 020c 	and.w	r2, r3, #12
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	429a      	cmp	r2, r3
 800224e:	d1eb      	bne.n	8002228 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002250:	4b25      	ldr	r3, [pc, #148]	; (80022e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 030f 	and.w	r3, r3, #15
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d20c      	bcs.n	8002278 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225e:	4b22      	ldr	r3, [pc, #136]	; (80022e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002266:	4b20      	ldr	r3, [pc, #128]	; (80022e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d001      	beq.n	8002278 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e032      	b.n	80022de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	d008      	beq.n	8002296 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002284:	4b19      	ldr	r3, [pc, #100]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	4916      	ldr	r1, [pc, #88]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	4313      	orrs	r3, r2
 8002294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d009      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022a2:	4b12      	ldr	r3, [pc, #72]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	490e      	ldr	r1, [pc, #56]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022b6:	f000 f821 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 80022ba:	4602      	mov	r2, r0
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	490a      	ldr	r1, [pc, #40]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 80022c8:	5ccb      	ldrb	r3, [r1, r3]
 80022ca:	fa22 f303 	lsr.w	r3, r2, r3
 80022ce:	4a09      	ldr	r2, [pc, #36]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022d2:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <HAL_RCC_ClockConfig+0x1c8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff f980 	bl	80015dc <HAL_InitTick>

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40023c00 	.word	0x40023c00
 80022ec:	40023800 	.word	0x40023800
 80022f0:	080053a0 	.word	0x080053a0
 80022f4:	200001c4 	.word	0x200001c4
 80022f8:	200001c8 	.word	0x200001c8

080022fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002300:	b090      	sub	sp, #64	; 0x40
 8002302:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	637b      	str	r3, [r7, #52]	; 0x34
 8002308:	2300      	movs	r3, #0
 800230a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800230c:	2300      	movs	r3, #0
 800230e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002310:	2300      	movs	r3, #0
 8002312:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002314:	4b59      	ldr	r3, [pc, #356]	; (800247c <HAL_RCC_GetSysClockFreq+0x180>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 030c 	and.w	r3, r3, #12
 800231c:	2b08      	cmp	r3, #8
 800231e:	d00d      	beq.n	800233c <HAL_RCC_GetSysClockFreq+0x40>
 8002320:	2b08      	cmp	r3, #8
 8002322:	f200 80a1 	bhi.w	8002468 <HAL_RCC_GetSysClockFreq+0x16c>
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0x34>
 800232a:	2b04      	cmp	r3, #4
 800232c:	d003      	beq.n	8002336 <HAL_RCC_GetSysClockFreq+0x3a>
 800232e:	e09b      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002330:	4b53      	ldr	r3, [pc, #332]	; (8002480 <HAL_RCC_GetSysClockFreq+0x184>)
 8002332:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002334:	e09b      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002336:	4b53      	ldr	r3, [pc, #332]	; (8002484 <HAL_RCC_GetSysClockFreq+0x188>)
 8002338:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800233a:	e098      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800233c:	4b4f      	ldr	r3, [pc, #316]	; (800247c <HAL_RCC_GetSysClockFreq+0x180>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002344:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002346:	4b4d      	ldr	r3, [pc, #308]	; (800247c <HAL_RCC_GetSysClockFreq+0x180>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d028      	beq.n	80023a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002352:	4b4a      	ldr	r3, [pc, #296]	; (800247c <HAL_RCC_GetSysClockFreq+0x180>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	099b      	lsrs	r3, r3, #6
 8002358:	2200      	movs	r2, #0
 800235a:	623b      	str	r3, [r7, #32]
 800235c:	627a      	str	r2, [r7, #36]	; 0x24
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002364:	2100      	movs	r1, #0
 8002366:	4b47      	ldr	r3, [pc, #284]	; (8002484 <HAL_RCC_GetSysClockFreq+0x188>)
 8002368:	fb03 f201 	mul.w	r2, r3, r1
 800236c:	2300      	movs	r3, #0
 800236e:	fb00 f303 	mul.w	r3, r0, r3
 8002372:	4413      	add	r3, r2
 8002374:	4a43      	ldr	r2, [pc, #268]	; (8002484 <HAL_RCC_GetSysClockFreq+0x188>)
 8002376:	fba0 1202 	umull	r1, r2, r0, r2
 800237a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800237c:	460a      	mov	r2, r1
 800237e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002382:	4413      	add	r3, r2
 8002384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002388:	2200      	movs	r2, #0
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	61fa      	str	r2, [r7, #28]
 800238e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002392:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002396:	f7fd ff83 	bl	80002a0 <__aeabi_uldivmod>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4613      	mov	r3, r2
 80023a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023a2:	e053      	b.n	800244c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023a4:	4b35      	ldr	r3, [pc, #212]	; (800247c <HAL_RCC_GetSysClockFreq+0x180>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	099b      	lsrs	r3, r3, #6
 80023aa:	2200      	movs	r2, #0
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	617a      	str	r2, [r7, #20]
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80023b6:	f04f 0b00 	mov.w	fp, #0
 80023ba:	4652      	mov	r2, sl
 80023bc:	465b      	mov	r3, fp
 80023be:	f04f 0000 	mov.w	r0, #0
 80023c2:	f04f 0100 	mov.w	r1, #0
 80023c6:	0159      	lsls	r1, r3, #5
 80023c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023cc:	0150      	lsls	r0, r2, #5
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	ebb2 080a 	subs.w	r8, r2, sl
 80023d6:	eb63 090b 	sbc.w	r9, r3, fp
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80023ee:	ebb2 0408 	subs.w	r4, r2, r8
 80023f2:	eb63 0509 	sbc.w	r5, r3, r9
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	00eb      	lsls	r3, r5, #3
 8002400:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002404:	00e2      	lsls	r2, r4, #3
 8002406:	4614      	mov	r4, r2
 8002408:	461d      	mov	r5, r3
 800240a:	eb14 030a 	adds.w	r3, r4, sl
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	eb45 030b 	adc.w	r3, r5, fp
 8002414:	607b      	str	r3, [r7, #4]
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002422:	4629      	mov	r1, r5
 8002424:	028b      	lsls	r3, r1, #10
 8002426:	4621      	mov	r1, r4
 8002428:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800242c:	4621      	mov	r1, r4
 800242e:	028a      	lsls	r2, r1, #10
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002436:	2200      	movs	r2, #0
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	60fa      	str	r2, [r7, #12]
 800243c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002440:	f7fd ff2e 	bl	80002a0 <__aeabi_uldivmod>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4613      	mov	r3, r2
 800244a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800244c:	4b0b      	ldr	r3, [pc, #44]	; (800247c <HAL_RCC_GetSysClockFreq+0x180>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	0c1b      	lsrs	r3, r3, #16
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	3301      	adds	r3, #1
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800245c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800245e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002460:	fbb2 f3f3 	udiv	r3, r2, r3
 8002464:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002466:	e002      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <HAL_RCC_GetSysClockFreq+0x184>)
 800246a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800246c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800246e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002470:	4618      	mov	r0, r3
 8002472:	3740      	adds	r7, #64	; 0x40
 8002474:	46bd      	mov	sp, r7
 8002476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800
 8002480:	00f42400 	.word	0x00f42400
 8002484:	017d7840 	.word	0x017d7840

08002488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800248c:	4b03      	ldr	r3, [pc, #12]	; (800249c <HAL_RCC_GetHCLKFreq+0x14>)
 800248e:	681b      	ldr	r3, [r3, #0]
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	200001c4 	.word	0x200001c4

080024a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024a4:	f7ff fff0 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 80024a8:	4602      	mov	r2, r0
 80024aa:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	0a9b      	lsrs	r3, r3, #10
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	4903      	ldr	r1, [pc, #12]	; (80024c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024b6:	5ccb      	ldrb	r3, [r1, r3]
 80024b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024bc:	4618      	mov	r0, r3
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40023800 	.word	0x40023800
 80024c4:	080053b0 	.word	0x080053b0

080024c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024cc:	f7ff ffdc 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 80024d0:	4602      	mov	r2, r0
 80024d2:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	0b5b      	lsrs	r3, r3, #13
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	4903      	ldr	r1, [pc, #12]	; (80024ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80024de:	5ccb      	ldrb	r3, [r1, r3]
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40023800 	.word	0x40023800
 80024ec:	080053b0 	.word	0x080053b0

080024f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e041      	b.n	8002586 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d106      	bne.n	800251c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7fe ff16 	bl	8001348 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3304      	adds	r3, #4
 800252c:	4619      	mov	r1, r3
 800252e:	4610      	mov	r0, r2
 8002530:	f000 fbd6 	bl	8002ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d001      	beq.n	80025a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e04e      	b.n	8002646 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0201 	orr.w	r2, r2, #1
 80025be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a23      	ldr	r2, [pc, #140]	; (8002654 <HAL_TIM_Base_Start_IT+0xc4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d022      	beq.n	8002610 <HAL_TIM_Base_Start_IT+0x80>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d2:	d01d      	beq.n	8002610 <HAL_TIM_Base_Start_IT+0x80>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a1f      	ldr	r2, [pc, #124]	; (8002658 <HAL_TIM_Base_Start_IT+0xc8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d018      	beq.n	8002610 <HAL_TIM_Base_Start_IT+0x80>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a1e      	ldr	r2, [pc, #120]	; (800265c <HAL_TIM_Base_Start_IT+0xcc>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d013      	beq.n	8002610 <HAL_TIM_Base_Start_IT+0x80>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a1c      	ldr	r2, [pc, #112]	; (8002660 <HAL_TIM_Base_Start_IT+0xd0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00e      	beq.n	8002610 <HAL_TIM_Base_Start_IT+0x80>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a1b      	ldr	r2, [pc, #108]	; (8002664 <HAL_TIM_Base_Start_IT+0xd4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d009      	beq.n	8002610 <HAL_TIM_Base_Start_IT+0x80>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a19      	ldr	r2, [pc, #100]	; (8002668 <HAL_TIM_Base_Start_IT+0xd8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d004      	beq.n	8002610 <HAL_TIM_Base_Start_IT+0x80>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a18      	ldr	r2, [pc, #96]	; (800266c <HAL_TIM_Base_Start_IT+0xdc>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d111      	bne.n	8002634 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b06      	cmp	r3, #6
 8002620:	d010      	beq.n	8002644 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f042 0201 	orr.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002632:	e007      	b.n	8002644 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40010000 	.word	0x40010000
 8002658:	40000400 	.word	0x40000400
 800265c:	40000800 	.word	0x40000800
 8002660:	40000c00 	.word	0x40000c00
 8002664:	40010400 	.word	0x40010400
 8002668:	40014000 	.word	0x40014000
 800266c:	40001800 	.word	0x40001800

08002670 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0201 	bic.w	r2, r2, #1
 8002686:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6a1a      	ldr	r2, [r3, #32]
 800268e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002692:	4013      	ands	r3, r2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10f      	bne.n	80026b8 <HAL_TIM_Base_Stop_IT+0x48>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6a1a      	ldr	r2, [r3, #32]
 800269e:	f240 4344 	movw	r3, #1092	; 0x444
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d107      	bne.n	80026b8 <HAL_TIM_Base_Stop_IT+0x48>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0201 	bic.w	r2, r2, #1
 80026b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e041      	b.n	8002764 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d106      	bne.n	80026fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7fe fdef 	bl	80012d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2202      	movs	r2, #2
 80026fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3304      	adds	r3, #4
 800270a:	4619      	mov	r1, r3
 800270c:	4610      	mov	r0, r2
 800270e:	f000 fae7 	bl	8002ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d109      	bne.n	8002790 <HAL_TIM_PWM_Start+0x24>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b01      	cmp	r3, #1
 8002786:	bf14      	ite	ne
 8002788:	2301      	movne	r3, #1
 800278a:	2300      	moveq	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	e022      	b.n	80027d6 <HAL_TIM_PWM_Start+0x6a>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	2b04      	cmp	r3, #4
 8002794:	d109      	bne.n	80027aa <HAL_TIM_PWM_Start+0x3e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b01      	cmp	r3, #1
 80027a0:	bf14      	ite	ne
 80027a2:	2301      	movne	r3, #1
 80027a4:	2300      	moveq	r3, #0
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	e015      	b.n	80027d6 <HAL_TIM_PWM_Start+0x6a>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d109      	bne.n	80027c4 <HAL_TIM_PWM_Start+0x58>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	bf14      	ite	ne
 80027bc:	2301      	movne	r3, #1
 80027be:	2300      	moveq	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	e008      	b.n	80027d6 <HAL_TIM_PWM_Start+0x6a>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	bf14      	ite	ne
 80027d0:	2301      	movne	r3, #1
 80027d2:	2300      	moveq	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e07c      	b.n	80028d8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d104      	bne.n	80027ee <HAL_TIM_PWM_Start+0x82>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027ec:	e013      	b.n	8002816 <HAL_TIM_PWM_Start+0xaa>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d104      	bne.n	80027fe <HAL_TIM_PWM_Start+0x92>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027fc:	e00b      	b.n	8002816 <HAL_TIM_PWM_Start+0xaa>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2b08      	cmp	r3, #8
 8002802:	d104      	bne.n	800280e <HAL_TIM_PWM_Start+0xa2>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800280c:	e003      	b.n	8002816 <HAL_TIM_PWM_Start+0xaa>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2202      	movs	r2, #2
 8002812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2201      	movs	r2, #1
 800281c:	6839      	ldr	r1, [r7, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fcae 	bl	8003180 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a2d      	ldr	r2, [pc, #180]	; (80028e0 <HAL_TIM_PWM_Start+0x174>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d004      	beq.n	8002838 <HAL_TIM_PWM_Start+0xcc>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a2c      	ldr	r2, [pc, #176]	; (80028e4 <HAL_TIM_PWM_Start+0x178>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d101      	bne.n	800283c <HAL_TIM_PWM_Start+0xd0>
 8002838:	2301      	movs	r3, #1
 800283a:	e000      	b.n	800283e <HAL_TIM_PWM_Start+0xd2>
 800283c:	2300      	movs	r3, #0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d007      	beq.n	8002852 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002850:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a22      	ldr	r2, [pc, #136]	; (80028e0 <HAL_TIM_PWM_Start+0x174>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d022      	beq.n	80028a2 <HAL_TIM_PWM_Start+0x136>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002864:	d01d      	beq.n	80028a2 <HAL_TIM_PWM_Start+0x136>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a1f      	ldr	r2, [pc, #124]	; (80028e8 <HAL_TIM_PWM_Start+0x17c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d018      	beq.n	80028a2 <HAL_TIM_PWM_Start+0x136>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a1d      	ldr	r2, [pc, #116]	; (80028ec <HAL_TIM_PWM_Start+0x180>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d013      	beq.n	80028a2 <HAL_TIM_PWM_Start+0x136>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a1c      	ldr	r2, [pc, #112]	; (80028f0 <HAL_TIM_PWM_Start+0x184>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d00e      	beq.n	80028a2 <HAL_TIM_PWM_Start+0x136>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a16      	ldr	r2, [pc, #88]	; (80028e4 <HAL_TIM_PWM_Start+0x178>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d009      	beq.n	80028a2 <HAL_TIM_PWM_Start+0x136>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a18      	ldr	r2, [pc, #96]	; (80028f4 <HAL_TIM_PWM_Start+0x188>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d004      	beq.n	80028a2 <HAL_TIM_PWM_Start+0x136>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a16      	ldr	r2, [pc, #88]	; (80028f8 <HAL_TIM_PWM_Start+0x18c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d111      	bne.n	80028c6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2b06      	cmp	r3, #6
 80028b2:	d010      	beq.n	80028d6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 0201 	orr.w	r2, r2, #1
 80028c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c4:	e007      	b.n	80028d6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f042 0201 	orr.w	r2, r2, #1
 80028d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40010000 	.word	0x40010000
 80028e4:	40010400 	.word	0x40010400
 80028e8:	40000400 	.word	0x40000400
 80028ec:	40000800 	.word	0x40000800
 80028f0:	40000c00 	.word	0x40000c00
 80028f4:	40014000 	.word	0x40014000
 80028f8:	40001800 	.word	0x40001800

080028fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b02      	cmp	r3, #2
 8002910:	d122      	bne.n	8002958 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b02      	cmp	r3, #2
 800291e:	d11b      	bne.n	8002958 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f06f 0202 	mvn.w	r2, #2
 8002928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f9b0 	bl	8002ca4 <HAL_TIM_IC_CaptureCallback>
 8002944:	e005      	b.n	8002952 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f9a2 	bl	8002c90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f9b3 	bl	8002cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b04      	cmp	r3, #4
 8002964:	d122      	bne.n	80029ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b04      	cmp	r3, #4
 8002972:	d11b      	bne.n	80029ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f06f 0204 	mvn.w	r2, #4
 800297c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2202      	movs	r2, #2
 8002982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f986 	bl	8002ca4 <HAL_TIM_IC_CaptureCallback>
 8002998:	e005      	b.n	80029a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f978 	bl	8002c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f989 	bl	8002cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d122      	bne.n	8002a00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d11b      	bne.n	8002a00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f06f 0208 	mvn.w	r2, #8
 80029d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2204      	movs	r2, #4
 80029d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f95c 	bl	8002ca4 <HAL_TIM_IC_CaptureCallback>
 80029ec:	e005      	b.n	80029fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f94e 	bl	8002c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 f95f 	bl	8002cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f003 0310 	and.w	r3, r3, #16
 8002a0a:	2b10      	cmp	r3, #16
 8002a0c:	d122      	bne.n	8002a54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f003 0310 	and.w	r3, r3, #16
 8002a18:	2b10      	cmp	r3, #16
 8002a1a:	d11b      	bne.n	8002a54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f06f 0210 	mvn.w	r2, #16
 8002a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2208      	movs	r2, #8
 8002a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f932 	bl	8002ca4 <HAL_TIM_IC_CaptureCallback>
 8002a40:	e005      	b.n	8002a4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f924 	bl	8002c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f935 	bl	8002cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d10e      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d107      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f06f 0201 	mvn.w	r2, #1
 8002a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7fe f8f8 	bl	8000c70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8a:	2b80      	cmp	r3, #128	; 0x80
 8002a8c:	d10e      	bne.n	8002aac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a98:	2b80      	cmp	r3, #128	; 0x80
 8002a9a:	d107      	bne.n	8002aac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 fc68 	bl	800337c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab6:	2b40      	cmp	r3, #64	; 0x40
 8002ab8:	d10e      	bne.n	8002ad8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac4:	2b40      	cmp	r3, #64	; 0x40
 8002ac6:	d107      	bne.n	8002ad8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f8fa 	bl	8002ccc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f003 0320 	and.w	r3, r3, #32
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	d10e      	bne.n	8002b04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0320 	and.w	r3, r3, #32
 8002af0:	2b20      	cmp	r3, #32
 8002af2:	d107      	bne.n	8002b04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f06f 0220 	mvn.w	r2, #32
 8002afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fc32 	bl	8003368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e0ae      	b.n	8002c88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b0c      	cmp	r3, #12
 8002b36:	f200 809f 	bhi.w	8002c78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b3a:	a201      	add	r2, pc, #4	; (adr r2, 8002b40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b40:	08002b75 	.word	0x08002b75
 8002b44:	08002c79 	.word	0x08002c79
 8002b48:	08002c79 	.word	0x08002c79
 8002b4c:	08002c79 	.word	0x08002c79
 8002b50:	08002bb5 	.word	0x08002bb5
 8002b54:	08002c79 	.word	0x08002c79
 8002b58:	08002c79 	.word	0x08002c79
 8002b5c:	08002c79 	.word	0x08002c79
 8002b60:	08002bf7 	.word	0x08002bf7
 8002b64:	08002c79 	.word	0x08002c79
 8002b68:	08002c79 	.word	0x08002c79
 8002b6c:	08002c79 	.word	0x08002c79
 8002b70:	08002c37 	.word	0x08002c37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68b9      	ldr	r1, [r7, #8]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f950 	bl	8002e20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699a      	ldr	r2, [r3, #24]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0208 	orr.w	r2, r2, #8
 8002b8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0204 	bic.w	r2, r2, #4
 8002b9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6999      	ldr	r1, [r3, #24]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	619a      	str	r2, [r3, #24]
      break;
 8002bb2:	e064      	b.n	8002c7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 f9a0 	bl	8002f00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6999      	ldr	r1, [r3, #24]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	021a      	lsls	r2, r3, #8
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	619a      	str	r2, [r3, #24]
      break;
 8002bf4:	e043      	b.n	8002c7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68b9      	ldr	r1, [r7, #8]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 f9f5 	bl	8002fec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	69da      	ldr	r2, [r3, #28]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0208 	orr.w	r2, r2, #8
 8002c10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	69da      	ldr	r2, [r3, #28]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0204 	bic.w	r2, r2, #4
 8002c20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	69d9      	ldr	r1, [r3, #28]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	61da      	str	r2, [r3, #28]
      break;
 8002c34:	e023      	b.n	8002c7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 fa49 	bl	80030d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	69da      	ldr	r2, [r3, #28]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	69da      	ldr	r2, [r3, #28]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69d9      	ldr	r1, [r3, #28]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	021a      	lsls	r2, r3, #8
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	61da      	str	r2, [r3, #28]
      break;
 8002c76:	e002      	b.n	8002c7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a40      	ldr	r2, [pc, #256]	; (8002df4 <TIM_Base_SetConfig+0x114>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d013      	beq.n	8002d20 <TIM_Base_SetConfig+0x40>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfe:	d00f      	beq.n	8002d20 <TIM_Base_SetConfig+0x40>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a3d      	ldr	r2, [pc, #244]	; (8002df8 <TIM_Base_SetConfig+0x118>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d00b      	beq.n	8002d20 <TIM_Base_SetConfig+0x40>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a3c      	ldr	r2, [pc, #240]	; (8002dfc <TIM_Base_SetConfig+0x11c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d007      	beq.n	8002d20 <TIM_Base_SetConfig+0x40>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a3b      	ldr	r2, [pc, #236]	; (8002e00 <TIM_Base_SetConfig+0x120>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d003      	beq.n	8002d20 <TIM_Base_SetConfig+0x40>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a3a      	ldr	r2, [pc, #232]	; (8002e04 <TIM_Base_SetConfig+0x124>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d108      	bne.n	8002d32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a2f      	ldr	r2, [pc, #188]	; (8002df4 <TIM_Base_SetConfig+0x114>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d02b      	beq.n	8002d92 <TIM_Base_SetConfig+0xb2>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d40:	d027      	beq.n	8002d92 <TIM_Base_SetConfig+0xb2>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a2c      	ldr	r2, [pc, #176]	; (8002df8 <TIM_Base_SetConfig+0x118>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d023      	beq.n	8002d92 <TIM_Base_SetConfig+0xb2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a2b      	ldr	r2, [pc, #172]	; (8002dfc <TIM_Base_SetConfig+0x11c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d01f      	beq.n	8002d92 <TIM_Base_SetConfig+0xb2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a2a      	ldr	r2, [pc, #168]	; (8002e00 <TIM_Base_SetConfig+0x120>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d01b      	beq.n	8002d92 <TIM_Base_SetConfig+0xb2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a29      	ldr	r2, [pc, #164]	; (8002e04 <TIM_Base_SetConfig+0x124>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d017      	beq.n	8002d92 <TIM_Base_SetConfig+0xb2>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a28      	ldr	r2, [pc, #160]	; (8002e08 <TIM_Base_SetConfig+0x128>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d013      	beq.n	8002d92 <TIM_Base_SetConfig+0xb2>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a27      	ldr	r2, [pc, #156]	; (8002e0c <TIM_Base_SetConfig+0x12c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d00f      	beq.n	8002d92 <TIM_Base_SetConfig+0xb2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a26      	ldr	r2, [pc, #152]	; (8002e10 <TIM_Base_SetConfig+0x130>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00b      	beq.n	8002d92 <TIM_Base_SetConfig+0xb2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a25      	ldr	r2, [pc, #148]	; (8002e14 <TIM_Base_SetConfig+0x134>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d007      	beq.n	8002d92 <TIM_Base_SetConfig+0xb2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a24      	ldr	r2, [pc, #144]	; (8002e18 <TIM_Base_SetConfig+0x138>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d003      	beq.n	8002d92 <TIM_Base_SetConfig+0xb2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a23      	ldr	r2, [pc, #140]	; (8002e1c <TIM_Base_SetConfig+0x13c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d108      	bne.n	8002da4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <TIM_Base_SetConfig+0x114>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d003      	beq.n	8002dd8 <TIM_Base_SetConfig+0xf8>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a0c      	ldr	r2, [pc, #48]	; (8002e04 <TIM_Base_SetConfig+0x124>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d103      	bne.n	8002de0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	691a      	ldr	r2, [r3, #16]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	615a      	str	r2, [r3, #20]
}
 8002de6:	bf00      	nop
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40010000 	.word	0x40010000
 8002df8:	40000400 	.word	0x40000400
 8002dfc:	40000800 	.word	0x40000800
 8002e00:	40000c00 	.word	0x40000c00
 8002e04:	40010400 	.word	0x40010400
 8002e08:	40014000 	.word	0x40014000
 8002e0c:	40014400 	.word	0x40014400
 8002e10:	40014800 	.word	0x40014800
 8002e14:	40001800 	.word	0x40001800
 8002e18:	40001c00 	.word	0x40001c00
 8002e1c:	40002000 	.word	0x40002000

08002e20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	f023 0201 	bic.w	r2, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f023 0303 	bic.w	r3, r3, #3
 8002e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f023 0302 	bic.w	r3, r3, #2
 8002e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a20      	ldr	r2, [pc, #128]	; (8002ef8 <TIM_OC1_SetConfig+0xd8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d003      	beq.n	8002e84 <TIM_OC1_SetConfig+0x64>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a1f      	ldr	r2, [pc, #124]	; (8002efc <TIM_OC1_SetConfig+0xdc>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d10c      	bne.n	8002e9e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f023 0308 	bic.w	r3, r3, #8
 8002e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f023 0304 	bic.w	r3, r3, #4
 8002e9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a15      	ldr	r2, [pc, #84]	; (8002ef8 <TIM_OC1_SetConfig+0xd8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d003      	beq.n	8002eae <TIM_OC1_SetConfig+0x8e>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a14      	ldr	r2, [pc, #80]	; (8002efc <TIM_OC1_SetConfig+0xdc>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d111      	bne.n	8002ed2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	621a      	str	r2, [r3, #32]
}
 8002eec:	bf00      	nop
 8002eee:	371c      	adds	r7, #28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	40010000 	.word	0x40010000
 8002efc:	40010400 	.word	0x40010400

08002f00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	f023 0210 	bic.w	r2, r3, #16
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	021b      	lsls	r3, r3, #8
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f023 0320 	bic.w	r3, r3, #32
 8002f4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a22      	ldr	r2, [pc, #136]	; (8002fe4 <TIM_OC2_SetConfig+0xe4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d003      	beq.n	8002f68 <TIM_OC2_SetConfig+0x68>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a21      	ldr	r2, [pc, #132]	; (8002fe8 <TIM_OC2_SetConfig+0xe8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d10d      	bne.n	8002f84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a17      	ldr	r2, [pc, #92]	; (8002fe4 <TIM_OC2_SetConfig+0xe4>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d003      	beq.n	8002f94 <TIM_OC2_SetConfig+0x94>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a16      	ldr	r2, [pc, #88]	; (8002fe8 <TIM_OC2_SetConfig+0xe8>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d113      	bne.n	8002fbc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	621a      	str	r2, [r3, #32]
}
 8002fd6:	bf00      	nop
 8002fd8:	371c      	adds	r7, #28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40010000 	.word	0x40010000
 8002fe8:	40010400 	.word	0x40010400

08002fec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800301a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f023 0303 	bic.w	r3, r3, #3
 8003022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	4313      	orrs	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003034:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	021b      	lsls	r3, r3, #8
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	4313      	orrs	r3, r2
 8003040:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a21      	ldr	r2, [pc, #132]	; (80030cc <TIM_OC3_SetConfig+0xe0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d003      	beq.n	8003052 <TIM_OC3_SetConfig+0x66>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a20      	ldr	r2, [pc, #128]	; (80030d0 <TIM_OC3_SetConfig+0xe4>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d10d      	bne.n	800306e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003058:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	021b      	lsls	r3, r3, #8
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	4313      	orrs	r3, r2
 8003064:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800306c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a16      	ldr	r2, [pc, #88]	; (80030cc <TIM_OC3_SetConfig+0xe0>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d003      	beq.n	800307e <TIM_OC3_SetConfig+0x92>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a15      	ldr	r2, [pc, #84]	; (80030d0 <TIM_OC3_SetConfig+0xe4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d113      	bne.n	80030a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800308c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	4313      	orrs	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	621a      	str	r2, [r3, #32]
}
 80030c0:	bf00      	nop
 80030c2:	371c      	adds	r7, #28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	40010000 	.word	0x40010000
 80030d0:	40010400 	.word	0x40010400

080030d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800310a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	021b      	lsls	r3, r3, #8
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4313      	orrs	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800311e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	031b      	lsls	r3, r3, #12
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a12      	ldr	r2, [pc, #72]	; (8003178 <TIM_OC4_SetConfig+0xa4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d003      	beq.n	800313c <TIM_OC4_SetConfig+0x68>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a11      	ldr	r2, [pc, #68]	; (800317c <TIM_OC4_SetConfig+0xa8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d109      	bne.n	8003150 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003142:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	019b      	lsls	r3, r3, #6
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	4313      	orrs	r3, r2
 800314e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	621a      	str	r2, [r3, #32]
}
 800316a:	bf00      	nop
 800316c:	371c      	adds	r7, #28
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40010000 	.word	0x40010000
 800317c:	40010400 	.word	0x40010400

08003180 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f003 031f 	and.w	r3, r3, #31
 8003192:	2201      	movs	r2, #1
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a1a      	ldr	r2, [r3, #32]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	43db      	mvns	r3, r3
 80031a2:	401a      	ands	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a1a      	ldr	r2, [r3, #32]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f003 031f 	and.w	r3, r3, #31
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	fa01 f303 	lsl.w	r3, r1, r3
 80031b8:	431a      	orrs	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	621a      	str	r2, [r3, #32]
}
 80031be:	bf00      	nop
 80031c0:	371c      	adds	r7, #28
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
	...

080031cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e05a      	b.n	800329a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4313      	orrs	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a21      	ldr	r2, [pc, #132]	; (80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d022      	beq.n	800326e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003230:	d01d      	beq.n	800326e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a1d      	ldr	r2, [pc, #116]	; (80032ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d018      	beq.n	800326e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a1b      	ldr	r2, [pc, #108]	; (80032b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d013      	beq.n	800326e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a1a      	ldr	r2, [pc, #104]	; (80032b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00e      	beq.n	800326e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a18      	ldr	r2, [pc, #96]	; (80032b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d009      	beq.n	800326e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a17      	ldr	r2, [pc, #92]	; (80032bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d004      	beq.n	800326e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a15      	ldr	r2, [pc, #84]	; (80032c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d10c      	bne.n	8003288 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003274:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	4313      	orrs	r3, r2
 800327e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40010000 	.word	0x40010000
 80032ac:	40000400 	.word	0x40000400
 80032b0:	40000800 	.word	0x40000800
 80032b4:	40000c00 	.word	0x40000c00
 80032b8:	40010400 	.word	0x40010400
 80032bc:	40014000 	.word	0x40014000
 80032c0:	40001800 	.word	0x40001800

080032c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80032dc:	2302      	movs	r3, #2
 80032de:	e03d      	b.n	800335c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	4313      	orrs	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4313      	orrs	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	4313      	orrs	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e03f      	b.n	8003422 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d106      	bne.n	80033bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7fe f87c 	bl	80014b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2224      	movs	r2, #36	; 0x24
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 f9cb 	bl	8003770 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695a      	ldr	r2, [r3, #20]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003408:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b08a      	sub	sp, #40	; 0x28
 800342e:	af02      	add	r7, sp, #8
 8003430:	60f8      	str	r0, [r7, #12]
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	603b      	str	r3, [r7, #0]
 8003436:	4613      	mov	r3, r2
 8003438:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800343a:	2300      	movs	r3, #0
 800343c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b20      	cmp	r3, #32
 8003448:	d17c      	bne.n	8003544 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d002      	beq.n	8003456 <HAL_UART_Transmit+0x2c>
 8003450:	88fb      	ldrh	r3, [r7, #6]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e075      	b.n	8003546 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_UART_Transmit+0x3e>
 8003464:	2302      	movs	r3, #2
 8003466:	e06e      	b.n	8003546 <HAL_UART_Transmit+0x11c>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2221      	movs	r2, #33	; 0x21
 800347a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800347e:	f7fe f8f1 	bl	8001664 <HAL_GetTick>
 8003482:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	88fa      	ldrh	r2, [r7, #6]
 8003488:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	88fa      	ldrh	r2, [r7, #6]
 800348e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003498:	d108      	bne.n	80034ac <HAL_UART_Transmit+0x82>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d104      	bne.n	80034ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	61bb      	str	r3, [r7, #24]
 80034aa:	e003      	b.n	80034b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034b0:	2300      	movs	r3, #0
 80034b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034bc:	e02a      	b.n	8003514 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	2200      	movs	r2, #0
 80034c6:	2180      	movs	r1, #128	; 0x80
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 f8e2 	bl	8003692 <UART_WaitOnFlagUntilTimeout>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e036      	b.n	8003546 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10b      	bne.n	80034f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	461a      	mov	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	3302      	adds	r3, #2
 80034f2:	61bb      	str	r3, [r7, #24]
 80034f4:	e007      	b.n	8003506 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	781a      	ldrb	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	3301      	adds	r3, #1
 8003504:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800350a:	b29b      	uxth	r3, r3
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003518:	b29b      	uxth	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1cf      	bne.n	80034be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2200      	movs	r2, #0
 8003526:	2140      	movs	r1, #64	; 0x40
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 f8b2 	bl	8003692 <UART_WaitOnFlagUntilTimeout>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e006      	b.n	8003546 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003540:	2300      	movs	r3, #0
 8003542:	e000      	b.n	8003546 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003544:	2302      	movs	r3, #2
  }
}
 8003546:	4618      	mov	r0, r3
 8003548:	3720      	adds	r7, #32
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b08a      	sub	sp, #40	; 0x28
 8003552:	af02      	add	r7, sp, #8
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	603b      	str	r3, [r7, #0]
 800355a:	4613      	mov	r3, r2
 800355c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b20      	cmp	r3, #32
 800356c:	f040 808c 	bne.w	8003688 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <HAL_UART_Receive+0x2e>
 8003576:	88fb      	ldrh	r3, [r7, #6]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e084      	b.n	800368a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_UART_Receive+0x40>
 800358a:	2302      	movs	r3, #2
 800358c:	e07d      	b.n	800368a <HAL_UART_Receive+0x13c>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2222      	movs	r2, #34	; 0x22
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035aa:	f7fe f85b 	bl	8001664 <HAL_GetTick>
 80035ae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	88fa      	ldrh	r2, [r7, #6]
 80035b4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	88fa      	ldrh	r2, [r7, #6]
 80035ba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c4:	d108      	bne.n	80035d8 <HAL_UART_Receive+0x8a>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d104      	bne.n	80035d8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	61bb      	str	r3, [r7, #24]
 80035d6:	e003      	b.n	80035e0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80035e8:	e043      	b.n	8003672 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2200      	movs	r2, #0
 80035f2:	2120      	movs	r1, #32
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 f84c 	bl	8003692 <UART_WaitOnFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e042      	b.n	800368a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10c      	bne.n	8003624 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	b29b      	uxth	r3, r3
 8003612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003616:	b29a      	uxth	r2, r3
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	3302      	adds	r3, #2
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	e01f      	b.n	8003664 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800362c:	d007      	beq.n	800363e <HAL_UART_Receive+0xf0>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10a      	bne.n	800364c <HAL_UART_Receive+0xfe>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d106      	bne.n	800364c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	b2da      	uxtb	r2, r3
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	701a      	strb	r2, [r3, #0]
 800364a:	e008      	b.n	800365e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	b2db      	uxtb	r3, r3
 8003654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003658:	b2da      	uxtb	r2, r3
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	3301      	adds	r3, #1
 8003662:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003676:	b29b      	uxth	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1b6      	bne.n	80035ea <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003684:	2300      	movs	r3, #0
 8003686:	e000      	b.n	800368a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003688:	2302      	movs	r3, #2
  }
}
 800368a:	4618      	mov	r0, r3
 800368c:	3720      	adds	r7, #32
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b090      	sub	sp, #64	; 0x40
 8003696:	af00      	add	r7, sp, #0
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	603b      	str	r3, [r7, #0]
 800369e:	4613      	mov	r3, r2
 80036a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a2:	e050      	b.n	8003746 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036aa:	d04c      	beq.n	8003746 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d007      	beq.n	80036c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80036b2:	f7fd ffd7 	bl	8001664 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036be:	429a      	cmp	r2, r3
 80036c0:	d241      	bcs.n	8003746 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	330c      	adds	r3, #12
 80036c8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036cc:	e853 3f00 	ldrex	r3, [r3]
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	330c      	adds	r3, #12
 80036e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036e2:	637a      	str	r2, [r7, #52]	; 0x34
 80036e4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036ea:	e841 2300 	strex	r3, r2, [r1]
 80036ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1e5      	bne.n	80036c2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	3314      	adds	r3, #20
 80036fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	e853 3f00 	ldrex	r3, [r3]
 8003704:	613b      	str	r3, [r7, #16]
   return(result);
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f023 0301 	bic.w	r3, r3, #1
 800370c:	63bb      	str	r3, [r7, #56]	; 0x38
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3314      	adds	r3, #20
 8003714:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003716:	623a      	str	r2, [r7, #32]
 8003718:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371a:	69f9      	ldr	r1, [r7, #28]
 800371c:	6a3a      	ldr	r2, [r7, #32]
 800371e:	e841 2300 	strex	r3, r2, [r1]
 8003722:	61bb      	str	r3, [r7, #24]
   return(result);
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1e5      	bne.n	80036f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2220      	movs	r2, #32
 800372e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e00f      	b.n	8003766 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4013      	ands	r3, r2
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	429a      	cmp	r2, r3
 8003754:	bf0c      	ite	eq
 8003756:	2301      	moveq	r3, #1
 8003758:	2300      	movne	r3, #0
 800375a:	b2db      	uxtb	r3, r3
 800375c:	461a      	mov	r2, r3
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	429a      	cmp	r2, r3
 8003762:	d09f      	beq.n	80036a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3740      	adds	r7, #64	; 0x40
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003774:	b0c0      	sub	sp, #256	; 0x100
 8003776:	af00      	add	r7, sp, #0
 8003778:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800377c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378c:	68d9      	ldr	r1, [r3, #12]
 800378e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	ea40 0301 	orr.w	r3, r0, r1
 8003798:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800379a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	431a      	orrs	r2, r3
 80037a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	431a      	orrs	r2, r3
 80037b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037c8:	f021 010c 	bic.w	r1, r1, #12
 80037cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80037d6:	430b      	orrs	r3, r1
 80037d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ea:	6999      	ldr	r1, [r3, #24]
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	ea40 0301 	orr.w	r3, r0, r1
 80037f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	4b8f      	ldr	r3, [pc, #572]	; (8003a3c <UART_SetConfig+0x2cc>)
 8003800:	429a      	cmp	r2, r3
 8003802:	d005      	beq.n	8003810 <UART_SetConfig+0xa0>
 8003804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	4b8d      	ldr	r3, [pc, #564]	; (8003a40 <UART_SetConfig+0x2d0>)
 800380c:	429a      	cmp	r2, r3
 800380e:	d104      	bne.n	800381a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003810:	f7fe fe5a 	bl	80024c8 <HAL_RCC_GetPCLK2Freq>
 8003814:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003818:	e003      	b.n	8003822 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800381a:	f7fe fe41 	bl	80024a0 <HAL_RCC_GetPCLK1Freq>
 800381e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800382c:	f040 810c 	bne.w	8003a48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003834:	2200      	movs	r2, #0
 8003836:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800383a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800383e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003842:	4622      	mov	r2, r4
 8003844:	462b      	mov	r3, r5
 8003846:	1891      	adds	r1, r2, r2
 8003848:	65b9      	str	r1, [r7, #88]	; 0x58
 800384a:	415b      	adcs	r3, r3
 800384c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800384e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003852:	4621      	mov	r1, r4
 8003854:	eb12 0801 	adds.w	r8, r2, r1
 8003858:	4629      	mov	r1, r5
 800385a:	eb43 0901 	adc.w	r9, r3, r1
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	f04f 0300 	mov.w	r3, #0
 8003866:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800386a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800386e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003872:	4690      	mov	r8, r2
 8003874:	4699      	mov	r9, r3
 8003876:	4623      	mov	r3, r4
 8003878:	eb18 0303 	adds.w	r3, r8, r3
 800387c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003880:	462b      	mov	r3, r5
 8003882:	eb49 0303 	adc.w	r3, r9, r3
 8003886:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800388a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003896:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800389a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800389e:	460b      	mov	r3, r1
 80038a0:	18db      	adds	r3, r3, r3
 80038a2:	653b      	str	r3, [r7, #80]	; 0x50
 80038a4:	4613      	mov	r3, r2
 80038a6:	eb42 0303 	adc.w	r3, r2, r3
 80038aa:	657b      	str	r3, [r7, #84]	; 0x54
 80038ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038b4:	f7fc fcf4 	bl	80002a0 <__aeabi_uldivmod>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4b61      	ldr	r3, [pc, #388]	; (8003a44 <UART_SetConfig+0x2d4>)
 80038be:	fba3 2302 	umull	r2, r3, r3, r2
 80038c2:	095b      	lsrs	r3, r3, #5
 80038c4:	011c      	lsls	r4, r3, #4
 80038c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038ca:	2200      	movs	r2, #0
 80038cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80038d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80038d8:	4642      	mov	r2, r8
 80038da:	464b      	mov	r3, r9
 80038dc:	1891      	adds	r1, r2, r2
 80038de:	64b9      	str	r1, [r7, #72]	; 0x48
 80038e0:	415b      	adcs	r3, r3
 80038e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038e8:	4641      	mov	r1, r8
 80038ea:	eb12 0a01 	adds.w	sl, r2, r1
 80038ee:	4649      	mov	r1, r9
 80038f0:	eb43 0b01 	adc.w	fp, r3, r1
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	f04f 0300 	mov.w	r3, #0
 80038fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003900:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003904:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003908:	4692      	mov	sl, r2
 800390a:	469b      	mov	fp, r3
 800390c:	4643      	mov	r3, r8
 800390e:	eb1a 0303 	adds.w	r3, sl, r3
 8003912:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003916:	464b      	mov	r3, r9
 8003918:	eb4b 0303 	adc.w	r3, fp, r3
 800391c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800392c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003930:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003934:	460b      	mov	r3, r1
 8003936:	18db      	adds	r3, r3, r3
 8003938:	643b      	str	r3, [r7, #64]	; 0x40
 800393a:	4613      	mov	r3, r2
 800393c:	eb42 0303 	adc.w	r3, r2, r3
 8003940:	647b      	str	r3, [r7, #68]	; 0x44
 8003942:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003946:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800394a:	f7fc fca9 	bl	80002a0 <__aeabi_uldivmod>
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	4611      	mov	r1, r2
 8003954:	4b3b      	ldr	r3, [pc, #236]	; (8003a44 <UART_SetConfig+0x2d4>)
 8003956:	fba3 2301 	umull	r2, r3, r3, r1
 800395a:	095b      	lsrs	r3, r3, #5
 800395c:	2264      	movs	r2, #100	; 0x64
 800395e:	fb02 f303 	mul.w	r3, r2, r3
 8003962:	1acb      	subs	r3, r1, r3
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800396a:	4b36      	ldr	r3, [pc, #216]	; (8003a44 <UART_SetConfig+0x2d4>)
 800396c:	fba3 2302 	umull	r2, r3, r3, r2
 8003970:	095b      	lsrs	r3, r3, #5
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003978:	441c      	add	r4, r3
 800397a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800397e:	2200      	movs	r2, #0
 8003980:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003984:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003988:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800398c:	4642      	mov	r2, r8
 800398e:	464b      	mov	r3, r9
 8003990:	1891      	adds	r1, r2, r2
 8003992:	63b9      	str	r1, [r7, #56]	; 0x38
 8003994:	415b      	adcs	r3, r3
 8003996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003998:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800399c:	4641      	mov	r1, r8
 800399e:	1851      	adds	r1, r2, r1
 80039a0:	6339      	str	r1, [r7, #48]	; 0x30
 80039a2:	4649      	mov	r1, r9
 80039a4:	414b      	adcs	r3, r1
 80039a6:	637b      	str	r3, [r7, #52]	; 0x34
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80039b4:	4659      	mov	r1, fp
 80039b6:	00cb      	lsls	r3, r1, #3
 80039b8:	4651      	mov	r1, sl
 80039ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039be:	4651      	mov	r1, sl
 80039c0:	00ca      	lsls	r2, r1, #3
 80039c2:	4610      	mov	r0, r2
 80039c4:	4619      	mov	r1, r3
 80039c6:	4603      	mov	r3, r0
 80039c8:	4642      	mov	r2, r8
 80039ca:	189b      	adds	r3, r3, r2
 80039cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039d0:	464b      	mov	r3, r9
 80039d2:	460a      	mov	r2, r1
 80039d4:	eb42 0303 	adc.w	r3, r2, r3
 80039d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80039e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80039ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80039f0:	460b      	mov	r3, r1
 80039f2:	18db      	adds	r3, r3, r3
 80039f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80039f6:	4613      	mov	r3, r2
 80039f8:	eb42 0303 	adc.w	r3, r2, r3
 80039fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a06:	f7fc fc4b 	bl	80002a0 <__aeabi_uldivmod>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4b0d      	ldr	r3, [pc, #52]	; (8003a44 <UART_SetConfig+0x2d4>)
 8003a10:	fba3 1302 	umull	r1, r3, r3, r2
 8003a14:	095b      	lsrs	r3, r3, #5
 8003a16:	2164      	movs	r1, #100	; 0x64
 8003a18:	fb01 f303 	mul.w	r3, r1, r3
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	3332      	adds	r3, #50	; 0x32
 8003a22:	4a08      	ldr	r2, [pc, #32]	; (8003a44 <UART_SetConfig+0x2d4>)
 8003a24:	fba2 2303 	umull	r2, r3, r2, r3
 8003a28:	095b      	lsrs	r3, r3, #5
 8003a2a:	f003 0207 	and.w	r2, r3, #7
 8003a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4422      	add	r2, r4
 8003a36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a38:	e105      	b.n	8003c46 <UART_SetConfig+0x4d6>
 8003a3a:	bf00      	nop
 8003a3c:	40011000 	.word	0x40011000
 8003a40:	40011400 	.word	0x40011400
 8003a44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a5a:	4642      	mov	r2, r8
 8003a5c:	464b      	mov	r3, r9
 8003a5e:	1891      	adds	r1, r2, r2
 8003a60:	6239      	str	r1, [r7, #32]
 8003a62:	415b      	adcs	r3, r3
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
 8003a66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a6a:	4641      	mov	r1, r8
 8003a6c:	1854      	adds	r4, r2, r1
 8003a6e:	4649      	mov	r1, r9
 8003a70:	eb43 0501 	adc.w	r5, r3, r1
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	f04f 0300 	mov.w	r3, #0
 8003a7c:	00eb      	lsls	r3, r5, #3
 8003a7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a82:	00e2      	lsls	r2, r4, #3
 8003a84:	4614      	mov	r4, r2
 8003a86:	461d      	mov	r5, r3
 8003a88:	4643      	mov	r3, r8
 8003a8a:	18e3      	adds	r3, r4, r3
 8003a8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a90:	464b      	mov	r3, r9
 8003a92:	eb45 0303 	adc.w	r3, r5, r3
 8003a96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003aa6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	008b      	lsls	r3, r1, #2
 8003aba:	4621      	mov	r1, r4
 8003abc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ac0:	4621      	mov	r1, r4
 8003ac2:	008a      	lsls	r2, r1, #2
 8003ac4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ac8:	f7fc fbea 	bl	80002a0 <__aeabi_uldivmod>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4b60      	ldr	r3, [pc, #384]	; (8003c54 <UART_SetConfig+0x4e4>)
 8003ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ad6:	095b      	lsrs	r3, r3, #5
 8003ad8:	011c      	lsls	r4, r3, #4
 8003ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ae4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ae8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003aec:	4642      	mov	r2, r8
 8003aee:	464b      	mov	r3, r9
 8003af0:	1891      	adds	r1, r2, r2
 8003af2:	61b9      	str	r1, [r7, #24]
 8003af4:	415b      	adcs	r3, r3
 8003af6:	61fb      	str	r3, [r7, #28]
 8003af8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003afc:	4641      	mov	r1, r8
 8003afe:	1851      	adds	r1, r2, r1
 8003b00:	6139      	str	r1, [r7, #16]
 8003b02:	4649      	mov	r1, r9
 8003b04:	414b      	adcs	r3, r1
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	f04f 0200 	mov.w	r2, #0
 8003b0c:	f04f 0300 	mov.w	r3, #0
 8003b10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b14:	4659      	mov	r1, fp
 8003b16:	00cb      	lsls	r3, r1, #3
 8003b18:	4651      	mov	r1, sl
 8003b1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b1e:	4651      	mov	r1, sl
 8003b20:	00ca      	lsls	r2, r1, #3
 8003b22:	4610      	mov	r0, r2
 8003b24:	4619      	mov	r1, r3
 8003b26:	4603      	mov	r3, r0
 8003b28:	4642      	mov	r2, r8
 8003b2a:	189b      	adds	r3, r3, r2
 8003b2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b30:	464b      	mov	r3, r9
 8003b32:	460a      	mov	r2, r1
 8003b34:	eb42 0303 	adc.w	r3, r2, r3
 8003b38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b54:	4649      	mov	r1, r9
 8003b56:	008b      	lsls	r3, r1, #2
 8003b58:	4641      	mov	r1, r8
 8003b5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b5e:	4641      	mov	r1, r8
 8003b60:	008a      	lsls	r2, r1, #2
 8003b62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b66:	f7fc fb9b 	bl	80002a0 <__aeabi_uldivmod>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	4b39      	ldr	r3, [pc, #228]	; (8003c54 <UART_SetConfig+0x4e4>)
 8003b70:	fba3 1302 	umull	r1, r3, r3, r2
 8003b74:	095b      	lsrs	r3, r3, #5
 8003b76:	2164      	movs	r1, #100	; 0x64
 8003b78:	fb01 f303 	mul.w	r3, r1, r3
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	3332      	adds	r3, #50	; 0x32
 8003b82:	4a34      	ldr	r2, [pc, #208]	; (8003c54 <UART_SetConfig+0x4e4>)
 8003b84:	fba2 2303 	umull	r2, r3, r2, r3
 8003b88:	095b      	lsrs	r3, r3, #5
 8003b8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b8e:	441c      	add	r4, r3
 8003b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b94:	2200      	movs	r2, #0
 8003b96:	673b      	str	r3, [r7, #112]	; 0x70
 8003b98:	677a      	str	r2, [r7, #116]	; 0x74
 8003b9a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b9e:	4642      	mov	r2, r8
 8003ba0:	464b      	mov	r3, r9
 8003ba2:	1891      	adds	r1, r2, r2
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	415b      	adcs	r3, r3
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bae:	4641      	mov	r1, r8
 8003bb0:	1851      	adds	r1, r2, r1
 8003bb2:	6039      	str	r1, [r7, #0]
 8003bb4:	4649      	mov	r1, r9
 8003bb6:	414b      	adcs	r3, r1
 8003bb8:	607b      	str	r3, [r7, #4]
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bc6:	4659      	mov	r1, fp
 8003bc8:	00cb      	lsls	r3, r1, #3
 8003bca:	4651      	mov	r1, sl
 8003bcc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bd0:	4651      	mov	r1, sl
 8003bd2:	00ca      	lsls	r2, r1, #3
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4603      	mov	r3, r0
 8003bda:	4642      	mov	r2, r8
 8003bdc:	189b      	adds	r3, r3, r2
 8003bde:	66bb      	str	r3, [r7, #104]	; 0x68
 8003be0:	464b      	mov	r3, r9
 8003be2:	460a      	mov	r2, r1
 8003be4:	eb42 0303 	adc.w	r3, r2, r3
 8003be8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	663b      	str	r3, [r7, #96]	; 0x60
 8003bf4:	667a      	str	r2, [r7, #100]	; 0x64
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	f04f 0300 	mov.w	r3, #0
 8003bfe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c02:	4649      	mov	r1, r9
 8003c04:	008b      	lsls	r3, r1, #2
 8003c06:	4641      	mov	r1, r8
 8003c08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c0c:	4641      	mov	r1, r8
 8003c0e:	008a      	lsls	r2, r1, #2
 8003c10:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c14:	f7fc fb44 	bl	80002a0 <__aeabi_uldivmod>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4b0d      	ldr	r3, [pc, #52]	; (8003c54 <UART_SetConfig+0x4e4>)
 8003c1e:	fba3 1302 	umull	r1, r3, r3, r2
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	2164      	movs	r1, #100	; 0x64
 8003c26:	fb01 f303 	mul.w	r3, r1, r3
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	3332      	adds	r3, #50	; 0x32
 8003c30:	4a08      	ldr	r2, [pc, #32]	; (8003c54 <UART_SetConfig+0x4e4>)
 8003c32:	fba2 2303 	umull	r2, r3, r2, r3
 8003c36:	095b      	lsrs	r3, r3, #5
 8003c38:	f003 020f 	and.w	r2, r3, #15
 8003c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4422      	add	r2, r4
 8003c44:	609a      	str	r2, [r3, #8]
}
 8003c46:	bf00      	nop
 8003c48:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c52:	bf00      	nop
 8003c54:	51eb851f 	.word	0x51eb851f

08003c58 <findslot>:
 8003c58:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <findslot+0x2c>)
 8003c5a:	b510      	push	{r4, lr}
 8003c5c:	4604      	mov	r4, r0
 8003c5e:	6818      	ldr	r0, [r3, #0]
 8003c60:	b118      	cbz	r0, 8003c6a <findslot+0x12>
 8003c62:	6983      	ldr	r3, [r0, #24]
 8003c64:	b90b      	cbnz	r3, 8003c6a <findslot+0x12>
 8003c66:	f000 faf7 	bl	8004258 <__sinit>
 8003c6a:	2c13      	cmp	r4, #19
 8003c6c:	d807      	bhi.n	8003c7e <findslot+0x26>
 8003c6e:	4806      	ldr	r0, [pc, #24]	; (8003c88 <findslot+0x30>)
 8003c70:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8003c74:	3201      	adds	r2, #1
 8003c76:	d002      	beq.n	8003c7e <findslot+0x26>
 8003c78:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003c7c:	bd10      	pop	{r4, pc}
 8003c7e:	2000      	movs	r0, #0
 8003c80:	e7fc      	b.n	8003c7c <findslot+0x24>
 8003c82:	bf00      	nop
 8003c84:	200001d8 	.word	0x200001d8
 8003c88:	200003a8 	.word	0x200003a8

08003c8c <error>:
 8003c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8e:	4604      	mov	r4, r0
 8003c90:	f000 fa84 	bl	800419c <__errno>
 8003c94:	2613      	movs	r6, #19
 8003c96:	4605      	mov	r5, r0
 8003c98:	2700      	movs	r7, #0
 8003c9a:	4630      	mov	r0, r6
 8003c9c:	4639      	mov	r1, r7
 8003c9e:	beab      	bkpt	0x00ab
 8003ca0:	4606      	mov	r6, r0
 8003ca2:	602e      	str	r6, [r5, #0]
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003ca8 <checkerror>:
 8003ca8:	1c43      	adds	r3, r0, #1
 8003caa:	d101      	bne.n	8003cb0 <checkerror+0x8>
 8003cac:	f7ff bfee 	b.w	8003c8c <error>
 8003cb0:	4770      	bx	lr

08003cb2 <_swiread>:
 8003cb2:	b530      	push	{r4, r5, lr}
 8003cb4:	b085      	sub	sp, #20
 8003cb6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003cba:	9203      	str	r2, [sp, #12]
 8003cbc:	2406      	movs	r4, #6
 8003cbe:	ad01      	add	r5, sp, #4
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	beab      	bkpt	0x00ab
 8003cc6:	4604      	mov	r4, r0
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f7ff ffed 	bl	8003ca8 <checkerror>
 8003cce:	b005      	add	sp, #20
 8003cd0:	bd30      	pop	{r4, r5, pc}

08003cd2 <_read>:
 8003cd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cd4:	4615      	mov	r5, r2
 8003cd6:	9101      	str	r1, [sp, #4]
 8003cd8:	f7ff ffbe 	bl	8003c58 <findslot>
 8003cdc:	9901      	ldr	r1, [sp, #4]
 8003cde:	4604      	mov	r4, r0
 8003ce0:	b938      	cbnz	r0, 8003cf2 <_read+0x20>
 8003ce2:	f000 fa5b 	bl	800419c <__errno>
 8003ce6:	2309      	movs	r3, #9
 8003ce8:	6003      	str	r3, [r0, #0]
 8003cea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cee:	b003      	add	sp, #12
 8003cf0:	bd30      	pop	{r4, r5, pc}
 8003cf2:	6800      	ldr	r0, [r0, #0]
 8003cf4:	462a      	mov	r2, r5
 8003cf6:	f7ff ffdc 	bl	8003cb2 <_swiread>
 8003cfa:	1c43      	adds	r3, r0, #1
 8003cfc:	d0f7      	beq.n	8003cee <_read+0x1c>
 8003cfe:	6863      	ldr	r3, [r4, #4]
 8003d00:	1a2a      	subs	r2, r5, r0
 8003d02:	4413      	add	r3, r2
 8003d04:	6063      	str	r3, [r4, #4]
 8003d06:	4610      	mov	r0, r2
 8003d08:	e7f1      	b.n	8003cee <_read+0x1c>

08003d0a <_swilseek>:
 8003d0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d0c:	460c      	mov	r4, r1
 8003d0e:	4616      	mov	r6, r2
 8003d10:	f7ff ffa2 	bl	8003c58 <findslot>
 8003d14:	4605      	mov	r5, r0
 8003d16:	b940      	cbnz	r0, 8003d2a <_swilseek+0x20>
 8003d18:	f000 fa40 	bl	800419c <__errno>
 8003d1c:	2309      	movs	r3, #9
 8003d1e:	6003      	str	r3, [r0, #0]
 8003d20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003d24:	4620      	mov	r0, r4
 8003d26:	b003      	add	sp, #12
 8003d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d2a:	2e02      	cmp	r6, #2
 8003d2c:	d903      	bls.n	8003d36 <_swilseek+0x2c>
 8003d2e:	f000 fa35 	bl	800419c <__errno>
 8003d32:	2316      	movs	r3, #22
 8003d34:	e7f3      	b.n	8003d1e <_swilseek+0x14>
 8003d36:	2e01      	cmp	r6, #1
 8003d38:	d112      	bne.n	8003d60 <_swilseek+0x56>
 8003d3a:	6843      	ldr	r3, [r0, #4]
 8003d3c:	18e4      	adds	r4, r4, r3
 8003d3e:	d4f6      	bmi.n	8003d2e <_swilseek+0x24>
 8003d40:	682b      	ldr	r3, [r5, #0]
 8003d42:	260a      	movs	r6, #10
 8003d44:	e9cd 3400 	strd	r3, r4, [sp]
 8003d48:	466f      	mov	r7, sp
 8003d4a:	4630      	mov	r0, r6
 8003d4c:	4639      	mov	r1, r7
 8003d4e:	beab      	bkpt	0x00ab
 8003d50:	4606      	mov	r6, r0
 8003d52:	4630      	mov	r0, r6
 8003d54:	f7ff ffa8 	bl	8003ca8 <checkerror>
 8003d58:	2800      	cmp	r0, #0
 8003d5a:	dbe1      	blt.n	8003d20 <_swilseek+0x16>
 8003d5c:	606c      	str	r4, [r5, #4]
 8003d5e:	e7e1      	b.n	8003d24 <_swilseek+0x1a>
 8003d60:	2e02      	cmp	r6, #2
 8003d62:	d1ed      	bne.n	8003d40 <_swilseek+0x36>
 8003d64:	6803      	ldr	r3, [r0, #0]
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	260c      	movs	r6, #12
 8003d6a:	466f      	mov	r7, sp
 8003d6c:	4630      	mov	r0, r6
 8003d6e:	4639      	mov	r1, r7
 8003d70:	beab      	bkpt	0x00ab
 8003d72:	4606      	mov	r6, r0
 8003d74:	4630      	mov	r0, r6
 8003d76:	f7ff ff97 	bl	8003ca8 <checkerror>
 8003d7a:	1c43      	adds	r3, r0, #1
 8003d7c:	d0d0      	beq.n	8003d20 <_swilseek+0x16>
 8003d7e:	4404      	add	r4, r0
 8003d80:	e7de      	b.n	8003d40 <_swilseek+0x36>

08003d82 <_lseek>:
 8003d82:	f7ff bfc2 	b.w	8003d0a <_swilseek>

08003d86 <_swiwrite>:
 8003d86:	b530      	push	{r4, r5, lr}
 8003d88:	b085      	sub	sp, #20
 8003d8a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003d8e:	9203      	str	r2, [sp, #12]
 8003d90:	2405      	movs	r4, #5
 8003d92:	ad01      	add	r5, sp, #4
 8003d94:	4620      	mov	r0, r4
 8003d96:	4629      	mov	r1, r5
 8003d98:	beab      	bkpt	0x00ab
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	4620      	mov	r0, r4
 8003d9e:	f7ff ff83 	bl	8003ca8 <checkerror>
 8003da2:	b005      	add	sp, #20
 8003da4:	bd30      	pop	{r4, r5, pc}

08003da6 <_write>:
 8003da6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003da8:	4615      	mov	r5, r2
 8003daa:	9101      	str	r1, [sp, #4]
 8003dac:	f7ff ff54 	bl	8003c58 <findslot>
 8003db0:	9901      	ldr	r1, [sp, #4]
 8003db2:	4604      	mov	r4, r0
 8003db4:	b930      	cbnz	r0, 8003dc4 <_write+0x1e>
 8003db6:	f000 f9f1 	bl	800419c <__errno>
 8003dba:	2309      	movs	r3, #9
 8003dbc:	6003      	str	r3, [r0, #0]
 8003dbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003dc2:	e012      	b.n	8003dea <_write+0x44>
 8003dc4:	6800      	ldr	r0, [r0, #0]
 8003dc6:	462a      	mov	r2, r5
 8003dc8:	f7ff ffdd 	bl	8003d86 <_swiwrite>
 8003dcc:	2800      	cmp	r0, #0
 8003dce:	dbf6      	blt.n	8003dbe <_write+0x18>
 8003dd0:	6862      	ldr	r2, [r4, #4]
 8003dd2:	1a2b      	subs	r3, r5, r0
 8003dd4:	441a      	add	r2, r3
 8003dd6:	42a8      	cmp	r0, r5
 8003dd8:	6062      	str	r2, [r4, #4]
 8003dda:	d105      	bne.n	8003de8 <_write+0x42>
 8003ddc:	2000      	movs	r0, #0
 8003dde:	b003      	add	sp, #12
 8003de0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003de4:	f7ff bf52 	b.w	8003c8c <error>
 8003de8:	4618      	mov	r0, r3
 8003dea:	b003      	add	sp, #12
 8003dec:	bd30      	pop	{r4, r5, pc}

08003dee <_swiclose>:
 8003dee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003df0:	2402      	movs	r4, #2
 8003df2:	9001      	str	r0, [sp, #4]
 8003df4:	ad01      	add	r5, sp, #4
 8003df6:	4620      	mov	r0, r4
 8003df8:	4629      	mov	r1, r5
 8003dfa:	beab      	bkpt	0x00ab
 8003dfc:	4604      	mov	r4, r0
 8003dfe:	4620      	mov	r0, r4
 8003e00:	f7ff ff52 	bl	8003ca8 <checkerror>
 8003e04:	b003      	add	sp, #12
 8003e06:	bd30      	pop	{r4, r5, pc}

08003e08 <_close>:
 8003e08:	b538      	push	{r3, r4, r5, lr}
 8003e0a:	4605      	mov	r5, r0
 8003e0c:	f7ff ff24 	bl	8003c58 <findslot>
 8003e10:	4604      	mov	r4, r0
 8003e12:	b930      	cbnz	r0, 8003e22 <_close+0x1a>
 8003e14:	f000 f9c2 	bl	800419c <__errno>
 8003e18:	2309      	movs	r3, #9
 8003e1a:	6003      	str	r3, [r0, #0]
 8003e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e20:	bd38      	pop	{r3, r4, r5, pc}
 8003e22:	3d01      	subs	r5, #1
 8003e24:	2d01      	cmp	r5, #1
 8003e26:	d809      	bhi.n	8003e3c <_close+0x34>
 8003e28:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <_close+0x48>)
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d104      	bne.n	8003e3c <_close+0x34>
 8003e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e36:	6003      	str	r3, [r0, #0]
 8003e38:	2000      	movs	r0, #0
 8003e3a:	e7f1      	b.n	8003e20 <_close+0x18>
 8003e3c:	6820      	ldr	r0, [r4, #0]
 8003e3e:	f7ff ffd6 	bl	8003dee <_swiclose>
 8003e42:	2800      	cmp	r0, #0
 8003e44:	d1ec      	bne.n	8003e20 <_close+0x18>
 8003e46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e4a:	6023      	str	r3, [r4, #0]
 8003e4c:	e7e8      	b.n	8003e20 <_close+0x18>
 8003e4e:	bf00      	nop
 8003e50:	200003a8 	.word	0x200003a8

08003e54 <_swistat>:
 8003e54:	b570      	push	{r4, r5, r6, lr}
 8003e56:	460c      	mov	r4, r1
 8003e58:	f7ff fefe 	bl	8003c58 <findslot>
 8003e5c:	4605      	mov	r5, r0
 8003e5e:	b930      	cbnz	r0, 8003e6e <_swistat+0x1a>
 8003e60:	f000 f99c 	bl	800419c <__errno>
 8003e64:	2309      	movs	r3, #9
 8003e66:	6003      	str	r3, [r0, #0]
 8003e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e6c:	bd70      	pop	{r4, r5, r6, pc}
 8003e6e:	6863      	ldr	r3, [r4, #4]
 8003e70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e74:	6063      	str	r3, [r4, #4]
 8003e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e7a:	64a3      	str	r3, [r4, #72]	; 0x48
 8003e7c:	260c      	movs	r6, #12
 8003e7e:	4630      	mov	r0, r6
 8003e80:	4629      	mov	r1, r5
 8003e82:	beab      	bkpt	0x00ab
 8003e84:	4605      	mov	r5, r0
 8003e86:	4628      	mov	r0, r5
 8003e88:	f7ff ff0e 	bl	8003ca8 <checkerror>
 8003e8c:	1c43      	adds	r3, r0, #1
 8003e8e:	bf1c      	itt	ne
 8003e90:	6120      	strne	r0, [r4, #16]
 8003e92:	2000      	movne	r0, #0
 8003e94:	e7ea      	b.n	8003e6c <_swistat+0x18>

08003e96 <_fstat>:
 8003e96:	460b      	mov	r3, r1
 8003e98:	b510      	push	{r4, lr}
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	4604      	mov	r4, r0
 8003e9e:	2258      	movs	r2, #88	; 0x58
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 fa9e 	bl	80043e2 <memset>
 8003ea6:	4601      	mov	r1, r0
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eae:	f7ff bfd1 	b.w	8003e54 <_swistat>

08003eb2 <_stat>:
 8003eb2:	b538      	push	{r3, r4, r5, lr}
 8003eb4:	460d      	mov	r5, r1
 8003eb6:	4604      	mov	r4, r0
 8003eb8:	2258      	movs	r2, #88	; 0x58
 8003eba:	2100      	movs	r1, #0
 8003ebc:	4628      	mov	r0, r5
 8003ebe:	f000 fa90 	bl	80043e2 <memset>
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	f000 f811 	bl	8003eec <_swiopen>
 8003eca:	1c43      	adds	r3, r0, #1
 8003ecc:	4604      	mov	r4, r0
 8003ece:	d00b      	beq.n	8003ee8 <_stat+0x36>
 8003ed0:	686b      	ldr	r3, [r5, #4]
 8003ed2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003ed6:	606b      	str	r3, [r5, #4]
 8003ed8:	4629      	mov	r1, r5
 8003eda:	f7ff ffbb 	bl	8003e54 <_swistat>
 8003ede:	4605      	mov	r5, r0
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	f7ff ff91 	bl	8003e08 <_close>
 8003ee6:	462c      	mov	r4, r5
 8003ee8:	4620      	mov	r0, r4
 8003eea:	bd38      	pop	{r3, r4, r5, pc}

08003eec <_swiopen>:
 8003eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ef0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003f9c <_swiopen+0xb0>
 8003ef4:	b097      	sub	sp, #92	; 0x5c
 8003ef6:	4607      	mov	r7, r0
 8003ef8:	460e      	mov	r6, r1
 8003efa:	2500      	movs	r5, #0
 8003efc:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8003f00:	1c61      	adds	r1, r4, #1
 8003f02:	d037      	beq.n	8003f74 <_swiopen+0x88>
 8003f04:	3501      	adds	r5, #1
 8003f06:	2d14      	cmp	r5, #20
 8003f08:	d1f8      	bne.n	8003efc <_swiopen+0x10>
 8003f0a:	f000 f947 	bl	800419c <__errno>
 8003f0e:	2318      	movs	r3, #24
 8003f10:	6003      	str	r3, [r0, #0]
 8003f12:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003f16:	e03d      	b.n	8003f94 <_swiopen+0xa8>
 8003f18:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8003f1c:	f240 6301 	movw	r3, #1537	; 0x601
 8003f20:	07b2      	lsls	r2, r6, #30
 8003f22:	bf48      	it	mi
 8003f24:	f044 0402 	orrmi.w	r4, r4, #2
 8003f28:	421e      	tst	r6, r3
 8003f2a:	bf18      	it	ne
 8003f2c:	f044 0404 	orrne.w	r4, r4, #4
 8003f30:	0733      	lsls	r3, r6, #28
 8003f32:	bf48      	it	mi
 8003f34:	f024 0404 	bicmi.w	r4, r4, #4
 8003f38:	4638      	mov	r0, r7
 8003f3a:	bf48      	it	mi
 8003f3c:	f044 0408 	orrmi.w	r4, r4, #8
 8003f40:	9700      	str	r7, [sp, #0]
 8003f42:	f7fc f955 	bl	80001f0 <strlen>
 8003f46:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8003f4a:	2401      	movs	r4, #1
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	4649      	mov	r1, r9
 8003f50:	beab      	bkpt	0x00ab
 8003f52:	4604      	mov	r4, r0
 8003f54:	2c00      	cmp	r4, #0
 8003f56:	db08      	blt.n	8003f6a <_swiopen+0x7e>
 8003f58:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8003f5c:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8003f60:	2300      	movs	r3, #0
 8003f62:	f8c8 3004 	str.w	r3, [r8, #4]
 8003f66:	462c      	mov	r4, r5
 8003f68:	e014      	b.n	8003f94 <_swiopen+0xa8>
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	f7ff fe8e 	bl	8003c8c <error>
 8003f70:	4604      	mov	r4, r0
 8003f72:	e00f      	b.n	8003f94 <_swiopen+0xa8>
 8003f74:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8003f78:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003f7c:	46e9      	mov	r9, sp
 8003f7e:	d1cb      	bne.n	8003f18 <_swiopen+0x2c>
 8003f80:	4649      	mov	r1, r9
 8003f82:	4638      	mov	r0, r7
 8003f84:	f7ff ff95 	bl	8003eb2 <_stat>
 8003f88:	3001      	adds	r0, #1
 8003f8a:	d0c5      	beq.n	8003f18 <_swiopen+0x2c>
 8003f8c:	f000 f906 	bl	800419c <__errno>
 8003f90:	2311      	movs	r3, #17
 8003f92:	6003      	str	r3, [r0, #0]
 8003f94:	4620      	mov	r0, r4
 8003f96:	b017      	add	sp, #92	; 0x5c
 8003f98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f9c:	200003a8 	.word	0x200003a8

08003fa0 <_get_semihosting_exts>:
 8003fa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003fa4:	4606      	mov	r6, r0
 8003fa6:	460f      	mov	r7, r1
 8003fa8:	482a      	ldr	r0, [pc, #168]	; (8004054 <_get_semihosting_exts+0xb4>)
 8003faa:	2100      	movs	r1, #0
 8003fac:	4615      	mov	r5, r2
 8003fae:	f7ff ff9d 	bl	8003eec <_swiopen>
 8003fb2:	462a      	mov	r2, r5
 8003fb4:	4604      	mov	r4, r0
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	4630      	mov	r0, r6
 8003fba:	f000 fa12 	bl	80043e2 <memset>
 8003fbe:	1c63      	adds	r3, r4, #1
 8003fc0:	d016      	beq.n	8003ff0 <_get_semihosting_exts+0x50>
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	f7ff fe48 	bl	8003c58 <findslot>
 8003fc8:	f04f 090c 	mov.w	r9, #12
 8003fcc:	4680      	mov	r8, r0
 8003fce:	4648      	mov	r0, r9
 8003fd0:	4641      	mov	r1, r8
 8003fd2:	beab      	bkpt	0x00ab
 8003fd4:	4680      	mov	r8, r0
 8003fd6:	4640      	mov	r0, r8
 8003fd8:	f7ff fe66 	bl	8003ca8 <checkerror>
 8003fdc:	2803      	cmp	r0, #3
 8003fde:	dd02      	ble.n	8003fe6 <_get_semihosting_exts+0x46>
 8003fe0:	1ec3      	subs	r3, r0, #3
 8003fe2:	42ab      	cmp	r3, r5
 8003fe4:	dc08      	bgt.n	8003ff8 <_get_semihosting_exts+0x58>
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	f7ff ff0e 	bl	8003e08 <_close>
 8003fec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	b003      	add	sp, #12
 8003ff4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ff8:	2204      	movs	r2, #4
 8003ffa:	eb0d 0102 	add.w	r1, sp, r2
 8003ffe:	4620      	mov	r0, r4
 8004000:	f7ff fe67 	bl	8003cd2 <_read>
 8004004:	2803      	cmp	r0, #3
 8004006:	ddee      	ble.n	8003fe6 <_get_semihosting_exts+0x46>
 8004008:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800400c:	2b53      	cmp	r3, #83	; 0x53
 800400e:	d1ea      	bne.n	8003fe6 <_get_semihosting_exts+0x46>
 8004010:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004014:	2b48      	cmp	r3, #72	; 0x48
 8004016:	d1e6      	bne.n	8003fe6 <_get_semihosting_exts+0x46>
 8004018:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800401c:	2b46      	cmp	r3, #70	; 0x46
 800401e:	d1e2      	bne.n	8003fe6 <_get_semihosting_exts+0x46>
 8004020:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004024:	2b42      	cmp	r3, #66	; 0x42
 8004026:	d1de      	bne.n	8003fe6 <_get_semihosting_exts+0x46>
 8004028:	2201      	movs	r2, #1
 800402a:	4639      	mov	r1, r7
 800402c:	4620      	mov	r0, r4
 800402e:	f7ff fe6c 	bl	8003d0a <_swilseek>
 8004032:	2800      	cmp	r0, #0
 8004034:	dbd7      	blt.n	8003fe6 <_get_semihosting_exts+0x46>
 8004036:	462a      	mov	r2, r5
 8004038:	4631      	mov	r1, r6
 800403a:	4620      	mov	r0, r4
 800403c:	f7ff fe49 	bl	8003cd2 <_read>
 8004040:	4605      	mov	r5, r0
 8004042:	4620      	mov	r0, r4
 8004044:	f7ff fee0 	bl	8003e08 <_close>
 8004048:	4628      	mov	r0, r5
 800404a:	f7ff fe2d 	bl	8003ca8 <checkerror>
 800404e:	4604      	mov	r4, r0
 8004050:	e7ce      	b.n	8003ff0 <_get_semihosting_exts+0x50>
 8004052:	bf00      	nop
 8004054:	080053b8 	.word	0x080053b8

08004058 <initialise_semihosting_exts>:
 8004058:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800405a:	4d0a      	ldr	r5, [pc, #40]	; (8004084 <initialise_semihosting_exts+0x2c>)
 800405c:	4c0a      	ldr	r4, [pc, #40]	; (8004088 <initialise_semihosting_exts+0x30>)
 800405e:	2100      	movs	r1, #0
 8004060:	2201      	movs	r2, #1
 8004062:	a801      	add	r0, sp, #4
 8004064:	6029      	str	r1, [r5, #0]
 8004066:	6022      	str	r2, [r4, #0]
 8004068:	f7ff ff9a 	bl	8003fa0 <_get_semihosting_exts>
 800406c:	2800      	cmp	r0, #0
 800406e:	dd07      	ble.n	8004080 <initialise_semihosting_exts+0x28>
 8004070:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004074:	f003 0201 	and.w	r2, r3, #1
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	602a      	str	r2, [r5, #0]
 800407e:	6023      	str	r3, [r4, #0]
 8004080:	b003      	add	sp, #12
 8004082:	bd30      	pop	{r4, r5, pc}
 8004084:	200001d0 	.word	0x200001d0
 8004088:	200001d4 	.word	0x200001d4

0800408c <_has_ext_stdout_stderr>:
 800408c:	b510      	push	{r4, lr}
 800408e:	4c04      	ldr	r4, [pc, #16]	; (80040a0 <_has_ext_stdout_stderr+0x14>)
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	da01      	bge.n	800409a <_has_ext_stdout_stderr+0xe>
 8004096:	f7ff ffdf 	bl	8004058 <initialise_semihosting_exts>
 800409a:	6820      	ldr	r0, [r4, #0]
 800409c:	bd10      	pop	{r4, pc}
 800409e:	bf00      	nop
 80040a0:	200001d4 	.word	0x200001d4

080040a4 <initialise_monitor_handles>:
 80040a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040a8:	b085      	sub	sp, #20
 80040aa:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800415c <initialise_monitor_handles+0xb8>
 80040ae:	f8cd 9004 	str.w	r9, [sp, #4]
 80040b2:	2303      	movs	r3, #3
 80040b4:	2400      	movs	r4, #0
 80040b6:	9303      	str	r3, [sp, #12]
 80040b8:	af01      	add	r7, sp, #4
 80040ba:	9402      	str	r4, [sp, #8]
 80040bc:	2501      	movs	r5, #1
 80040be:	4628      	mov	r0, r5
 80040c0:	4639      	mov	r1, r7
 80040c2:	beab      	bkpt	0x00ab
 80040c4:	4605      	mov	r5, r0
 80040c6:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8004160 <initialise_monitor_handles+0xbc>
 80040ca:	4623      	mov	r3, r4
 80040cc:	4c20      	ldr	r4, [pc, #128]	; (8004150 <initialise_monitor_handles+0xac>)
 80040ce:	f8c8 5000 	str.w	r5, [r8]
 80040d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040d6:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80040da:	3301      	adds	r3, #1
 80040dc:	2b14      	cmp	r3, #20
 80040de:	d1fa      	bne.n	80040d6 <initialise_monitor_handles+0x32>
 80040e0:	f7ff ffd4 	bl	800408c <_has_ext_stdout_stderr>
 80040e4:	4d1b      	ldr	r5, [pc, #108]	; (8004154 <initialise_monitor_handles+0xb0>)
 80040e6:	b1d0      	cbz	r0, 800411e <initialise_monitor_handles+0x7a>
 80040e8:	f04f 0a03 	mov.w	sl, #3
 80040ec:	2304      	movs	r3, #4
 80040ee:	f8cd 9004 	str.w	r9, [sp, #4]
 80040f2:	2601      	movs	r6, #1
 80040f4:	f8cd a00c 	str.w	sl, [sp, #12]
 80040f8:	9302      	str	r3, [sp, #8]
 80040fa:	4630      	mov	r0, r6
 80040fc:	4639      	mov	r1, r7
 80040fe:	beab      	bkpt	0x00ab
 8004100:	4683      	mov	fp, r0
 8004102:	4b15      	ldr	r3, [pc, #84]	; (8004158 <initialise_monitor_handles+0xb4>)
 8004104:	f8cd 9004 	str.w	r9, [sp, #4]
 8004108:	f8c3 b000 	str.w	fp, [r3]
 800410c:	2308      	movs	r3, #8
 800410e:	f8cd a00c 	str.w	sl, [sp, #12]
 8004112:	9302      	str	r3, [sp, #8]
 8004114:	4630      	mov	r0, r6
 8004116:	4639      	mov	r1, r7
 8004118:	beab      	bkpt	0x00ab
 800411a:	4606      	mov	r6, r0
 800411c:	602e      	str	r6, [r5, #0]
 800411e:	682b      	ldr	r3, [r5, #0]
 8004120:	3301      	adds	r3, #1
 8004122:	bf02      	ittt	eq
 8004124:	4b0c      	ldreq	r3, [pc, #48]	; (8004158 <initialise_monitor_handles+0xb4>)
 8004126:	681b      	ldreq	r3, [r3, #0]
 8004128:	602b      	streq	r3, [r5, #0]
 800412a:	2600      	movs	r6, #0
 800412c:	f8d8 3000 	ldr.w	r3, [r8]
 8004130:	6023      	str	r3, [r4, #0]
 8004132:	6066      	str	r6, [r4, #4]
 8004134:	f7ff ffaa 	bl	800408c <_has_ext_stdout_stderr>
 8004138:	b130      	cbz	r0, 8004148 <initialise_monitor_handles+0xa4>
 800413a:	4b07      	ldr	r3, [pc, #28]	; (8004158 <initialise_monitor_handles+0xb4>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8004142:	682b      	ldr	r3, [r5, #0]
 8004144:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8004148:	b005      	add	sp, #20
 800414a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800414e:	bf00      	nop
 8004150:	200003a8 	.word	0x200003a8
 8004154:	2000039c 	.word	0x2000039c
 8004158:	200003a4 	.word	0x200003a4
 800415c:	080053ce 	.word	0x080053ce
 8004160:	200003a0 	.word	0x200003a0

08004164 <_isatty>:
 8004164:	b570      	push	{r4, r5, r6, lr}
 8004166:	f7ff fd77 	bl	8003c58 <findslot>
 800416a:	2509      	movs	r5, #9
 800416c:	4604      	mov	r4, r0
 800416e:	b920      	cbnz	r0, 800417a <_isatty+0x16>
 8004170:	f000 f814 	bl	800419c <__errno>
 8004174:	6005      	str	r5, [r0, #0]
 8004176:	4620      	mov	r0, r4
 8004178:	bd70      	pop	{r4, r5, r6, pc}
 800417a:	4628      	mov	r0, r5
 800417c:	4621      	mov	r1, r4
 800417e:	beab      	bkpt	0x00ab
 8004180:	4604      	mov	r4, r0
 8004182:	2c01      	cmp	r4, #1
 8004184:	d0f7      	beq.n	8004176 <_isatty+0x12>
 8004186:	f000 f809 	bl	800419c <__errno>
 800418a:	2400      	movs	r4, #0
 800418c:	4605      	mov	r5, r0
 800418e:	2613      	movs	r6, #19
 8004190:	4630      	mov	r0, r6
 8004192:	4621      	mov	r1, r4
 8004194:	beab      	bkpt	0x00ab
 8004196:	4606      	mov	r6, r0
 8004198:	602e      	str	r6, [r5, #0]
 800419a:	e7ec      	b.n	8004176 <_isatty+0x12>

0800419c <__errno>:
 800419c:	4b01      	ldr	r3, [pc, #4]	; (80041a4 <__errno+0x8>)
 800419e:	6818      	ldr	r0, [r3, #0]
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	200001d8 	.word	0x200001d8

080041a8 <std>:
 80041a8:	2300      	movs	r3, #0
 80041aa:	b510      	push	{r4, lr}
 80041ac:	4604      	mov	r4, r0
 80041ae:	e9c0 3300 	strd	r3, r3, [r0]
 80041b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041b6:	6083      	str	r3, [r0, #8]
 80041b8:	8181      	strh	r1, [r0, #12]
 80041ba:	6643      	str	r3, [r0, #100]	; 0x64
 80041bc:	81c2      	strh	r2, [r0, #14]
 80041be:	6183      	str	r3, [r0, #24]
 80041c0:	4619      	mov	r1, r3
 80041c2:	2208      	movs	r2, #8
 80041c4:	305c      	adds	r0, #92	; 0x5c
 80041c6:	f000 f90c 	bl	80043e2 <memset>
 80041ca:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <std+0x38>)
 80041cc:	6263      	str	r3, [r4, #36]	; 0x24
 80041ce:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <std+0x3c>)
 80041d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80041d2:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <std+0x40>)
 80041d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80041d6:	4b05      	ldr	r3, [pc, #20]	; (80041ec <std+0x44>)
 80041d8:	6224      	str	r4, [r4, #32]
 80041da:	6323      	str	r3, [r4, #48]	; 0x30
 80041dc:	bd10      	pop	{r4, pc}
 80041de:	bf00      	nop
 80041e0:	08004669 	.word	0x08004669
 80041e4:	0800468b 	.word	0x0800468b
 80041e8:	080046c3 	.word	0x080046c3
 80041ec:	080046e7 	.word	0x080046e7

080041f0 <_cleanup_r>:
 80041f0:	4901      	ldr	r1, [pc, #4]	; (80041f8 <_cleanup_r+0x8>)
 80041f2:	f000 b8af 	b.w	8004354 <_fwalk_reent>
 80041f6:	bf00      	nop
 80041f8:	080049c1 	.word	0x080049c1

080041fc <__sfmoreglue>:
 80041fc:	b570      	push	{r4, r5, r6, lr}
 80041fe:	2268      	movs	r2, #104	; 0x68
 8004200:	1e4d      	subs	r5, r1, #1
 8004202:	4355      	muls	r5, r2
 8004204:	460e      	mov	r6, r1
 8004206:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800420a:	f000 f913 	bl	8004434 <_malloc_r>
 800420e:	4604      	mov	r4, r0
 8004210:	b140      	cbz	r0, 8004224 <__sfmoreglue+0x28>
 8004212:	2100      	movs	r1, #0
 8004214:	e9c0 1600 	strd	r1, r6, [r0]
 8004218:	300c      	adds	r0, #12
 800421a:	60a0      	str	r0, [r4, #8]
 800421c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004220:	f000 f8df 	bl	80043e2 <memset>
 8004224:	4620      	mov	r0, r4
 8004226:	bd70      	pop	{r4, r5, r6, pc}

08004228 <__sfp_lock_acquire>:
 8004228:	4801      	ldr	r0, [pc, #4]	; (8004230 <__sfp_lock_acquire+0x8>)
 800422a:	f000 b8d8 	b.w	80043de <__retarget_lock_acquire_recursive>
 800422e:	bf00      	nop
 8004230:	20000449 	.word	0x20000449

08004234 <__sfp_lock_release>:
 8004234:	4801      	ldr	r0, [pc, #4]	; (800423c <__sfp_lock_release+0x8>)
 8004236:	f000 b8d3 	b.w	80043e0 <__retarget_lock_release_recursive>
 800423a:	bf00      	nop
 800423c:	20000449 	.word	0x20000449

08004240 <__sinit_lock_acquire>:
 8004240:	4801      	ldr	r0, [pc, #4]	; (8004248 <__sinit_lock_acquire+0x8>)
 8004242:	f000 b8cc 	b.w	80043de <__retarget_lock_acquire_recursive>
 8004246:	bf00      	nop
 8004248:	2000044a 	.word	0x2000044a

0800424c <__sinit_lock_release>:
 800424c:	4801      	ldr	r0, [pc, #4]	; (8004254 <__sinit_lock_release+0x8>)
 800424e:	f000 b8c7 	b.w	80043e0 <__retarget_lock_release_recursive>
 8004252:	bf00      	nop
 8004254:	2000044a 	.word	0x2000044a

08004258 <__sinit>:
 8004258:	b510      	push	{r4, lr}
 800425a:	4604      	mov	r4, r0
 800425c:	f7ff fff0 	bl	8004240 <__sinit_lock_acquire>
 8004260:	69a3      	ldr	r3, [r4, #24]
 8004262:	b11b      	cbz	r3, 800426c <__sinit+0x14>
 8004264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004268:	f7ff bff0 	b.w	800424c <__sinit_lock_release>
 800426c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004270:	6523      	str	r3, [r4, #80]	; 0x50
 8004272:	4b13      	ldr	r3, [pc, #76]	; (80042c0 <__sinit+0x68>)
 8004274:	4a13      	ldr	r2, [pc, #76]	; (80042c4 <__sinit+0x6c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	62a2      	str	r2, [r4, #40]	; 0x28
 800427a:	42a3      	cmp	r3, r4
 800427c:	bf04      	itt	eq
 800427e:	2301      	moveq	r3, #1
 8004280:	61a3      	streq	r3, [r4, #24]
 8004282:	4620      	mov	r0, r4
 8004284:	f000 f820 	bl	80042c8 <__sfp>
 8004288:	6060      	str	r0, [r4, #4]
 800428a:	4620      	mov	r0, r4
 800428c:	f000 f81c 	bl	80042c8 <__sfp>
 8004290:	60a0      	str	r0, [r4, #8]
 8004292:	4620      	mov	r0, r4
 8004294:	f000 f818 	bl	80042c8 <__sfp>
 8004298:	2200      	movs	r2, #0
 800429a:	60e0      	str	r0, [r4, #12]
 800429c:	2104      	movs	r1, #4
 800429e:	6860      	ldr	r0, [r4, #4]
 80042a0:	f7ff ff82 	bl	80041a8 <std>
 80042a4:	68a0      	ldr	r0, [r4, #8]
 80042a6:	2201      	movs	r2, #1
 80042a8:	2109      	movs	r1, #9
 80042aa:	f7ff ff7d 	bl	80041a8 <std>
 80042ae:	68e0      	ldr	r0, [r4, #12]
 80042b0:	2202      	movs	r2, #2
 80042b2:	2112      	movs	r1, #18
 80042b4:	f7ff ff78 	bl	80041a8 <std>
 80042b8:	2301      	movs	r3, #1
 80042ba:	61a3      	str	r3, [r4, #24]
 80042bc:	e7d2      	b.n	8004264 <__sinit+0xc>
 80042be:	bf00      	nop
 80042c0:	08005434 	.word	0x08005434
 80042c4:	080041f1 	.word	0x080041f1

080042c8 <__sfp>:
 80042c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ca:	4607      	mov	r7, r0
 80042cc:	f7ff ffac 	bl	8004228 <__sfp_lock_acquire>
 80042d0:	4b1e      	ldr	r3, [pc, #120]	; (800434c <__sfp+0x84>)
 80042d2:	681e      	ldr	r6, [r3, #0]
 80042d4:	69b3      	ldr	r3, [r6, #24]
 80042d6:	b913      	cbnz	r3, 80042de <__sfp+0x16>
 80042d8:	4630      	mov	r0, r6
 80042da:	f7ff ffbd 	bl	8004258 <__sinit>
 80042de:	3648      	adds	r6, #72	; 0x48
 80042e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	d503      	bpl.n	80042f0 <__sfp+0x28>
 80042e8:	6833      	ldr	r3, [r6, #0]
 80042ea:	b30b      	cbz	r3, 8004330 <__sfp+0x68>
 80042ec:	6836      	ldr	r6, [r6, #0]
 80042ee:	e7f7      	b.n	80042e0 <__sfp+0x18>
 80042f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80042f4:	b9d5      	cbnz	r5, 800432c <__sfp+0x64>
 80042f6:	4b16      	ldr	r3, [pc, #88]	; (8004350 <__sfp+0x88>)
 80042f8:	60e3      	str	r3, [r4, #12]
 80042fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80042fe:	6665      	str	r5, [r4, #100]	; 0x64
 8004300:	f000 f86c 	bl	80043dc <__retarget_lock_init_recursive>
 8004304:	f7ff ff96 	bl	8004234 <__sfp_lock_release>
 8004308:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800430c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004310:	6025      	str	r5, [r4, #0]
 8004312:	61a5      	str	r5, [r4, #24]
 8004314:	2208      	movs	r2, #8
 8004316:	4629      	mov	r1, r5
 8004318:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800431c:	f000 f861 	bl	80043e2 <memset>
 8004320:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004324:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004328:	4620      	mov	r0, r4
 800432a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800432c:	3468      	adds	r4, #104	; 0x68
 800432e:	e7d9      	b.n	80042e4 <__sfp+0x1c>
 8004330:	2104      	movs	r1, #4
 8004332:	4638      	mov	r0, r7
 8004334:	f7ff ff62 	bl	80041fc <__sfmoreglue>
 8004338:	4604      	mov	r4, r0
 800433a:	6030      	str	r0, [r6, #0]
 800433c:	2800      	cmp	r0, #0
 800433e:	d1d5      	bne.n	80042ec <__sfp+0x24>
 8004340:	f7ff ff78 	bl	8004234 <__sfp_lock_release>
 8004344:	230c      	movs	r3, #12
 8004346:	603b      	str	r3, [r7, #0]
 8004348:	e7ee      	b.n	8004328 <__sfp+0x60>
 800434a:	bf00      	nop
 800434c:	08005434 	.word	0x08005434
 8004350:	ffff0001 	.word	0xffff0001

08004354 <_fwalk_reent>:
 8004354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004358:	4606      	mov	r6, r0
 800435a:	4688      	mov	r8, r1
 800435c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004360:	2700      	movs	r7, #0
 8004362:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004366:	f1b9 0901 	subs.w	r9, r9, #1
 800436a:	d505      	bpl.n	8004378 <_fwalk_reent+0x24>
 800436c:	6824      	ldr	r4, [r4, #0]
 800436e:	2c00      	cmp	r4, #0
 8004370:	d1f7      	bne.n	8004362 <_fwalk_reent+0xe>
 8004372:	4638      	mov	r0, r7
 8004374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004378:	89ab      	ldrh	r3, [r5, #12]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d907      	bls.n	800438e <_fwalk_reent+0x3a>
 800437e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004382:	3301      	adds	r3, #1
 8004384:	d003      	beq.n	800438e <_fwalk_reent+0x3a>
 8004386:	4629      	mov	r1, r5
 8004388:	4630      	mov	r0, r6
 800438a:	47c0      	blx	r8
 800438c:	4307      	orrs	r7, r0
 800438e:	3568      	adds	r5, #104	; 0x68
 8004390:	e7e9      	b.n	8004366 <_fwalk_reent+0x12>
	...

08004394 <__libc_init_array>:
 8004394:	b570      	push	{r4, r5, r6, lr}
 8004396:	4d0d      	ldr	r5, [pc, #52]	; (80043cc <__libc_init_array+0x38>)
 8004398:	4c0d      	ldr	r4, [pc, #52]	; (80043d0 <__libc_init_array+0x3c>)
 800439a:	1b64      	subs	r4, r4, r5
 800439c:	10a4      	asrs	r4, r4, #2
 800439e:	2600      	movs	r6, #0
 80043a0:	42a6      	cmp	r6, r4
 80043a2:	d109      	bne.n	80043b8 <__libc_init_array+0x24>
 80043a4:	4d0b      	ldr	r5, [pc, #44]	; (80043d4 <__libc_init_array+0x40>)
 80043a6:	4c0c      	ldr	r4, [pc, #48]	; (80043d8 <__libc_init_array+0x44>)
 80043a8:	f000 ff9a 	bl	80052e0 <_init>
 80043ac:	1b64      	subs	r4, r4, r5
 80043ae:	10a4      	asrs	r4, r4, #2
 80043b0:	2600      	movs	r6, #0
 80043b2:	42a6      	cmp	r6, r4
 80043b4:	d105      	bne.n	80043c2 <__libc_init_array+0x2e>
 80043b6:	bd70      	pop	{r4, r5, r6, pc}
 80043b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043bc:	4798      	blx	r3
 80043be:	3601      	adds	r6, #1
 80043c0:	e7ee      	b.n	80043a0 <__libc_init_array+0xc>
 80043c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c6:	4798      	blx	r3
 80043c8:	3601      	adds	r6, #1
 80043ca:	e7f2      	b.n	80043b2 <__libc_init_array+0x1e>
 80043cc:	08005474 	.word	0x08005474
 80043d0:	08005474 	.word	0x08005474
 80043d4:	08005474 	.word	0x08005474
 80043d8:	08005478 	.word	0x08005478

080043dc <__retarget_lock_init_recursive>:
 80043dc:	4770      	bx	lr

080043de <__retarget_lock_acquire_recursive>:
 80043de:	4770      	bx	lr

080043e0 <__retarget_lock_release_recursive>:
 80043e0:	4770      	bx	lr

080043e2 <memset>:
 80043e2:	4402      	add	r2, r0
 80043e4:	4603      	mov	r3, r0
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d100      	bne.n	80043ec <memset+0xa>
 80043ea:	4770      	bx	lr
 80043ec:	f803 1b01 	strb.w	r1, [r3], #1
 80043f0:	e7f9      	b.n	80043e6 <memset+0x4>
	...

080043f4 <sbrk_aligned>:
 80043f4:	b570      	push	{r4, r5, r6, lr}
 80043f6:	4e0e      	ldr	r6, [pc, #56]	; (8004430 <sbrk_aligned+0x3c>)
 80043f8:	460c      	mov	r4, r1
 80043fa:	6831      	ldr	r1, [r6, #0]
 80043fc:	4605      	mov	r5, r0
 80043fe:	b911      	cbnz	r1, 8004406 <sbrk_aligned+0x12>
 8004400:	f000 f902 	bl	8004608 <_sbrk_r>
 8004404:	6030      	str	r0, [r6, #0]
 8004406:	4621      	mov	r1, r4
 8004408:	4628      	mov	r0, r5
 800440a:	f000 f8fd 	bl	8004608 <_sbrk_r>
 800440e:	1c43      	adds	r3, r0, #1
 8004410:	d00a      	beq.n	8004428 <sbrk_aligned+0x34>
 8004412:	1cc4      	adds	r4, r0, #3
 8004414:	f024 0403 	bic.w	r4, r4, #3
 8004418:	42a0      	cmp	r0, r4
 800441a:	d007      	beq.n	800442c <sbrk_aligned+0x38>
 800441c:	1a21      	subs	r1, r4, r0
 800441e:	4628      	mov	r0, r5
 8004420:	f000 f8f2 	bl	8004608 <_sbrk_r>
 8004424:	3001      	adds	r0, #1
 8004426:	d101      	bne.n	800442c <sbrk_aligned+0x38>
 8004428:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800442c:	4620      	mov	r0, r4
 800442e:	bd70      	pop	{r4, r5, r6, pc}
 8004430:	20000450 	.word	0x20000450

08004434 <_malloc_r>:
 8004434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004438:	1ccd      	adds	r5, r1, #3
 800443a:	f025 0503 	bic.w	r5, r5, #3
 800443e:	3508      	adds	r5, #8
 8004440:	2d0c      	cmp	r5, #12
 8004442:	bf38      	it	cc
 8004444:	250c      	movcc	r5, #12
 8004446:	2d00      	cmp	r5, #0
 8004448:	4607      	mov	r7, r0
 800444a:	db01      	blt.n	8004450 <_malloc_r+0x1c>
 800444c:	42a9      	cmp	r1, r5
 800444e:	d905      	bls.n	800445c <_malloc_r+0x28>
 8004450:	230c      	movs	r3, #12
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	2600      	movs	r6, #0
 8004456:	4630      	mov	r0, r6
 8004458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800445c:	4e2e      	ldr	r6, [pc, #184]	; (8004518 <_malloc_r+0xe4>)
 800445e:	f000 fb63 	bl	8004b28 <__malloc_lock>
 8004462:	6833      	ldr	r3, [r6, #0]
 8004464:	461c      	mov	r4, r3
 8004466:	bb34      	cbnz	r4, 80044b6 <_malloc_r+0x82>
 8004468:	4629      	mov	r1, r5
 800446a:	4638      	mov	r0, r7
 800446c:	f7ff ffc2 	bl	80043f4 <sbrk_aligned>
 8004470:	1c43      	adds	r3, r0, #1
 8004472:	4604      	mov	r4, r0
 8004474:	d14d      	bne.n	8004512 <_malloc_r+0xde>
 8004476:	6834      	ldr	r4, [r6, #0]
 8004478:	4626      	mov	r6, r4
 800447a:	2e00      	cmp	r6, #0
 800447c:	d140      	bne.n	8004500 <_malloc_r+0xcc>
 800447e:	6823      	ldr	r3, [r4, #0]
 8004480:	4631      	mov	r1, r6
 8004482:	4638      	mov	r0, r7
 8004484:	eb04 0803 	add.w	r8, r4, r3
 8004488:	f000 f8be 	bl	8004608 <_sbrk_r>
 800448c:	4580      	cmp	r8, r0
 800448e:	d13a      	bne.n	8004506 <_malloc_r+0xd2>
 8004490:	6821      	ldr	r1, [r4, #0]
 8004492:	3503      	adds	r5, #3
 8004494:	1a6d      	subs	r5, r5, r1
 8004496:	f025 0503 	bic.w	r5, r5, #3
 800449a:	3508      	adds	r5, #8
 800449c:	2d0c      	cmp	r5, #12
 800449e:	bf38      	it	cc
 80044a0:	250c      	movcc	r5, #12
 80044a2:	4629      	mov	r1, r5
 80044a4:	4638      	mov	r0, r7
 80044a6:	f7ff ffa5 	bl	80043f4 <sbrk_aligned>
 80044aa:	3001      	adds	r0, #1
 80044ac:	d02b      	beq.n	8004506 <_malloc_r+0xd2>
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	442b      	add	r3, r5
 80044b2:	6023      	str	r3, [r4, #0]
 80044b4:	e00e      	b.n	80044d4 <_malloc_r+0xa0>
 80044b6:	6822      	ldr	r2, [r4, #0]
 80044b8:	1b52      	subs	r2, r2, r5
 80044ba:	d41e      	bmi.n	80044fa <_malloc_r+0xc6>
 80044bc:	2a0b      	cmp	r2, #11
 80044be:	d916      	bls.n	80044ee <_malloc_r+0xba>
 80044c0:	1961      	adds	r1, r4, r5
 80044c2:	42a3      	cmp	r3, r4
 80044c4:	6025      	str	r5, [r4, #0]
 80044c6:	bf18      	it	ne
 80044c8:	6059      	strne	r1, [r3, #4]
 80044ca:	6863      	ldr	r3, [r4, #4]
 80044cc:	bf08      	it	eq
 80044ce:	6031      	streq	r1, [r6, #0]
 80044d0:	5162      	str	r2, [r4, r5]
 80044d2:	604b      	str	r3, [r1, #4]
 80044d4:	4638      	mov	r0, r7
 80044d6:	f104 060b 	add.w	r6, r4, #11
 80044da:	f000 fb2b 	bl	8004b34 <__malloc_unlock>
 80044de:	f026 0607 	bic.w	r6, r6, #7
 80044e2:	1d23      	adds	r3, r4, #4
 80044e4:	1af2      	subs	r2, r6, r3
 80044e6:	d0b6      	beq.n	8004456 <_malloc_r+0x22>
 80044e8:	1b9b      	subs	r3, r3, r6
 80044ea:	50a3      	str	r3, [r4, r2]
 80044ec:	e7b3      	b.n	8004456 <_malloc_r+0x22>
 80044ee:	6862      	ldr	r2, [r4, #4]
 80044f0:	42a3      	cmp	r3, r4
 80044f2:	bf0c      	ite	eq
 80044f4:	6032      	streq	r2, [r6, #0]
 80044f6:	605a      	strne	r2, [r3, #4]
 80044f8:	e7ec      	b.n	80044d4 <_malloc_r+0xa0>
 80044fa:	4623      	mov	r3, r4
 80044fc:	6864      	ldr	r4, [r4, #4]
 80044fe:	e7b2      	b.n	8004466 <_malloc_r+0x32>
 8004500:	4634      	mov	r4, r6
 8004502:	6876      	ldr	r6, [r6, #4]
 8004504:	e7b9      	b.n	800447a <_malloc_r+0x46>
 8004506:	230c      	movs	r3, #12
 8004508:	603b      	str	r3, [r7, #0]
 800450a:	4638      	mov	r0, r7
 800450c:	f000 fb12 	bl	8004b34 <__malloc_unlock>
 8004510:	e7a1      	b.n	8004456 <_malloc_r+0x22>
 8004512:	6025      	str	r5, [r4, #0]
 8004514:	e7de      	b.n	80044d4 <_malloc_r+0xa0>
 8004516:	bf00      	nop
 8004518:	2000044c 	.word	0x2000044c

0800451c <_puts_r>:
 800451c:	b570      	push	{r4, r5, r6, lr}
 800451e:	460e      	mov	r6, r1
 8004520:	4605      	mov	r5, r0
 8004522:	b118      	cbz	r0, 800452c <_puts_r+0x10>
 8004524:	6983      	ldr	r3, [r0, #24]
 8004526:	b90b      	cbnz	r3, 800452c <_puts_r+0x10>
 8004528:	f7ff fe96 	bl	8004258 <__sinit>
 800452c:	69ab      	ldr	r3, [r5, #24]
 800452e:	68ac      	ldr	r4, [r5, #8]
 8004530:	b913      	cbnz	r3, 8004538 <_puts_r+0x1c>
 8004532:	4628      	mov	r0, r5
 8004534:	f7ff fe90 	bl	8004258 <__sinit>
 8004538:	4b2c      	ldr	r3, [pc, #176]	; (80045ec <_puts_r+0xd0>)
 800453a:	429c      	cmp	r4, r3
 800453c:	d120      	bne.n	8004580 <_puts_r+0x64>
 800453e:	686c      	ldr	r4, [r5, #4]
 8004540:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004542:	07db      	lsls	r3, r3, #31
 8004544:	d405      	bmi.n	8004552 <_puts_r+0x36>
 8004546:	89a3      	ldrh	r3, [r4, #12]
 8004548:	0598      	lsls	r0, r3, #22
 800454a:	d402      	bmi.n	8004552 <_puts_r+0x36>
 800454c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800454e:	f7ff ff46 	bl	80043de <__retarget_lock_acquire_recursive>
 8004552:	89a3      	ldrh	r3, [r4, #12]
 8004554:	0719      	lsls	r1, r3, #28
 8004556:	d51d      	bpl.n	8004594 <_puts_r+0x78>
 8004558:	6923      	ldr	r3, [r4, #16]
 800455a:	b1db      	cbz	r3, 8004594 <_puts_r+0x78>
 800455c:	3e01      	subs	r6, #1
 800455e:	68a3      	ldr	r3, [r4, #8]
 8004560:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004564:	3b01      	subs	r3, #1
 8004566:	60a3      	str	r3, [r4, #8]
 8004568:	bb39      	cbnz	r1, 80045ba <_puts_r+0x9e>
 800456a:	2b00      	cmp	r3, #0
 800456c:	da38      	bge.n	80045e0 <_puts_r+0xc4>
 800456e:	4622      	mov	r2, r4
 8004570:	210a      	movs	r1, #10
 8004572:	4628      	mov	r0, r5
 8004574:	f000 f8bc 	bl	80046f0 <__swbuf_r>
 8004578:	3001      	adds	r0, #1
 800457a:	d011      	beq.n	80045a0 <_puts_r+0x84>
 800457c:	250a      	movs	r5, #10
 800457e:	e011      	b.n	80045a4 <_puts_r+0x88>
 8004580:	4b1b      	ldr	r3, [pc, #108]	; (80045f0 <_puts_r+0xd4>)
 8004582:	429c      	cmp	r4, r3
 8004584:	d101      	bne.n	800458a <_puts_r+0x6e>
 8004586:	68ac      	ldr	r4, [r5, #8]
 8004588:	e7da      	b.n	8004540 <_puts_r+0x24>
 800458a:	4b1a      	ldr	r3, [pc, #104]	; (80045f4 <_puts_r+0xd8>)
 800458c:	429c      	cmp	r4, r3
 800458e:	bf08      	it	eq
 8004590:	68ec      	ldreq	r4, [r5, #12]
 8004592:	e7d5      	b.n	8004540 <_puts_r+0x24>
 8004594:	4621      	mov	r1, r4
 8004596:	4628      	mov	r0, r5
 8004598:	f000 f90e 	bl	80047b8 <__swsetup_r>
 800459c:	2800      	cmp	r0, #0
 800459e:	d0dd      	beq.n	800455c <_puts_r+0x40>
 80045a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80045a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045a6:	07da      	lsls	r2, r3, #31
 80045a8:	d405      	bmi.n	80045b6 <_puts_r+0x9a>
 80045aa:	89a3      	ldrh	r3, [r4, #12]
 80045ac:	059b      	lsls	r3, r3, #22
 80045ae:	d402      	bmi.n	80045b6 <_puts_r+0x9a>
 80045b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045b2:	f7ff ff15 	bl	80043e0 <__retarget_lock_release_recursive>
 80045b6:	4628      	mov	r0, r5
 80045b8:	bd70      	pop	{r4, r5, r6, pc}
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	da04      	bge.n	80045c8 <_puts_r+0xac>
 80045be:	69a2      	ldr	r2, [r4, #24]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	dc06      	bgt.n	80045d2 <_puts_r+0xb6>
 80045c4:	290a      	cmp	r1, #10
 80045c6:	d004      	beq.n	80045d2 <_puts_r+0xb6>
 80045c8:	6823      	ldr	r3, [r4, #0]
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	6022      	str	r2, [r4, #0]
 80045ce:	7019      	strb	r1, [r3, #0]
 80045d0:	e7c5      	b.n	800455e <_puts_r+0x42>
 80045d2:	4622      	mov	r2, r4
 80045d4:	4628      	mov	r0, r5
 80045d6:	f000 f88b 	bl	80046f0 <__swbuf_r>
 80045da:	3001      	adds	r0, #1
 80045dc:	d1bf      	bne.n	800455e <_puts_r+0x42>
 80045de:	e7df      	b.n	80045a0 <_puts_r+0x84>
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	250a      	movs	r5, #10
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	6022      	str	r2, [r4, #0]
 80045e8:	701d      	strb	r5, [r3, #0]
 80045ea:	e7db      	b.n	80045a4 <_puts_r+0x88>
 80045ec:	080053f4 	.word	0x080053f4
 80045f0:	08005414 	.word	0x08005414
 80045f4:	080053d4 	.word	0x080053d4

080045f8 <puts>:
 80045f8:	4b02      	ldr	r3, [pc, #8]	; (8004604 <puts+0xc>)
 80045fa:	4601      	mov	r1, r0
 80045fc:	6818      	ldr	r0, [r3, #0]
 80045fe:	f7ff bf8d 	b.w	800451c <_puts_r>
 8004602:	bf00      	nop
 8004604:	200001d8 	.word	0x200001d8

08004608 <_sbrk_r>:
 8004608:	b538      	push	{r3, r4, r5, lr}
 800460a:	4d06      	ldr	r5, [pc, #24]	; (8004624 <_sbrk_r+0x1c>)
 800460c:	2300      	movs	r3, #0
 800460e:	4604      	mov	r4, r0
 8004610:	4608      	mov	r0, r1
 8004612:	602b      	str	r3, [r5, #0]
 8004614:	f7fc fcf0 	bl	8000ff8 <_sbrk>
 8004618:	1c43      	adds	r3, r0, #1
 800461a:	d102      	bne.n	8004622 <_sbrk_r+0x1a>
 800461c:	682b      	ldr	r3, [r5, #0]
 800461e:	b103      	cbz	r3, 8004622 <_sbrk_r+0x1a>
 8004620:	6023      	str	r3, [r4, #0]
 8004622:	bd38      	pop	{r3, r4, r5, pc}
 8004624:	20000454 	.word	0x20000454

08004628 <siprintf>:
 8004628:	b40e      	push	{r1, r2, r3}
 800462a:	b500      	push	{lr}
 800462c:	b09c      	sub	sp, #112	; 0x70
 800462e:	ab1d      	add	r3, sp, #116	; 0x74
 8004630:	9002      	str	r0, [sp, #8]
 8004632:	9006      	str	r0, [sp, #24]
 8004634:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004638:	4809      	ldr	r0, [pc, #36]	; (8004660 <siprintf+0x38>)
 800463a:	9107      	str	r1, [sp, #28]
 800463c:	9104      	str	r1, [sp, #16]
 800463e:	4909      	ldr	r1, [pc, #36]	; (8004664 <siprintf+0x3c>)
 8004640:	f853 2b04 	ldr.w	r2, [r3], #4
 8004644:	9105      	str	r1, [sp, #20]
 8004646:	6800      	ldr	r0, [r0, #0]
 8004648:	9301      	str	r3, [sp, #4]
 800464a:	a902      	add	r1, sp, #8
 800464c:	f000 fb20 	bl	8004c90 <_svfiprintf_r>
 8004650:	9b02      	ldr	r3, [sp, #8]
 8004652:	2200      	movs	r2, #0
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	b01c      	add	sp, #112	; 0x70
 8004658:	f85d eb04 	ldr.w	lr, [sp], #4
 800465c:	b003      	add	sp, #12
 800465e:	4770      	bx	lr
 8004660:	200001d8 	.word	0x200001d8
 8004664:	ffff0208 	.word	0xffff0208

08004668 <__sread>:
 8004668:	b510      	push	{r4, lr}
 800466a:	460c      	mov	r4, r1
 800466c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004670:	f000 fda2 	bl	80051b8 <_read_r>
 8004674:	2800      	cmp	r0, #0
 8004676:	bfab      	itete	ge
 8004678:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800467a:	89a3      	ldrhlt	r3, [r4, #12]
 800467c:	181b      	addge	r3, r3, r0
 800467e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004682:	bfac      	ite	ge
 8004684:	6563      	strge	r3, [r4, #84]	; 0x54
 8004686:	81a3      	strhlt	r3, [r4, #12]
 8004688:	bd10      	pop	{r4, pc}

0800468a <__swrite>:
 800468a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800468e:	461f      	mov	r7, r3
 8004690:	898b      	ldrh	r3, [r1, #12]
 8004692:	05db      	lsls	r3, r3, #23
 8004694:	4605      	mov	r5, r0
 8004696:	460c      	mov	r4, r1
 8004698:	4616      	mov	r6, r2
 800469a:	d505      	bpl.n	80046a8 <__swrite+0x1e>
 800469c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046a0:	2302      	movs	r3, #2
 80046a2:	2200      	movs	r2, #0
 80046a4:	f000 f9c8 	bl	8004a38 <_lseek_r>
 80046a8:	89a3      	ldrh	r3, [r4, #12]
 80046aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046b2:	81a3      	strh	r3, [r4, #12]
 80046b4:	4632      	mov	r2, r6
 80046b6:	463b      	mov	r3, r7
 80046b8:	4628      	mov	r0, r5
 80046ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046be:	f000 b869 	b.w	8004794 <_write_r>

080046c2 <__sseek>:
 80046c2:	b510      	push	{r4, lr}
 80046c4:	460c      	mov	r4, r1
 80046c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ca:	f000 f9b5 	bl	8004a38 <_lseek_r>
 80046ce:	1c43      	adds	r3, r0, #1
 80046d0:	89a3      	ldrh	r3, [r4, #12]
 80046d2:	bf15      	itete	ne
 80046d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80046d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80046da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80046de:	81a3      	strheq	r3, [r4, #12]
 80046e0:	bf18      	it	ne
 80046e2:	81a3      	strhne	r3, [r4, #12]
 80046e4:	bd10      	pop	{r4, pc}

080046e6 <__sclose>:
 80046e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ea:	f000 b8d3 	b.w	8004894 <_close_r>
	...

080046f0 <__swbuf_r>:
 80046f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f2:	460e      	mov	r6, r1
 80046f4:	4614      	mov	r4, r2
 80046f6:	4605      	mov	r5, r0
 80046f8:	b118      	cbz	r0, 8004702 <__swbuf_r+0x12>
 80046fa:	6983      	ldr	r3, [r0, #24]
 80046fc:	b90b      	cbnz	r3, 8004702 <__swbuf_r+0x12>
 80046fe:	f7ff fdab 	bl	8004258 <__sinit>
 8004702:	4b21      	ldr	r3, [pc, #132]	; (8004788 <__swbuf_r+0x98>)
 8004704:	429c      	cmp	r4, r3
 8004706:	d12b      	bne.n	8004760 <__swbuf_r+0x70>
 8004708:	686c      	ldr	r4, [r5, #4]
 800470a:	69a3      	ldr	r3, [r4, #24]
 800470c:	60a3      	str	r3, [r4, #8]
 800470e:	89a3      	ldrh	r3, [r4, #12]
 8004710:	071a      	lsls	r2, r3, #28
 8004712:	d52f      	bpl.n	8004774 <__swbuf_r+0x84>
 8004714:	6923      	ldr	r3, [r4, #16]
 8004716:	b36b      	cbz	r3, 8004774 <__swbuf_r+0x84>
 8004718:	6923      	ldr	r3, [r4, #16]
 800471a:	6820      	ldr	r0, [r4, #0]
 800471c:	1ac0      	subs	r0, r0, r3
 800471e:	6963      	ldr	r3, [r4, #20]
 8004720:	b2f6      	uxtb	r6, r6
 8004722:	4283      	cmp	r3, r0
 8004724:	4637      	mov	r7, r6
 8004726:	dc04      	bgt.n	8004732 <__swbuf_r+0x42>
 8004728:	4621      	mov	r1, r4
 800472a:	4628      	mov	r0, r5
 800472c:	f000 f948 	bl	80049c0 <_fflush_r>
 8004730:	bb30      	cbnz	r0, 8004780 <__swbuf_r+0x90>
 8004732:	68a3      	ldr	r3, [r4, #8]
 8004734:	3b01      	subs	r3, #1
 8004736:	60a3      	str	r3, [r4, #8]
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	6022      	str	r2, [r4, #0]
 800473e:	701e      	strb	r6, [r3, #0]
 8004740:	6963      	ldr	r3, [r4, #20]
 8004742:	3001      	adds	r0, #1
 8004744:	4283      	cmp	r3, r0
 8004746:	d004      	beq.n	8004752 <__swbuf_r+0x62>
 8004748:	89a3      	ldrh	r3, [r4, #12]
 800474a:	07db      	lsls	r3, r3, #31
 800474c:	d506      	bpl.n	800475c <__swbuf_r+0x6c>
 800474e:	2e0a      	cmp	r6, #10
 8004750:	d104      	bne.n	800475c <__swbuf_r+0x6c>
 8004752:	4621      	mov	r1, r4
 8004754:	4628      	mov	r0, r5
 8004756:	f000 f933 	bl	80049c0 <_fflush_r>
 800475a:	b988      	cbnz	r0, 8004780 <__swbuf_r+0x90>
 800475c:	4638      	mov	r0, r7
 800475e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004760:	4b0a      	ldr	r3, [pc, #40]	; (800478c <__swbuf_r+0x9c>)
 8004762:	429c      	cmp	r4, r3
 8004764:	d101      	bne.n	800476a <__swbuf_r+0x7a>
 8004766:	68ac      	ldr	r4, [r5, #8]
 8004768:	e7cf      	b.n	800470a <__swbuf_r+0x1a>
 800476a:	4b09      	ldr	r3, [pc, #36]	; (8004790 <__swbuf_r+0xa0>)
 800476c:	429c      	cmp	r4, r3
 800476e:	bf08      	it	eq
 8004770:	68ec      	ldreq	r4, [r5, #12]
 8004772:	e7ca      	b.n	800470a <__swbuf_r+0x1a>
 8004774:	4621      	mov	r1, r4
 8004776:	4628      	mov	r0, r5
 8004778:	f000 f81e 	bl	80047b8 <__swsetup_r>
 800477c:	2800      	cmp	r0, #0
 800477e:	d0cb      	beq.n	8004718 <__swbuf_r+0x28>
 8004780:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004784:	e7ea      	b.n	800475c <__swbuf_r+0x6c>
 8004786:	bf00      	nop
 8004788:	080053f4 	.word	0x080053f4
 800478c:	08005414 	.word	0x08005414
 8004790:	080053d4 	.word	0x080053d4

08004794 <_write_r>:
 8004794:	b538      	push	{r3, r4, r5, lr}
 8004796:	4d07      	ldr	r5, [pc, #28]	; (80047b4 <_write_r+0x20>)
 8004798:	4604      	mov	r4, r0
 800479a:	4608      	mov	r0, r1
 800479c:	4611      	mov	r1, r2
 800479e:	2200      	movs	r2, #0
 80047a0:	602a      	str	r2, [r5, #0]
 80047a2:	461a      	mov	r2, r3
 80047a4:	f7ff faff 	bl	8003da6 <_write>
 80047a8:	1c43      	adds	r3, r0, #1
 80047aa:	d102      	bne.n	80047b2 <_write_r+0x1e>
 80047ac:	682b      	ldr	r3, [r5, #0]
 80047ae:	b103      	cbz	r3, 80047b2 <_write_r+0x1e>
 80047b0:	6023      	str	r3, [r4, #0]
 80047b2:	bd38      	pop	{r3, r4, r5, pc}
 80047b4:	20000454 	.word	0x20000454

080047b8 <__swsetup_r>:
 80047b8:	4b32      	ldr	r3, [pc, #200]	; (8004884 <__swsetup_r+0xcc>)
 80047ba:	b570      	push	{r4, r5, r6, lr}
 80047bc:	681d      	ldr	r5, [r3, #0]
 80047be:	4606      	mov	r6, r0
 80047c0:	460c      	mov	r4, r1
 80047c2:	b125      	cbz	r5, 80047ce <__swsetup_r+0x16>
 80047c4:	69ab      	ldr	r3, [r5, #24]
 80047c6:	b913      	cbnz	r3, 80047ce <__swsetup_r+0x16>
 80047c8:	4628      	mov	r0, r5
 80047ca:	f7ff fd45 	bl	8004258 <__sinit>
 80047ce:	4b2e      	ldr	r3, [pc, #184]	; (8004888 <__swsetup_r+0xd0>)
 80047d0:	429c      	cmp	r4, r3
 80047d2:	d10f      	bne.n	80047f4 <__swsetup_r+0x3c>
 80047d4:	686c      	ldr	r4, [r5, #4]
 80047d6:	89a3      	ldrh	r3, [r4, #12]
 80047d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047dc:	0719      	lsls	r1, r3, #28
 80047de:	d42c      	bmi.n	800483a <__swsetup_r+0x82>
 80047e0:	06dd      	lsls	r5, r3, #27
 80047e2:	d411      	bmi.n	8004808 <__swsetup_r+0x50>
 80047e4:	2309      	movs	r3, #9
 80047e6:	6033      	str	r3, [r6, #0]
 80047e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80047ec:	81a3      	strh	r3, [r4, #12]
 80047ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047f2:	e03e      	b.n	8004872 <__swsetup_r+0xba>
 80047f4:	4b25      	ldr	r3, [pc, #148]	; (800488c <__swsetup_r+0xd4>)
 80047f6:	429c      	cmp	r4, r3
 80047f8:	d101      	bne.n	80047fe <__swsetup_r+0x46>
 80047fa:	68ac      	ldr	r4, [r5, #8]
 80047fc:	e7eb      	b.n	80047d6 <__swsetup_r+0x1e>
 80047fe:	4b24      	ldr	r3, [pc, #144]	; (8004890 <__swsetup_r+0xd8>)
 8004800:	429c      	cmp	r4, r3
 8004802:	bf08      	it	eq
 8004804:	68ec      	ldreq	r4, [r5, #12]
 8004806:	e7e6      	b.n	80047d6 <__swsetup_r+0x1e>
 8004808:	0758      	lsls	r0, r3, #29
 800480a:	d512      	bpl.n	8004832 <__swsetup_r+0x7a>
 800480c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800480e:	b141      	cbz	r1, 8004822 <__swsetup_r+0x6a>
 8004810:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004814:	4299      	cmp	r1, r3
 8004816:	d002      	beq.n	800481e <__swsetup_r+0x66>
 8004818:	4630      	mov	r0, r6
 800481a:	f000 f991 	bl	8004b40 <_free_r>
 800481e:	2300      	movs	r3, #0
 8004820:	6363      	str	r3, [r4, #52]	; 0x34
 8004822:	89a3      	ldrh	r3, [r4, #12]
 8004824:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004828:	81a3      	strh	r3, [r4, #12]
 800482a:	2300      	movs	r3, #0
 800482c:	6063      	str	r3, [r4, #4]
 800482e:	6923      	ldr	r3, [r4, #16]
 8004830:	6023      	str	r3, [r4, #0]
 8004832:	89a3      	ldrh	r3, [r4, #12]
 8004834:	f043 0308 	orr.w	r3, r3, #8
 8004838:	81a3      	strh	r3, [r4, #12]
 800483a:	6923      	ldr	r3, [r4, #16]
 800483c:	b94b      	cbnz	r3, 8004852 <__swsetup_r+0x9a>
 800483e:	89a3      	ldrh	r3, [r4, #12]
 8004840:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004848:	d003      	beq.n	8004852 <__swsetup_r+0x9a>
 800484a:	4621      	mov	r1, r4
 800484c:	4630      	mov	r0, r6
 800484e:	f000 f92b 	bl	8004aa8 <__smakebuf_r>
 8004852:	89a0      	ldrh	r0, [r4, #12]
 8004854:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004858:	f010 0301 	ands.w	r3, r0, #1
 800485c:	d00a      	beq.n	8004874 <__swsetup_r+0xbc>
 800485e:	2300      	movs	r3, #0
 8004860:	60a3      	str	r3, [r4, #8]
 8004862:	6963      	ldr	r3, [r4, #20]
 8004864:	425b      	negs	r3, r3
 8004866:	61a3      	str	r3, [r4, #24]
 8004868:	6923      	ldr	r3, [r4, #16]
 800486a:	b943      	cbnz	r3, 800487e <__swsetup_r+0xc6>
 800486c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004870:	d1ba      	bne.n	80047e8 <__swsetup_r+0x30>
 8004872:	bd70      	pop	{r4, r5, r6, pc}
 8004874:	0781      	lsls	r1, r0, #30
 8004876:	bf58      	it	pl
 8004878:	6963      	ldrpl	r3, [r4, #20]
 800487a:	60a3      	str	r3, [r4, #8]
 800487c:	e7f4      	b.n	8004868 <__swsetup_r+0xb0>
 800487e:	2000      	movs	r0, #0
 8004880:	e7f7      	b.n	8004872 <__swsetup_r+0xba>
 8004882:	bf00      	nop
 8004884:	200001d8 	.word	0x200001d8
 8004888:	080053f4 	.word	0x080053f4
 800488c:	08005414 	.word	0x08005414
 8004890:	080053d4 	.word	0x080053d4

08004894 <_close_r>:
 8004894:	b538      	push	{r3, r4, r5, lr}
 8004896:	4d06      	ldr	r5, [pc, #24]	; (80048b0 <_close_r+0x1c>)
 8004898:	2300      	movs	r3, #0
 800489a:	4604      	mov	r4, r0
 800489c:	4608      	mov	r0, r1
 800489e:	602b      	str	r3, [r5, #0]
 80048a0:	f7ff fab2 	bl	8003e08 <_close>
 80048a4:	1c43      	adds	r3, r0, #1
 80048a6:	d102      	bne.n	80048ae <_close_r+0x1a>
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	b103      	cbz	r3, 80048ae <_close_r+0x1a>
 80048ac:	6023      	str	r3, [r4, #0]
 80048ae:	bd38      	pop	{r3, r4, r5, pc}
 80048b0:	20000454 	.word	0x20000454

080048b4 <__sflush_r>:
 80048b4:	898a      	ldrh	r2, [r1, #12]
 80048b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048ba:	4605      	mov	r5, r0
 80048bc:	0710      	lsls	r0, r2, #28
 80048be:	460c      	mov	r4, r1
 80048c0:	d458      	bmi.n	8004974 <__sflush_r+0xc0>
 80048c2:	684b      	ldr	r3, [r1, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	dc05      	bgt.n	80048d4 <__sflush_r+0x20>
 80048c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	dc02      	bgt.n	80048d4 <__sflush_r+0x20>
 80048ce:	2000      	movs	r0, #0
 80048d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048d6:	2e00      	cmp	r6, #0
 80048d8:	d0f9      	beq.n	80048ce <__sflush_r+0x1a>
 80048da:	2300      	movs	r3, #0
 80048dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048e0:	682f      	ldr	r7, [r5, #0]
 80048e2:	602b      	str	r3, [r5, #0]
 80048e4:	d032      	beq.n	800494c <__sflush_r+0x98>
 80048e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048e8:	89a3      	ldrh	r3, [r4, #12]
 80048ea:	075a      	lsls	r2, r3, #29
 80048ec:	d505      	bpl.n	80048fa <__sflush_r+0x46>
 80048ee:	6863      	ldr	r3, [r4, #4]
 80048f0:	1ac0      	subs	r0, r0, r3
 80048f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048f4:	b10b      	cbz	r3, 80048fa <__sflush_r+0x46>
 80048f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048f8:	1ac0      	subs	r0, r0, r3
 80048fa:	2300      	movs	r3, #0
 80048fc:	4602      	mov	r2, r0
 80048fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004900:	6a21      	ldr	r1, [r4, #32]
 8004902:	4628      	mov	r0, r5
 8004904:	47b0      	blx	r6
 8004906:	1c43      	adds	r3, r0, #1
 8004908:	89a3      	ldrh	r3, [r4, #12]
 800490a:	d106      	bne.n	800491a <__sflush_r+0x66>
 800490c:	6829      	ldr	r1, [r5, #0]
 800490e:	291d      	cmp	r1, #29
 8004910:	d82c      	bhi.n	800496c <__sflush_r+0xb8>
 8004912:	4a2a      	ldr	r2, [pc, #168]	; (80049bc <__sflush_r+0x108>)
 8004914:	40ca      	lsrs	r2, r1
 8004916:	07d6      	lsls	r6, r2, #31
 8004918:	d528      	bpl.n	800496c <__sflush_r+0xb8>
 800491a:	2200      	movs	r2, #0
 800491c:	6062      	str	r2, [r4, #4]
 800491e:	04d9      	lsls	r1, r3, #19
 8004920:	6922      	ldr	r2, [r4, #16]
 8004922:	6022      	str	r2, [r4, #0]
 8004924:	d504      	bpl.n	8004930 <__sflush_r+0x7c>
 8004926:	1c42      	adds	r2, r0, #1
 8004928:	d101      	bne.n	800492e <__sflush_r+0x7a>
 800492a:	682b      	ldr	r3, [r5, #0]
 800492c:	b903      	cbnz	r3, 8004930 <__sflush_r+0x7c>
 800492e:	6560      	str	r0, [r4, #84]	; 0x54
 8004930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004932:	602f      	str	r7, [r5, #0]
 8004934:	2900      	cmp	r1, #0
 8004936:	d0ca      	beq.n	80048ce <__sflush_r+0x1a>
 8004938:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800493c:	4299      	cmp	r1, r3
 800493e:	d002      	beq.n	8004946 <__sflush_r+0x92>
 8004940:	4628      	mov	r0, r5
 8004942:	f000 f8fd 	bl	8004b40 <_free_r>
 8004946:	2000      	movs	r0, #0
 8004948:	6360      	str	r0, [r4, #52]	; 0x34
 800494a:	e7c1      	b.n	80048d0 <__sflush_r+0x1c>
 800494c:	6a21      	ldr	r1, [r4, #32]
 800494e:	2301      	movs	r3, #1
 8004950:	4628      	mov	r0, r5
 8004952:	47b0      	blx	r6
 8004954:	1c41      	adds	r1, r0, #1
 8004956:	d1c7      	bne.n	80048e8 <__sflush_r+0x34>
 8004958:	682b      	ldr	r3, [r5, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0c4      	beq.n	80048e8 <__sflush_r+0x34>
 800495e:	2b1d      	cmp	r3, #29
 8004960:	d001      	beq.n	8004966 <__sflush_r+0xb2>
 8004962:	2b16      	cmp	r3, #22
 8004964:	d101      	bne.n	800496a <__sflush_r+0xb6>
 8004966:	602f      	str	r7, [r5, #0]
 8004968:	e7b1      	b.n	80048ce <__sflush_r+0x1a>
 800496a:	89a3      	ldrh	r3, [r4, #12]
 800496c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004970:	81a3      	strh	r3, [r4, #12]
 8004972:	e7ad      	b.n	80048d0 <__sflush_r+0x1c>
 8004974:	690f      	ldr	r7, [r1, #16]
 8004976:	2f00      	cmp	r7, #0
 8004978:	d0a9      	beq.n	80048ce <__sflush_r+0x1a>
 800497a:	0793      	lsls	r3, r2, #30
 800497c:	680e      	ldr	r6, [r1, #0]
 800497e:	bf08      	it	eq
 8004980:	694b      	ldreq	r3, [r1, #20]
 8004982:	600f      	str	r7, [r1, #0]
 8004984:	bf18      	it	ne
 8004986:	2300      	movne	r3, #0
 8004988:	eba6 0807 	sub.w	r8, r6, r7
 800498c:	608b      	str	r3, [r1, #8]
 800498e:	f1b8 0f00 	cmp.w	r8, #0
 8004992:	dd9c      	ble.n	80048ce <__sflush_r+0x1a>
 8004994:	6a21      	ldr	r1, [r4, #32]
 8004996:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004998:	4643      	mov	r3, r8
 800499a:	463a      	mov	r2, r7
 800499c:	4628      	mov	r0, r5
 800499e:	47b0      	blx	r6
 80049a0:	2800      	cmp	r0, #0
 80049a2:	dc06      	bgt.n	80049b2 <__sflush_r+0xfe>
 80049a4:	89a3      	ldrh	r3, [r4, #12]
 80049a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049aa:	81a3      	strh	r3, [r4, #12]
 80049ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049b0:	e78e      	b.n	80048d0 <__sflush_r+0x1c>
 80049b2:	4407      	add	r7, r0
 80049b4:	eba8 0800 	sub.w	r8, r8, r0
 80049b8:	e7e9      	b.n	800498e <__sflush_r+0xda>
 80049ba:	bf00      	nop
 80049bc:	20400001 	.word	0x20400001

080049c0 <_fflush_r>:
 80049c0:	b538      	push	{r3, r4, r5, lr}
 80049c2:	690b      	ldr	r3, [r1, #16]
 80049c4:	4605      	mov	r5, r0
 80049c6:	460c      	mov	r4, r1
 80049c8:	b913      	cbnz	r3, 80049d0 <_fflush_r+0x10>
 80049ca:	2500      	movs	r5, #0
 80049cc:	4628      	mov	r0, r5
 80049ce:	bd38      	pop	{r3, r4, r5, pc}
 80049d0:	b118      	cbz	r0, 80049da <_fflush_r+0x1a>
 80049d2:	6983      	ldr	r3, [r0, #24]
 80049d4:	b90b      	cbnz	r3, 80049da <_fflush_r+0x1a>
 80049d6:	f7ff fc3f 	bl	8004258 <__sinit>
 80049da:	4b14      	ldr	r3, [pc, #80]	; (8004a2c <_fflush_r+0x6c>)
 80049dc:	429c      	cmp	r4, r3
 80049de:	d11b      	bne.n	8004a18 <_fflush_r+0x58>
 80049e0:	686c      	ldr	r4, [r5, #4]
 80049e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0ef      	beq.n	80049ca <_fflush_r+0xa>
 80049ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049ec:	07d0      	lsls	r0, r2, #31
 80049ee:	d404      	bmi.n	80049fa <_fflush_r+0x3a>
 80049f0:	0599      	lsls	r1, r3, #22
 80049f2:	d402      	bmi.n	80049fa <_fflush_r+0x3a>
 80049f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049f6:	f7ff fcf2 	bl	80043de <__retarget_lock_acquire_recursive>
 80049fa:	4628      	mov	r0, r5
 80049fc:	4621      	mov	r1, r4
 80049fe:	f7ff ff59 	bl	80048b4 <__sflush_r>
 8004a02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a04:	07da      	lsls	r2, r3, #31
 8004a06:	4605      	mov	r5, r0
 8004a08:	d4e0      	bmi.n	80049cc <_fflush_r+0xc>
 8004a0a:	89a3      	ldrh	r3, [r4, #12]
 8004a0c:	059b      	lsls	r3, r3, #22
 8004a0e:	d4dd      	bmi.n	80049cc <_fflush_r+0xc>
 8004a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a12:	f7ff fce5 	bl	80043e0 <__retarget_lock_release_recursive>
 8004a16:	e7d9      	b.n	80049cc <_fflush_r+0xc>
 8004a18:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <_fflush_r+0x70>)
 8004a1a:	429c      	cmp	r4, r3
 8004a1c:	d101      	bne.n	8004a22 <_fflush_r+0x62>
 8004a1e:	68ac      	ldr	r4, [r5, #8]
 8004a20:	e7df      	b.n	80049e2 <_fflush_r+0x22>
 8004a22:	4b04      	ldr	r3, [pc, #16]	; (8004a34 <_fflush_r+0x74>)
 8004a24:	429c      	cmp	r4, r3
 8004a26:	bf08      	it	eq
 8004a28:	68ec      	ldreq	r4, [r5, #12]
 8004a2a:	e7da      	b.n	80049e2 <_fflush_r+0x22>
 8004a2c:	080053f4 	.word	0x080053f4
 8004a30:	08005414 	.word	0x08005414
 8004a34:	080053d4 	.word	0x080053d4

08004a38 <_lseek_r>:
 8004a38:	b538      	push	{r3, r4, r5, lr}
 8004a3a:	4d07      	ldr	r5, [pc, #28]	; (8004a58 <_lseek_r+0x20>)
 8004a3c:	4604      	mov	r4, r0
 8004a3e:	4608      	mov	r0, r1
 8004a40:	4611      	mov	r1, r2
 8004a42:	2200      	movs	r2, #0
 8004a44:	602a      	str	r2, [r5, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	f7ff f99b 	bl	8003d82 <_lseek>
 8004a4c:	1c43      	adds	r3, r0, #1
 8004a4e:	d102      	bne.n	8004a56 <_lseek_r+0x1e>
 8004a50:	682b      	ldr	r3, [r5, #0]
 8004a52:	b103      	cbz	r3, 8004a56 <_lseek_r+0x1e>
 8004a54:	6023      	str	r3, [r4, #0]
 8004a56:	bd38      	pop	{r3, r4, r5, pc}
 8004a58:	20000454 	.word	0x20000454

08004a5c <__swhatbuf_r>:
 8004a5c:	b570      	push	{r4, r5, r6, lr}
 8004a5e:	460e      	mov	r6, r1
 8004a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a64:	2900      	cmp	r1, #0
 8004a66:	b096      	sub	sp, #88	; 0x58
 8004a68:	4614      	mov	r4, r2
 8004a6a:	461d      	mov	r5, r3
 8004a6c:	da08      	bge.n	8004a80 <__swhatbuf_r+0x24>
 8004a6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	602a      	str	r2, [r5, #0]
 8004a76:	061a      	lsls	r2, r3, #24
 8004a78:	d410      	bmi.n	8004a9c <__swhatbuf_r+0x40>
 8004a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a7e:	e00e      	b.n	8004a9e <__swhatbuf_r+0x42>
 8004a80:	466a      	mov	r2, sp
 8004a82:	f000 fbab 	bl	80051dc <_fstat_r>
 8004a86:	2800      	cmp	r0, #0
 8004a88:	dbf1      	blt.n	8004a6e <__swhatbuf_r+0x12>
 8004a8a:	9a01      	ldr	r2, [sp, #4]
 8004a8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004a90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004a94:	425a      	negs	r2, r3
 8004a96:	415a      	adcs	r2, r3
 8004a98:	602a      	str	r2, [r5, #0]
 8004a9a:	e7ee      	b.n	8004a7a <__swhatbuf_r+0x1e>
 8004a9c:	2340      	movs	r3, #64	; 0x40
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	6023      	str	r3, [r4, #0]
 8004aa2:	b016      	add	sp, #88	; 0x58
 8004aa4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004aa8 <__smakebuf_r>:
 8004aa8:	898b      	ldrh	r3, [r1, #12]
 8004aaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004aac:	079d      	lsls	r5, r3, #30
 8004aae:	4606      	mov	r6, r0
 8004ab0:	460c      	mov	r4, r1
 8004ab2:	d507      	bpl.n	8004ac4 <__smakebuf_r+0x1c>
 8004ab4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	6123      	str	r3, [r4, #16]
 8004abc:	2301      	movs	r3, #1
 8004abe:	6163      	str	r3, [r4, #20]
 8004ac0:	b002      	add	sp, #8
 8004ac2:	bd70      	pop	{r4, r5, r6, pc}
 8004ac4:	ab01      	add	r3, sp, #4
 8004ac6:	466a      	mov	r2, sp
 8004ac8:	f7ff ffc8 	bl	8004a5c <__swhatbuf_r>
 8004acc:	9900      	ldr	r1, [sp, #0]
 8004ace:	4605      	mov	r5, r0
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	f7ff fcaf 	bl	8004434 <_malloc_r>
 8004ad6:	b948      	cbnz	r0, 8004aec <__smakebuf_r+0x44>
 8004ad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004adc:	059a      	lsls	r2, r3, #22
 8004ade:	d4ef      	bmi.n	8004ac0 <__smakebuf_r+0x18>
 8004ae0:	f023 0303 	bic.w	r3, r3, #3
 8004ae4:	f043 0302 	orr.w	r3, r3, #2
 8004ae8:	81a3      	strh	r3, [r4, #12]
 8004aea:	e7e3      	b.n	8004ab4 <__smakebuf_r+0xc>
 8004aec:	4b0d      	ldr	r3, [pc, #52]	; (8004b24 <__smakebuf_r+0x7c>)
 8004aee:	62b3      	str	r3, [r6, #40]	; 0x28
 8004af0:	89a3      	ldrh	r3, [r4, #12]
 8004af2:	6020      	str	r0, [r4, #0]
 8004af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af8:	81a3      	strh	r3, [r4, #12]
 8004afa:	9b00      	ldr	r3, [sp, #0]
 8004afc:	6163      	str	r3, [r4, #20]
 8004afe:	9b01      	ldr	r3, [sp, #4]
 8004b00:	6120      	str	r0, [r4, #16]
 8004b02:	b15b      	cbz	r3, 8004b1c <__smakebuf_r+0x74>
 8004b04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b08:	4630      	mov	r0, r6
 8004b0a:	f000 fb79 	bl	8005200 <_isatty_r>
 8004b0e:	b128      	cbz	r0, 8004b1c <__smakebuf_r+0x74>
 8004b10:	89a3      	ldrh	r3, [r4, #12]
 8004b12:	f023 0303 	bic.w	r3, r3, #3
 8004b16:	f043 0301 	orr.w	r3, r3, #1
 8004b1a:	81a3      	strh	r3, [r4, #12]
 8004b1c:	89a0      	ldrh	r0, [r4, #12]
 8004b1e:	4305      	orrs	r5, r0
 8004b20:	81a5      	strh	r5, [r4, #12]
 8004b22:	e7cd      	b.n	8004ac0 <__smakebuf_r+0x18>
 8004b24:	080041f1 	.word	0x080041f1

08004b28 <__malloc_lock>:
 8004b28:	4801      	ldr	r0, [pc, #4]	; (8004b30 <__malloc_lock+0x8>)
 8004b2a:	f7ff bc58 	b.w	80043de <__retarget_lock_acquire_recursive>
 8004b2e:	bf00      	nop
 8004b30:	20000448 	.word	0x20000448

08004b34 <__malloc_unlock>:
 8004b34:	4801      	ldr	r0, [pc, #4]	; (8004b3c <__malloc_unlock+0x8>)
 8004b36:	f7ff bc53 	b.w	80043e0 <__retarget_lock_release_recursive>
 8004b3a:	bf00      	nop
 8004b3c:	20000448 	.word	0x20000448

08004b40 <_free_r>:
 8004b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b42:	2900      	cmp	r1, #0
 8004b44:	d044      	beq.n	8004bd0 <_free_r+0x90>
 8004b46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b4a:	9001      	str	r0, [sp, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f1a1 0404 	sub.w	r4, r1, #4
 8004b52:	bfb8      	it	lt
 8004b54:	18e4      	addlt	r4, r4, r3
 8004b56:	f7ff ffe7 	bl	8004b28 <__malloc_lock>
 8004b5a:	4a1e      	ldr	r2, [pc, #120]	; (8004bd4 <_free_r+0x94>)
 8004b5c:	9801      	ldr	r0, [sp, #4]
 8004b5e:	6813      	ldr	r3, [r2, #0]
 8004b60:	b933      	cbnz	r3, 8004b70 <_free_r+0x30>
 8004b62:	6063      	str	r3, [r4, #4]
 8004b64:	6014      	str	r4, [r2, #0]
 8004b66:	b003      	add	sp, #12
 8004b68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b6c:	f7ff bfe2 	b.w	8004b34 <__malloc_unlock>
 8004b70:	42a3      	cmp	r3, r4
 8004b72:	d908      	bls.n	8004b86 <_free_r+0x46>
 8004b74:	6825      	ldr	r5, [r4, #0]
 8004b76:	1961      	adds	r1, r4, r5
 8004b78:	428b      	cmp	r3, r1
 8004b7a:	bf01      	itttt	eq
 8004b7c:	6819      	ldreq	r1, [r3, #0]
 8004b7e:	685b      	ldreq	r3, [r3, #4]
 8004b80:	1949      	addeq	r1, r1, r5
 8004b82:	6021      	streq	r1, [r4, #0]
 8004b84:	e7ed      	b.n	8004b62 <_free_r+0x22>
 8004b86:	461a      	mov	r2, r3
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	b10b      	cbz	r3, 8004b90 <_free_r+0x50>
 8004b8c:	42a3      	cmp	r3, r4
 8004b8e:	d9fa      	bls.n	8004b86 <_free_r+0x46>
 8004b90:	6811      	ldr	r1, [r2, #0]
 8004b92:	1855      	adds	r5, r2, r1
 8004b94:	42a5      	cmp	r5, r4
 8004b96:	d10b      	bne.n	8004bb0 <_free_r+0x70>
 8004b98:	6824      	ldr	r4, [r4, #0]
 8004b9a:	4421      	add	r1, r4
 8004b9c:	1854      	adds	r4, r2, r1
 8004b9e:	42a3      	cmp	r3, r4
 8004ba0:	6011      	str	r1, [r2, #0]
 8004ba2:	d1e0      	bne.n	8004b66 <_free_r+0x26>
 8004ba4:	681c      	ldr	r4, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	6053      	str	r3, [r2, #4]
 8004baa:	4421      	add	r1, r4
 8004bac:	6011      	str	r1, [r2, #0]
 8004bae:	e7da      	b.n	8004b66 <_free_r+0x26>
 8004bb0:	d902      	bls.n	8004bb8 <_free_r+0x78>
 8004bb2:	230c      	movs	r3, #12
 8004bb4:	6003      	str	r3, [r0, #0]
 8004bb6:	e7d6      	b.n	8004b66 <_free_r+0x26>
 8004bb8:	6825      	ldr	r5, [r4, #0]
 8004bba:	1961      	adds	r1, r4, r5
 8004bbc:	428b      	cmp	r3, r1
 8004bbe:	bf04      	itt	eq
 8004bc0:	6819      	ldreq	r1, [r3, #0]
 8004bc2:	685b      	ldreq	r3, [r3, #4]
 8004bc4:	6063      	str	r3, [r4, #4]
 8004bc6:	bf04      	itt	eq
 8004bc8:	1949      	addeq	r1, r1, r5
 8004bca:	6021      	streq	r1, [r4, #0]
 8004bcc:	6054      	str	r4, [r2, #4]
 8004bce:	e7ca      	b.n	8004b66 <_free_r+0x26>
 8004bd0:	b003      	add	sp, #12
 8004bd2:	bd30      	pop	{r4, r5, pc}
 8004bd4:	2000044c 	.word	0x2000044c

08004bd8 <__ssputs_r>:
 8004bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bdc:	688e      	ldr	r6, [r1, #8]
 8004bde:	429e      	cmp	r6, r3
 8004be0:	4682      	mov	sl, r0
 8004be2:	460c      	mov	r4, r1
 8004be4:	4690      	mov	r8, r2
 8004be6:	461f      	mov	r7, r3
 8004be8:	d838      	bhi.n	8004c5c <__ssputs_r+0x84>
 8004bea:	898a      	ldrh	r2, [r1, #12]
 8004bec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004bf0:	d032      	beq.n	8004c58 <__ssputs_r+0x80>
 8004bf2:	6825      	ldr	r5, [r4, #0]
 8004bf4:	6909      	ldr	r1, [r1, #16]
 8004bf6:	eba5 0901 	sub.w	r9, r5, r1
 8004bfa:	6965      	ldr	r5, [r4, #20]
 8004bfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c04:	3301      	adds	r3, #1
 8004c06:	444b      	add	r3, r9
 8004c08:	106d      	asrs	r5, r5, #1
 8004c0a:	429d      	cmp	r5, r3
 8004c0c:	bf38      	it	cc
 8004c0e:	461d      	movcc	r5, r3
 8004c10:	0553      	lsls	r3, r2, #21
 8004c12:	d531      	bpl.n	8004c78 <__ssputs_r+0xa0>
 8004c14:	4629      	mov	r1, r5
 8004c16:	f7ff fc0d 	bl	8004434 <_malloc_r>
 8004c1a:	4606      	mov	r6, r0
 8004c1c:	b950      	cbnz	r0, 8004c34 <__ssputs_r+0x5c>
 8004c1e:	230c      	movs	r3, #12
 8004c20:	f8ca 3000 	str.w	r3, [sl]
 8004c24:	89a3      	ldrh	r3, [r4, #12]
 8004c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c2a:	81a3      	strh	r3, [r4, #12]
 8004c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c34:	6921      	ldr	r1, [r4, #16]
 8004c36:	464a      	mov	r2, r9
 8004c38:	f000 faf2 	bl	8005220 <memcpy>
 8004c3c:	89a3      	ldrh	r3, [r4, #12]
 8004c3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c46:	81a3      	strh	r3, [r4, #12]
 8004c48:	6126      	str	r6, [r4, #16]
 8004c4a:	6165      	str	r5, [r4, #20]
 8004c4c:	444e      	add	r6, r9
 8004c4e:	eba5 0509 	sub.w	r5, r5, r9
 8004c52:	6026      	str	r6, [r4, #0]
 8004c54:	60a5      	str	r5, [r4, #8]
 8004c56:	463e      	mov	r6, r7
 8004c58:	42be      	cmp	r6, r7
 8004c5a:	d900      	bls.n	8004c5e <__ssputs_r+0x86>
 8004c5c:	463e      	mov	r6, r7
 8004c5e:	6820      	ldr	r0, [r4, #0]
 8004c60:	4632      	mov	r2, r6
 8004c62:	4641      	mov	r1, r8
 8004c64:	f000 faea 	bl	800523c <memmove>
 8004c68:	68a3      	ldr	r3, [r4, #8]
 8004c6a:	1b9b      	subs	r3, r3, r6
 8004c6c:	60a3      	str	r3, [r4, #8]
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	4433      	add	r3, r6
 8004c72:	6023      	str	r3, [r4, #0]
 8004c74:	2000      	movs	r0, #0
 8004c76:	e7db      	b.n	8004c30 <__ssputs_r+0x58>
 8004c78:	462a      	mov	r2, r5
 8004c7a:	f000 faf9 	bl	8005270 <_realloc_r>
 8004c7e:	4606      	mov	r6, r0
 8004c80:	2800      	cmp	r0, #0
 8004c82:	d1e1      	bne.n	8004c48 <__ssputs_r+0x70>
 8004c84:	6921      	ldr	r1, [r4, #16]
 8004c86:	4650      	mov	r0, sl
 8004c88:	f7ff ff5a 	bl	8004b40 <_free_r>
 8004c8c:	e7c7      	b.n	8004c1e <__ssputs_r+0x46>
	...

08004c90 <_svfiprintf_r>:
 8004c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c94:	4698      	mov	r8, r3
 8004c96:	898b      	ldrh	r3, [r1, #12]
 8004c98:	061b      	lsls	r3, r3, #24
 8004c9a:	b09d      	sub	sp, #116	; 0x74
 8004c9c:	4607      	mov	r7, r0
 8004c9e:	460d      	mov	r5, r1
 8004ca0:	4614      	mov	r4, r2
 8004ca2:	d50e      	bpl.n	8004cc2 <_svfiprintf_r+0x32>
 8004ca4:	690b      	ldr	r3, [r1, #16]
 8004ca6:	b963      	cbnz	r3, 8004cc2 <_svfiprintf_r+0x32>
 8004ca8:	2140      	movs	r1, #64	; 0x40
 8004caa:	f7ff fbc3 	bl	8004434 <_malloc_r>
 8004cae:	6028      	str	r0, [r5, #0]
 8004cb0:	6128      	str	r0, [r5, #16]
 8004cb2:	b920      	cbnz	r0, 8004cbe <_svfiprintf_r+0x2e>
 8004cb4:	230c      	movs	r3, #12
 8004cb6:	603b      	str	r3, [r7, #0]
 8004cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cbc:	e0d1      	b.n	8004e62 <_svfiprintf_r+0x1d2>
 8004cbe:	2340      	movs	r3, #64	; 0x40
 8004cc0:	616b      	str	r3, [r5, #20]
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8004cc6:	2320      	movs	r3, #32
 8004cc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ccc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cd0:	2330      	movs	r3, #48	; 0x30
 8004cd2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004e7c <_svfiprintf_r+0x1ec>
 8004cd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cda:	f04f 0901 	mov.w	r9, #1
 8004cde:	4623      	mov	r3, r4
 8004ce0:	469a      	mov	sl, r3
 8004ce2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ce6:	b10a      	cbz	r2, 8004cec <_svfiprintf_r+0x5c>
 8004ce8:	2a25      	cmp	r2, #37	; 0x25
 8004cea:	d1f9      	bne.n	8004ce0 <_svfiprintf_r+0x50>
 8004cec:	ebba 0b04 	subs.w	fp, sl, r4
 8004cf0:	d00b      	beq.n	8004d0a <_svfiprintf_r+0x7a>
 8004cf2:	465b      	mov	r3, fp
 8004cf4:	4622      	mov	r2, r4
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	4638      	mov	r0, r7
 8004cfa:	f7ff ff6d 	bl	8004bd8 <__ssputs_r>
 8004cfe:	3001      	adds	r0, #1
 8004d00:	f000 80aa 	beq.w	8004e58 <_svfiprintf_r+0x1c8>
 8004d04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d06:	445a      	add	r2, fp
 8004d08:	9209      	str	r2, [sp, #36]	; 0x24
 8004d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 80a2 	beq.w	8004e58 <_svfiprintf_r+0x1c8>
 8004d14:	2300      	movs	r3, #0
 8004d16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d1e:	f10a 0a01 	add.w	sl, sl, #1
 8004d22:	9304      	str	r3, [sp, #16]
 8004d24:	9307      	str	r3, [sp, #28]
 8004d26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d2a:	931a      	str	r3, [sp, #104]	; 0x68
 8004d2c:	4654      	mov	r4, sl
 8004d2e:	2205      	movs	r2, #5
 8004d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d34:	4851      	ldr	r0, [pc, #324]	; (8004e7c <_svfiprintf_r+0x1ec>)
 8004d36:	f7fb fa63 	bl	8000200 <memchr>
 8004d3a:	9a04      	ldr	r2, [sp, #16]
 8004d3c:	b9d8      	cbnz	r0, 8004d76 <_svfiprintf_r+0xe6>
 8004d3e:	06d0      	lsls	r0, r2, #27
 8004d40:	bf44      	itt	mi
 8004d42:	2320      	movmi	r3, #32
 8004d44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d48:	0711      	lsls	r1, r2, #28
 8004d4a:	bf44      	itt	mi
 8004d4c:	232b      	movmi	r3, #43	; 0x2b
 8004d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d52:	f89a 3000 	ldrb.w	r3, [sl]
 8004d56:	2b2a      	cmp	r3, #42	; 0x2a
 8004d58:	d015      	beq.n	8004d86 <_svfiprintf_r+0xf6>
 8004d5a:	9a07      	ldr	r2, [sp, #28]
 8004d5c:	4654      	mov	r4, sl
 8004d5e:	2000      	movs	r0, #0
 8004d60:	f04f 0c0a 	mov.w	ip, #10
 8004d64:	4621      	mov	r1, r4
 8004d66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d6a:	3b30      	subs	r3, #48	; 0x30
 8004d6c:	2b09      	cmp	r3, #9
 8004d6e:	d94e      	bls.n	8004e0e <_svfiprintf_r+0x17e>
 8004d70:	b1b0      	cbz	r0, 8004da0 <_svfiprintf_r+0x110>
 8004d72:	9207      	str	r2, [sp, #28]
 8004d74:	e014      	b.n	8004da0 <_svfiprintf_r+0x110>
 8004d76:	eba0 0308 	sub.w	r3, r0, r8
 8004d7a:	fa09 f303 	lsl.w	r3, r9, r3
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	9304      	str	r3, [sp, #16]
 8004d82:	46a2      	mov	sl, r4
 8004d84:	e7d2      	b.n	8004d2c <_svfiprintf_r+0x9c>
 8004d86:	9b03      	ldr	r3, [sp, #12]
 8004d88:	1d19      	adds	r1, r3, #4
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	9103      	str	r1, [sp, #12]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	bfbb      	ittet	lt
 8004d92:	425b      	neglt	r3, r3
 8004d94:	f042 0202 	orrlt.w	r2, r2, #2
 8004d98:	9307      	strge	r3, [sp, #28]
 8004d9a:	9307      	strlt	r3, [sp, #28]
 8004d9c:	bfb8      	it	lt
 8004d9e:	9204      	strlt	r2, [sp, #16]
 8004da0:	7823      	ldrb	r3, [r4, #0]
 8004da2:	2b2e      	cmp	r3, #46	; 0x2e
 8004da4:	d10c      	bne.n	8004dc0 <_svfiprintf_r+0x130>
 8004da6:	7863      	ldrb	r3, [r4, #1]
 8004da8:	2b2a      	cmp	r3, #42	; 0x2a
 8004daa:	d135      	bne.n	8004e18 <_svfiprintf_r+0x188>
 8004dac:	9b03      	ldr	r3, [sp, #12]
 8004dae:	1d1a      	adds	r2, r3, #4
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	9203      	str	r2, [sp, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	bfb8      	it	lt
 8004db8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004dbc:	3402      	adds	r4, #2
 8004dbe:	9305      	str	r3, [sp, #20]
 8004dc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004e8c <_svfiprintf_r+0x1fc>
 8004dc4:	7821      	ldrb	r1, [r4, #0]
 8004dc6:	2203      	movs	r2, #3
 8004dc8:	4650      	mov	r0, sl
 8004dca:	f7fb fa19 	bl	8000200 <memchr>
 8004dce:	b140      	cbz	r0, 8004de2 <_svfiprintf_r+0x152>
 8004dd0:	2340      	movs	r3, #64	; 0x40
 8004dd2:	eba0 000a 	sub.w	r0, r0, sl
 8004dd6:	fa03 f000 	lsl.w	r0, r3, r0
 8004dda:	9b04      	ldr	r3, [sp, #16]
 8004ddc:	4303      	orrs	r3, r0
 8004dde:	3401      	adds	r4, #1
 8004de0:	9304      	str	r3, [sp, #16]
 8004de2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004de6:	4826      	ldr	r0, [pc, #152]	; (8004e80 <_svfiprintf_r+0x1f0>)
 8004de8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dec:	2206      	movs	r2, #6
 8004dee:	f7fb fa07 	bl	8000200 <memchr>
 8004df2:	2800      	cmp	r0, #0
 8004df4:	d038      	beq.n	8004e68 <_svfiprintf_r+0x1d8>
 8004df6:	4b23      	ldr	r3, [pc, #140]	; (8004e84 <_svfiprintf_r+0x1f4>)
 8004df8:	bb1b      	cbnz	r3, 8004e42 <_svfiprintf_r+0x1b2>
 8004dfa:	9b03      	ldr	r3, [sp, #12]
 8004dfc:	3307      	adds	r3, #7
 8004dfe:	f023 0307 	bic.w	r3, r3, #7
 8004e02:	3308      	adds	r3, #8
 8004e04:	9303      	str	r3, [sp, #12]
 8004e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e08:	4433      	add	r3, r6
 8004e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e0c:	e767      	b.n	8004cde <_svfiprintf_r+0x4e>
 8004e0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e12:	460c      	mov	r4, r1
 8004e14:	2001      	movs	r0, #1
 8004e16:	e7a5      	b.n	8004d64 <_svfiprintf_r+0xd4>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	3401      	adds	r4, #1
 8004e1c:	9305      	str	r3, [sp, #20]
 8004e1e:	4619      	mov	r1, r3
 8004e20:	f04f 0c0a 	mov.w	ip, #10
 8004e24:	4620      	mov	r0, r4
 8004e26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e2a:	3a30      	subs	r2, #48	; 0x30
 8004e2c:	2a09      	cmp	r2, #9
 8004e2e:	d903      	bls.n	8004e38 <_svfiprintf_r+0x1a8>
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0c5      	beq.n	8004dc0 <_svfiprintf_r+0x130>
 8004e34:	9105      	str	r1, [sp, #20]
 8004e36:	e7c3      	b.n	8004dc0 <_svfiprintf_r+0x130>
 8004e38:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e3c:	4604      	mov	r4, r0
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e7f0      	b.n	8004e24 <_svfiprintf_r+0x194>
 8004e42:	ab03      	add	r3, sp, #12
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	462a      	mov	r2, r5
 8004e48:	4b0f      	ldr	r3, [pc, #60]	; (8004e88 <_svfiprintf_r+0x1f8>)
 8004e4a:	a904      	add	r1, sp, #16
 8004e4c:	4638      	mov	r0, r7
 8004e4e:	f3af 8000 	nop.w
 8004e52:	1c42      	adds	r2, r0, #1
 8004e54:	4606      	mov	r6, r0
 8004e56:	d1d6      	bne.n	8004e06 <_svfiprintf_r+0x176>
 8004e58:	89ab      	ldrh	r3, [r5, #12]
 8004e5a:	065b      	lsls	r3, r3, #25
 8004e5c:	f53f af2c 	bmi.w	8004cb8 <_svfiprintf_r+0x28>
 8004e60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e62:	b01d      	add	sp, #116	; 0x74
 8004e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e68:	ab03      	add	r3, sp, #12
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	462a      	mov	r2, r5
 8004e6e:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <_svfiprintf_r+0x1f8>)
 8004e70:	a904      	add	r1, sp, #16
 8004e72:	4638      	mov	r0, r7
 8004e74:	f000 f87a 	bl	8004f6c <_printf_i>
 8004e78:	e7eb      	b.n	8004e52 <_svfiprintf_r+0x1c2>
 8004e7a:	bf00      	nop
 8004e7c:	08005438 	.word	0x08005438
 8004e80:	08005442 	.word	0x08005442
 8004e84:	00000000 	.word	0x00000000
 8004e88:	08004bd9 	.word	0x08004bd9
 8004e8c:	0800543e 	.word	0x0800543e

08004e90 <_printf_common>:
 8004e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e94:	4616      	mov	r6, r2
 8004e96:	4699      	mov	r9, r3
 8004e98:	688a      	ldr	r2, [r1, #8]
 8004e9a:	690b      	ldr	r3, [r1, #16]
 8004e9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	bfb8      	it	lt
 8004ea4:	4613      	movlt	r3, r2
 8004ea6:	6033      	str	r3, [r6, #0]
 8004ea8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004eac:	4607      	mov	r7, r0
 8004eae:	460c      	mov	r4, r1
 8004eb0:	b10a      	cbz	r2, 8004eb6 <_printf_common+0x26>
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	6033      	str	r3, [r6, #0]
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	0699      	lsls	r1, r3, #26
 8004eba:	bf42      	ittt	mi
 8004ebc:	6833      	ldrmi	r3, [r6, #0]
 8004ebe:	3302      	addmi	r3, #2
 8004ec0:	6033      	strmi	r3, [r6, #0]
 8004ec2:	6825      	ldr	r5, [r4, #0]
 8004ec4:	f015 0506 	ands.w	r5, r5, #6
 8004ec8:	d106      	bne.n	8004ed8 <_printf_common+0x48>
 8004eca:	f104 0a19 	add.w	sl, r4, #25
 8004ece:	68e3      	ldr	r3, [r4, #12]
 8004ed0:	6832      	ldr	r2, [r6, #0]
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	42ab      	cmp	r3, r5
 8004ed6:	dc26      	bgt.n	8004f26 <_printf_common+0x96>
 8004ed8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004edc:	1e13      	subs	r3, r2, #0
 8004ede:	6822      	ldr	r2, [r4, #0]
 8004ee0:	bf18      	it	ne
 8004ee2:	2301      	movne	r3, #1
 8004ee4:	0692      	lsls	r2, r2, #26
 8004ee6:	d42b      	bmi.n	8004f40 <_printf_common+0xb0>
 8004ee8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004eec:	4649      	mov	r1, r9
 8004eee:	4638      	mov	r0, r7
 8004ef0:	47c0      	blx	r8
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	d01e      	beq.n	8004f34 <_printf_common+0xa4>
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	68e5      	ldr	r5, [r4, #12]
 8004efa:	6832      	ldr	r2, [r6, #0]
 8004efc:	f003 0306 	and.w	r3, r3, #6
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	bf08      	it	eq
 8004f04:	1aad      	subeq	r5, r5, r2
 8004f06:	68a3      	ldr	r3, [r4, #8]
 8004f08:	6922      	ldr	r2, [r4, #16]
 8004f0a:	bf0c      	ite	eq
 8004f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f10:	2500      	movne	r5, #0
 8004f12:	4293      	cmp	r3, r2
 8004f14:	bfc4      	itt	gt
 8004f16:	1a9b      	subgt	r3, r3, r2
 8004f18:	18ed      	addgt	r5, r5, r3
 8004f1a:	2600      	movs	r6, #0
 8004f1c:	341a      	adds	r4, #26
 8004f1e:	42b5      	cmp	r5, r6
 8004f20:	d11a      	bne.n	8004f58 <_printf_common+0xc8>
 8004f22:	2000      	movs	r0, #0
 8004f24:	e008      	b.n	8004f38 <_printf_common+0xa8>
 8004f26:	2301      	movs	r3, #1
 8004f28:	4652      	mov	r2, sl
 8004f2a:	4649      	mov	r1, r9
 8004f2c:	4638      	mov	r0, r7
 8004f2e:	47c0      	blx	r8
 8004f30:	3001      	adds	r0, #1
 8004f32:	d103      	bne.n	8004f3c <_printf_common+0xac>
 8004f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f3c:	3501      	adds	r5, #1
 8004f3e:	e7c6      	b.n	8004ece <_printf_common+0x3e>
 8004f40:	18e1      	adds	r1, r4, r3
 8004f42:	1c5a      	adds	r2, r3, #1
 8004f44:	2030      	movs	r0, #48	; 0x30
 8004f46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f4a:	4422      	add	r2, r4
 8004f4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f54:	3302      	adds	r3, #2
 8004f56:	e7c7      	b.n	8004ee8 <_printf_common+0x58>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	4622      	mov	r2, r4
 8004f5c:	4649      	mov	r1, r9
 8004f5e:	4638      	mov	r0, r7
 8004f60:	47c0      	blx	r8
 8004f62:	3001      	adds	r0, #1
 8004f64:	d0e6      	beq.n	8004f34 <_printf_common+0xa4>
 8004f66:	3601      	adds	r6, #1
 8004f68:	e7d9      	b.n	8004f1e <_printf_common+0x8e>
	...

08004f6c <_printf_i>:
 8004f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f70:	7e0f      	ldrb	r7, [r1, #24]
 8004f72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f74:	2f78      	cmp	r7, #120	; 0x78
 8004f76:	4691      	mov	r9, r2
 8004f78:	4680      	mov	r8, r0
 8004f7a:	460c      	mov	r4, r1
 8004f7c:	469a      	mov	sl, r3
 8004f7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f82:	d807      	bhi.n	8004f94 <_printf_i+0x28>
 8004f84:	2f62      	cmp	r7, #98	; 0x62
 8004f86:	d80a      	bhi.n	8004f9e <_printf_i+0x32>
 8004f88:	2f00      	cmp	r7, #0
 8004f8a:	f000 80d8 	beq.w	800513e <_printf_i+0x1d2>
 8004f8e:	2f58      	cmp	r7, #88	; 0x58
 8004f90:	f000 80a3 	beq.w	80050da <_printf_i+0x16e>
 8004f94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f9c:	e03a      	b.n	8005014 <_printf_i+0xa8>
 8004f9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fa2:	2b15      	cmp	r3, #21
 8004fa4:	d8f6      	bhi.n	8004f94 <_printf_i+0x28>
 8004fa6:	a101      	add	r1, pc, #4	; (adr r1, 8004fac <_printf_i+0x40>)
 8004fa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fac:	08005005 	.word	0x08005005
 8004fb0:	08005019 	.word	0x08005019
 8004fb4:	08004f95 	.word	0x08004f95
 8004fb8:	08004f95 	.word	0x08004f95
 8004fbc:	08004f95 	.word	0x08004f95
 8004fc0:	08004f95 	.word	0x08004f95
 8004fc4:	08005019 	.word	0x08005019
 8004fc8:	08004f95 	.word	0x08004f95
 8004fcc:	08004f95 	.word	0x08004f95
 8004fd0:	08004f95 	.word	0x08004f95
 8004fd4:	08004f95 	.word	0x08004f95
 8004fd8:	08005125 	.word	0x08005125
 8004fdc:	08005049 	.word	0x08005049
 8004fe0:	08005107 	.word	0x08005107
 8004fe4:	08004f95 	.word	0x08004f95
 8004fe8:	08004f95 	.word	0x08004f95
 8004fec:	08005147 	.word	0x08005147
 8004ff0:	08004f95 	.word	0x08004f95
 8004ff4:	08005049 	.word	0x08005049
 8004ff8:	08004f95 	.word	0x08004f95
 8004ffc:	08004f95 	.word	0x08004f95
 8005000:	0800510f 	.word	0x0800510f
 8005004:	682b      	ldr	r3, [r5, #0]
 8005006:	1d1a      	adds	r2, r3, #4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	602a      	str	r2, [r5, #0]
 800500c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005010:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005014:	2301      	movs	r3, #1
 8005016:	e0a3      	b.n	8005160 <_printf_i+0x1f4>
 8005018:	6820      	ldr	r0, [r4, #0]
 800501a:	6829      	ldr	r1, [r5, #0]
 800501c:	0606      	lsls	r6, r0, #24
 800501e:	f101 0304 	add.w	r3, r1, #4
 8005022:	d50a      	bpl.n	800503a <_printf_i+0xce>
 8005024:	680e      	ldr	r6, [r1, #0]
 8005026:	602b      	str	r3, [r5, #0]
 8005028:	2e00      	cmp	r6, #0
 800502a:	da03      	bge.n	8005034 <_printf_i+0xc8>
 800502c:	232d      	movs	r3, #45	; 0x2d
 800502e:	4276      	negs	r6, r6
 8005030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005034:	485e      	ldr	r0, [pc, #376]	; (80051b0 <_printf_i+0x244>)
 8005036:	230a      	movs	r3, #10
 8005038:	e019      	b.n	800506e <_printf_i+0x102>
 800503a:	680e      	ldr	r6, [r1, #0]
 800503c:	602b      	str	r3, [r5, #0]
 800503e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005042:	bf18      	it	ne
 8005044:	b236      	sxthne	r6, r6
 8005046:	e7ef      	b.n	8005028 <_printf_i+0xbc>
 8005048:	682b      	ldr	r3, [r5, #0]
 800504a:	6820      	ldr	r0, [r4, #0]
 800504c:	1d19      	adds	r1, r3, #4
 800504e:	6029      	str	r1, [r5, #0]
 8005050:	0601      	lsls	r1, r0, #24
 8005052:	d501      	bpl.n	8005058 <_printf_i+0xec>
 8005054:	681e      	ldr	r6, [r3, #0]
 8005056:	e002      	b.n	800505e <_printf_i+0xf2>
 8005058:	0646      	lsls	r6, r0, #25
 800505a:	d5fb      	bpl.n	8005054 <_printf_i+0xe8>
 800505c:	881e      	ldrh	r6, [r3, #0]
 800505e:	4854      	ldr	r0, [pc, #336]	; (80051b0 <_printf_i+0x244>)
 8005060:	2f6f      	cmp	r7, #111	; 0x6f
 8005062:	bf0c      	ite	eq
 8005064:	2308      	moveq	r3, #8
 8005066:	230a      	movne	r3, #10
 8005068:	2100      	movs	r1, #0
 800506a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800506e:	6865      	ldr	r5, [r4, #4]
 8005070:	60a5      	str	r5, [r4, #8]
 8005072:	2d00      	cmp	r5, #0
 8005074:	bfa2      	ittt	ge
 8005076:	6821      	ldrge	r1, [r4, #0]
 8005078:	f021 0104 	bicge.w	r1, r1, #4
 800507c:	6021      	strge	r1, [r4, #0]
 800507e:	b90e      	cbnz	r6, 8005084 <_printf_i+0x118>
 8005080:	2d00      	cmp	r5, #0
 8005082:	d04d      	beq.n	8005120 <_printf_i+0x1b4>
 8005084:	4615      	mov	r5, r2
 8005086:	fbb6 f1f3 	udiv	r1, r6, r3
 800508a:	fb03 6711 	mls	r7, r3, r1, r6
 800508e:	5dc7      	ldrb	r7, [r0, r7]
 8005090:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005094:	4637      	mov	r7, r6
 8005096:	42bb      	cmp	r3, r7
 8005098:	460e      	mov	r6, r1
 800509a:	d9f4      	bls.n	8005086 <_printf_i+0x11a>
 800509c:	2b08      	cmp	r3, #8
 800509e:	d10b      	bne.n	80050b8 <_printf_i+0x14c>
 80050a0:	6823      	ldr	r3, [r4, #0]
 80050a2:	07de      	lsls	r6, r3, #31
 80050a4:	d508      	bpl.n	80050b8 <_printf_i+0x14c>
 80050a6:	6923      	ldr	r3, [r4, #16]
 80050a8:	6861      	ldr	r1, [r4, #4]
 80050aa:	4299      	cmp	r1, r3
 80050ac:	bfde      	ittt	le
 80050ae:	2330      	movle	r3, #48	; 0x30
 80050b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80050b8:	1b52      	subs	r2, r2, r5
 80050ba:	6122      	str	r2, [r4, #16]
 80050bc:	f8cd a000 	str.w	sl, [sp]
 80050c0:	464b      	mov	r3, r9
 80050c2:	aa03      	add	r2, sp, #12
 80050c4:	4621      	mov	r1, r4
 80050c6:	4640      	mov	r0, r8
 80050c8:	f7ff fee2 	bl	8004e90 <_printf_common>
 80050cc:	3001      	adds	r0, #1
 80050ce:	d14c      	bne.n	800516a <_printf_i+0x1fe>
 80050d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050d4:	b004      	add	sp, #16
 80050d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050da:	4835      	ldr	r0, [pc, #212]	; (80051b0 <_printf_i+0x244>)
 80050dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80050e0:	6829      	ldr	r1, [r5, #0]
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80050e8:	6029      	str	r1, [r5, #0]
 80050ea:	061d      	lsls	r5, r3, #24
 80050ec:	d514      	bpl.n	8005118 <_printf_i+0x1ac>
 80050ee:	07df      	lsls	r7, r3, #31
 80050f0:	bf44      	itt	mi
 80050f2:	f043 0320 	orrmi.w	r3, r3, #32
 80050f6:	6023      	strmi	r3, [r4, #0]
 80050f8:	b91e      	cbnz	r6, 8005102 <_printf_i+0x196>
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	f023 0320 	bic.w	r3, r3, #32
 8005100:	6023      	str	r3, [r4, #0]
 8005102:	2310      	movs	r3, #16
 8005104:	e7b0      	b.n	8005068 <_printf_i+0xfc>
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	f043 0320 	orr.w	r3, r3, #32
 800510c:	6023      	str	r3, [r4, #0]
 800510e:	2378      	movs	r3, #120	; 0x78
 8005110:	4828      	ldr	r0, [pc, #160]	; (80051b4 <_printf_i+0x248>)
 8005112:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005116:	e7e3      	b.n	80050e0 <_printf_i+0x174>
 8005118:	0659      	lsls	r1, r3, #25
 800511a:	bf48      	it	mi
 800511c:	b2b6      	uxthmi	r6, r6
 800511e:	e7e6      	b.n	80050ee <_printf_i+0x182>
 8005120:	4615      	mov	r5, r2
 8005122:	e7bb      	b.n	800509c <_printf_i+0x130>
 8005124:	682b      	ldr	r3, [r5, #0]
 8005126:	6826      	ldr	r6, [r4, #0]
 8005128:	6961      	ldr	r1, [r4, #20]
 800512a:	1d18      	adds	r0, r3, #4
 800512c:	6028      	str	r0, [r5, #0]
 800512e:	0635      	lsls	r5, r6, #24
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	d501      	bpl.n	8005138 <_printf_i+0x1cc>
 8005134:	6019      	str	r1, [r3, #0]
 8005136:	e002      	b.n	800513e <_printf_i+0x1d2>
 8005138:	0670      	lsls	r0, r6, #25
 800513a:	d5fb      	bpl.n	8005134 <_printf_i+0x1c8>
 800513c:	8019      	strh	r1, [r3, #0]
 800513e:	2300      	movs	r3, #0
 8005140:	6123      	str	r3, [r4, #16]
 8005142:	4615      	mov	r5, r2
 8005144:	e7ba      	b.n	80050bc <_printf_i+0x150>
 8005146:	682b      	ldr	r3, [r5, #0]
 8005148:	1d1a      	adds	r2, r3, #4
 800514a:	602a      	str	r2, [r5, #0]
 800514c:	681d      	ldr	r5, [r3, #0]
 800514e:	6862      	ldr	r2, [r4, #4]
 8005150:	2100      	movs	r1, #0
 8005152:	4628      	mov	r0, r5
 8005154:	f7fb f854 	bl	8000200 <memchr>
 8005158:	b108      	cbz	r0, 800515e <_printf_i+0x1f2>
 800515a:	1b40      	subs	r0, r0, r5
 800515c:	6060      	str	r0, [r4, #4]
 800515e:	6863      	ldr	r3, [r4, #4]
 8005160:	6123      	str	r3, [r4, #16]
 8005162:	2300      	movs	r3, #0
 8005164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005168:	e7a8      	b.n	80050bc <_printf_i+0x150>
 800516a:	6923      	ldr	r3, [r4, #16]
 800516c:	462a      	mov	r2, r5
 800516e:	4649      	mov	r1, r9
 8005170:	4640      	mov	r0, r8
 8005172:	47d0      	blx	sl
 8005174:	3001      	adds	r0, #1
 8005176:	d0ab      	beq.n	80050d0 <_printf_i+0x164>
 8005178:	6823      	ldr	r3, [r4, #0]
 800517a:	079b      	lsls	r3, r3, #30
 800517c:	d413      	bmi.n	80051a6 <_printf_i+0x23a>
 800517e:	68e0      	ldr	r0, [r4, #12]
 8005180:	9b03      	ldr	r3, [sp, #12]
 8005182:	4298      	cmp	r0, r3
 8005184:	bfb8      	it	lt
 8005186:	4618      	movlt	r0, r3
 8005188:	e7a4      	b.n	80050d4 <_printf_i+0x168>
 800518a:	2301      	movs	r3, #1
 800518c:	4632      	mov	r2, r6
 800518e:	4649      	mov	r1, r9
 8005190:	4640      	mov	r0, r8
 8005192:	47d0      	blx	sl
 8005194:	3001      	adds	r0, #1
 8005196:	d09b      	beq.n	80050d0 <_printf_i+0x164>
 8005198:	3501      	adds	r5, #1
 800519a:	68e3      	ldr	r3, [r4, #12]
 800519c:	9903      	ldr	r1, [sp, #12]
 800519e:	1a5b      	subs	r3, r3, r1
 80051a0:	42ab      	cmp	r3, r5
 80051a2:	dcf2      	bgt.n	800518a <_printf_i+0x21e>
 80051a4:	e7eb      	b.n	800517e <_printf_i+0x212>
 80051a6:	2500      	movs	r5, #0
 80051a8:	f104 0619 	add.w	r6, r4, #25
 80051ac:	e7f5      	b.n	800519a <_printf_i+0x22e>
 80051ae:	bf00      	nop
 80051b0:	08005449 	.word	0x08005449
 80051b4:	0800545a 	.word	0x0800545a

080051b8 <_read_r>:
 80051b8:	b538      	push	{r3, r4, r5, lr}
 80051ba:	4d07      	ldr	r5, [pc, #28]	; (80051d8 <_read_r+0x20>)
 80051bc:	4604      	mov	r4, r0
 80051be:	4608      	mov	r0, r1
 80051c0:	4611      	mov	r1, r2
 80051c2:	2200      	movs	r2, #0
 80051c4:	602a      	str	r2, [r5, #0]
 80051c6:	461a      	mov	r2, r3
 80051c8:	f7fe fd83 	bl	8003cd2 <_read>
 80051cc:	1c43      	adds	r3, r0, #1
 80051ce:	d102      	bne.n	80051d6 <_read_r+0x1e>
 80051d0:	682b      	ldr	r3, [r5, #0]
 80051d2:	b103      	cbz	r3, 80051d6 <_read_r+0x1e>
 80051d4:	6023      	str	r3, [r4, #0]
 80051d6:	bd38      	pop	{r3, r4, r5, pc}
 80051d8:	20000454 	.word	0x20000454

080051dc <_fstat_r>:
 80051dc:	b538      	push	{r3, r4, r5, lr}
 80051de:	4d07      	ldr	r5, [pc, #28]	; (80051fc <_fstat_r+0x20>)
 80051e0:	2300      	movs	r3, #0
 80051e2:	4604      	mov	r4, r0
 80051e4:	4608      	mov	r0, r1
 80051e6:	4611      	mov	r1, r2
 80051e8:	602b      	str	r3, [r5, #0]
 80051ea:	f7fe fe54 	bl	8003e96 <_fstat>
 80051ee:	1c43      	adds	r3, r0, #1
 80051f0:	d102      	bne.n	80051f8 <_fstat_r+0x1c>
 80051f2:	682b      	ldr	r3, [r5, #0]
 80051f4:	b103      	cbz	r3, 80051f8 <_fstat_r+0x1c>
 80051f6:	6023      	str	r3, [r4, #0]
 80051f8:	bd38      	pop	{r3, r4, r5, pc}
 80051fa:	bf00      	nop
 80051fc:	20000454 	.word	0x20000454

08005200 <_isatty_r>:
 8005200:	b538      	push	{r3, r4, r5, lr}
 8005202:	4d06      	ldr	r5, [pc, #24]	; (800521c <_isatty_r+0x1c>)
 8005204:	2300      	movs	r3, #0
 8005206:	4604      	mov	r4, r0
 8005208:	4608      	mov	r0, r1
 800520a:	602b      	str	r3, [r5, #0]
 800520c:	f7fe ffaa 	bl	8004164 <_isatty>
 8005210:	1c43      	adds	r3, r0, #1
 8005212:	d102      	bne.n	800521a <_isatty_r+0x1a>
 8005214:	682b      	ldr	r3, [r5, #0]
 8005216:	b103      	cbz	r3, 800521a <_isatty_r+0x1a>
 8005218:	6023      	str	r3, [r4, #0]
 800521a:	bd38      	pop	{r3, r4, r5, pc}
 800521c:	20000454 	.word	0x20000454

08005220 <memcpy>:
 8005220:	440a      	add	r2, r1
 8005222:	4291      	cmp	r1, r2
 8005224:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005228:	d100      	bne.n	800522c <memcpy+0xc>
 800522a:	4770      	bx	lr
 800522c:	b510      	push	{r4, lr}
 800522e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005232:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005236:	4291      	cmp	r1, r2
 8005238:	d1f9      	bne.n	800522e <memcpy+0xe>
 800523a:	bd10      	pop	{r4, pc}

0800523c <memmove>:
 800523c:	4288      	cmp	r0, r1
 800523e:	b510      	push	{r4, lr}
 8005240:	eb01 0402 	add.w	r4, r1, r2
 8005244:	d902      	bls.n	800524c <memmove+0x10>
 8005246:	4284      	cmp	r4, r0
 8005248:	4623      	mov	r3, r4
 800524a:	d807      	bhi.n	800525c <memmove+0x20>
 800524c:	1e43      	subs	r3, r0, #1
 800524e:	42a1      	cmp	r1, r4
 8005250:	d008      	beq.n	8005264 <memmove+0x28>
 8005252:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005256:	f803 2f01 	strb.w	r2, [r3, #1]!
 800525a:	e7f8      	b.n	800524e <memmove+0x12>
 800525c:	4402      	add	r2, r0
 800525e:	4601      	mov	r1, r0
 8005260:	428a      	cmp	r2, r1
 8005262:	d100      	bne.n	8005266 <memmove+0x2a>
 8005264:	bd10      	pop	{r4, pc}
 8005266:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800526a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800526e:	e7f7      	b.n	8005260 <memmove+0x24>

08005270 <_realloc_r>:
 8005270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005274:	4680      	mov	r8, r0
 8005276:	4614      	mov	r4, r2
 8005278:	460e      	mov	r6, r1
 800527a:	b921      	cbnz	r1, 8005286 <_realloc_r+0x16>
 800527c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005280:	4611      	mov	r1, r2
 8005282:	f7ff b8d7 	b.w	8004434 <_malloc_r>
 8005286:	b92a      	cbnz	r2, 8005294 <_realloc_r+0x24>
 8005288:	f7ff fc5a 	bl	8004b40 <_free_r>
 800528c:	4625      	mov	r5, r4
 800528e:	4628      	mov	r0, r5
 8005290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005294:	f000 f81b 	bl	80052ce <_malloc_usable_size_r>
 8005298:	4284      	cmp	r4, r0
 800529a:	4607      	mov	r7, r0
 800529c:	d802      	bhi.n	80052a4 <_realloc_r+0x34>
 800529e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80052a2:	d812      	bhi.n	80052ca <_realloc_r+0x5a>
 80052a4:	4621      	mov	r1, r4
 80052a6:	4640      	mov	r0, r8
 80052a8:	f7ff f8c4 	bl	8004434 <_malloc_r>
 80052ac:	4605      	mov	r5, r0
 80052ae:	2800      	cmp	r0, #0
 80052b0:	d0ed      	beq.n	800528e <_realloc_r+0x1e>
 80052b2:	42bc      	cmp	r4, r7
 80052b4:	4622      	mov	r2, r4
 80052b6:	4631      	mov	r1, r6
 80052b8:	bf28      	it	cs
 80052ba:	463a      	movcs	r2, r7
 80052bc:	f7ff ffb0 	bl	8005220 <memcpy>
 80052c0:	4631      	mov	r1, r6
 80052c2:	4640      	mov	r0, r8
 80052c4:	f7ff fc3c 	bl	8004b40 <_free_r>
 80052c8:	e7e1      	b.n	800528e <_realloc_r+0x1e>
 80052ca:	4635      	mov	r5, r6
 80052cc:	e7df      	b.n	800528e <_realloc_r+0x1e>

080052ce <_malloc_usable_size_r>:
 80052ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052d2:	1f18      	subs	r0, r3, #4
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	bfbc      	itt	lt
 80052d8:	580b      	ldrlt	r3, [r1, r0]
 80052da:	18c0      	addlt	r0, r0, r3
 80052dc:	4770      	bx	lr
	...

080052e0 <_init>:
 80052e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e2:	bf00      	nop
 80052e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052e6:	bc08      	pop	{r3}
 80052e8:	469e      	mov	lr, r3
 80052ea:	4770      	bx	lr

080052ec <_fini>:
 80052ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ee:	bf00      	nop
 80052f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f2:	bc08      	pop	{r3}
 80052f4:	469e      	mov	lr, r3
 80052f6:	4770      	bx	lr
